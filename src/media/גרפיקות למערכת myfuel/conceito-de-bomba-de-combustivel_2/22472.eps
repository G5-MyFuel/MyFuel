%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1710.sm003.022.TS.m004.c5.Fuel pump.eps
%%Creator: Adobe Illustrator(R) 19.2
%%For: 
%%CreationDate: 10/12/2017
%%BoundingBox: 0 0 450 450
%%HiResBoundingBox: 0 0 450 450
%%CropBox: 0 0 450 450
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.2.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.2.1 x147 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c111 79.158366, 2015/09/25-01:12:00        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1710.sm003.022.TS.m004.c5.Fuel pump</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2017-10-12T21:11:35+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2017-10-12T21:11:35+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2017-10-12T21:11:35+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8AOcy3FdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiqpBBJPKsUYqzfcPc5jarVQwYzkn9IbcGGWWQjHmU0msdLsLOW6vX/cw&#xA;I0k0rEgKqipNBnE5PaHVZsgjiqNmgKBP2/sejh2Tgxxue9c+n3NWtppOpWEN5Yv+4uEEkMikkEMK&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:c31ba5cf-f48f-c444-ab56-73cd1aabc3b1</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:c31ba5cf-f48f-c444-ab56-73cd1aabc3b1</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:d44d1041-ea5f-ff4c-adb3-27a00652de22</stRef:instanceID>
            <stRef:documentID>xmp.did:d44d1041-ea5f-ff4c-adb3-27a00652de22</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c208d707-7c93-9c4c-844d-587c91087509</stEvt:instanceID>
                  <stEvt:when>2017-10-12T11:38:43+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:d44d1041-ea5f-ff4c-adb3-27a00652de22</stEvt:instanceID>
                  <stEvt:when>2017-10-12T11:53:07+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:c31ba5cf-f48f-c444-ab56-73cd1aabc3b1</stEvt:instanceID>
                  <stEvt:when>2017-10-12T21:11:35+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -450 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 450 li
450 450 li
450 0 li
cp
clp
450 0 mo
450 450 li
0 450 li
0 0 li
450 0 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.52549 .588235 .639216 rgb
f
362.639 225.428 mo
361.98 225.428 361.446 224.894 361.446 224.235 cv
361.446 223.576 361.98 223.042 362.639 223.042 cv
363.298 223.042 363.832 223.576 363.832 224.235 cv
363.832 224.894 363.298 225.428 362.639 225.428 cv
.854902 .87451 .890196 rgb
f
363.076 219.856 mo
362.417 219.856 361.883 219.321 361.883 218.663 cv
361.883 218.004 362.417 217.469 363.076 217.469 cv
363.735 217.469 364.269 218.004 364.269 218.663 cv
364.269 219.321 363.735 219.856 363.076 219.856 cv
f
363.315 214.228 mo
362.656 214.228 362.122 213.694 362.122 213.035 cv
362.122 212.376 362.656 211.842 363.315 211.842 cv
363.974 211.842 364.508 212.376 364.508 213.035 cv
364.508 213.694 363.974 214.228 363.315 214.228 cv
f
363.355 208.653 mo
362.696 208.653 362.162 208.118 362.162 207.459 cv
362.162 206.8 362.696 206.266 363.355 206.266 cv
364.014 206.266 364.548 206.8 364.548 207.459 cv
364.548 208.118 364.014 208.653 363.355 208.653 cv
f
363.125 203.08 mo
362.466 203.08 361.932 202.546 361.932 201.887 cv
361.932 201.228 362.466 200.694 363.125 200.694 cv
363.784 200.694 364.318 201.228 364.318 201.887 cv
364.318 202.546 363.784 203.08 363.125 203.08 cv
f
362.683 197.446 mo
362.024 197.446 361.49 196.912 361.49 196.253 cv
361.49 195.594 362.024 195.06 362.683 195.06 cv
363.342 195.06 363.876 195.594 363.876 196.253 cv
363.876 196.912 363.342 197.446 362.683 197.446 cv
f
362.02 191.916 mo
361.361 191.916 360.827 191.382 360.827 190.723 cv
360.827 190.064 361.361 189.53 362.02 189.53 cv
362.679 189.53 363.213 190.064 363.213 190.723 cv
363.213 191.382 362.679 191.916 362.02 191.916 cv
f
361.156 186.386 mo
360.497 186.386 359.963 185.852 359.963 185.193 cv
359.963 184.534 360.497 184 361.156 184 cv
361.815 184 362.349 184.534 362.349 185.193 cv
362.349 185.852 361.815 186.386 361.156 186.386 cv
f
323.704 111.352 mo
322.177 110.979 li
322.341 110.894 322.529 110.845 322.727 110.845 cv
323.131 110.845 323.488 111.045 323.704 111.352 cv
f
318.705 109.365 mo
318.046 109.365 317.512 108.831 317.512 108.172 cv
317.512 107.513 318.046 106.979 318.705 106.979 cv
319.364 106.979 319.898 107.513 319.898 108.172 cv
319.898 108.831 319.364 109.365 318.705 109.365 cv
f
314.502 105.653 mo
313.843 105.653 313.309 105.118 313.309 104.459 cv
313.309 103.801 313.843 103.266 314.502 103.266 cv
315.161 103.266 315.695 103.801 315.695 104.459 cv
315.695 105.118 315.161 105.653 314.502 105.653 cv
f
310.126 102.104 mo
309.467 102.104 308.933 101.57 308.933 100.911 cv
308.933 100.252 309.467 99.7182 310.126 99.7182 cv
310.785 99.7182 311.319 100.252 311.319 100.911 cv
311.319 101.57 310.785 102.104 310.126 102.104 cv
f
305.68 98.7494 mo
305.021 98.7494 304.487 98.2152 304.487 97.5563 cv
304.487 96.8974 305.021 96.3632 305.68 96.3632 cv
306.339 96.3632 306.873 96.8974 306.873 97.5563 cv
306.873 98.2152 306.339 98.7494 305.68 98.7494 cv
f
301.069 95.5863 mo
300.41 95.5863 299.876 95.0521 299.876 94.3932 cv
299.876 93.7342 300.41 93.2 301.069 93.2 cv
301.728 93.2 302.262 93.7342 302.262 94.3932 cv
302.262 95.0521 301.728 95.5863 301.069 95.5863 cv
f
296.299 92.575 mo
295.64 92.575 295.106 92.0409 295.106 91.3819 cv
295.106 90.723 295.64 90.1888 296.299 90.1888 cv
296.958 90.1888 297.492 90.723 297.492 91.3819 cv
297.492 92.0409 296.958 92.575 296.299 92.575 cv
f
291.43 89.7838 mo
290.771 89.7838 290.237 89.2496 290.237 88.5907 cv
290.237 87.9317 290.771 87.3976 291.43 87.3976 cv
292.089 87.3976 292.623 87.9317 292.623 88.5907 cv
292.623 89.2496 292.089 89.7838 291.43 89.7838 cv
f
286.484 87.1832 mo
285.825 87.1832 285.29 86.649 285.29 85.9901 cv
285.29 85.3311 285.825 84.7969 286.484 84.7969 cv
287.143 84.7969 287.677 85.3311 287.677 85.9901 cv
287.677 86.649 287.143 87.1832 286.484 87.1832 cv
f
281.388 84.7969 mo
280.729 84.7969 280.195 84.2628 280.195 83.6038 cv
280.195 82.9449 280.729 82.4107 281.388 82.4107 cv
282.047 82.4107 282.581 82.9449 282.581 83.6038 cv
282.581 84.2628 282.047 84.7969 281.388 84.7969 cv
f
276.24 82.6163 mo
275.582 82.6163 275.047 82.0821 275.047 81.4232 cv
275.047 80.7643 275.582 80.2301 276.24 80.2301 cv
276.899 80.2301 277.434 80.7643 277.434 81.4232 cv
277.434 82.0821 276.899 82.6163 276.24 82.6163 cv
f
270.959 80.6432 mo
270.3 80.6432 269.766 80.109 269.766 79.45 cv
269.766 78.7911 270.3 78.2569 270.959 78.2569 cv
271.618 78.2569 272.152 78.7911 272.152 79.45 cv
272.152 80.109 271.618 80.6432 270.959 80.6432 cv
f
265.65 78.8908 mo
264.992 78.8908 264.458 78.3575 264.457 77.6995 cv
264.47 77.5997 264.482 77.5013 264.494 77.4013 cv
264.626 76.8857 265.094 76.5044 265.65 76.5044 cv
266.309 76.5044 266.844 77.0386 266.844 77.6975 cv
266.844 78.3564 266.309 78.8908 265.65 78.8908 cv
f
182.957 79.3162 mo
182.298 79.3162 181.764 78.782 181.764 78.1233 cv
181.764 77.4643 182.298 76.9301 182.957 76.9301 cv
183.616 76.9301 184.15 77.4643 184.15 78.1233 cv
184.15 78.782 183.616 79.3162 182.957 79.3162 cv
f
177.632 81.1375 mo
176.973 81.1375 176.439 80.6034 176.439 79.9444 cv
176.439 79.2855 176.973 78.7513 177.632 78.7513 cv
178.291 78.7513 178.825 79.2855 178.825 79.9444 cv
178.825 80.6034 178.291 81.1375 177.632 81.1375 cv
f
172.406 83.1551 mo
171.747 83.1551 171.213 82.6209 171.213 81.9619 cv
171.213 81.303 171.747 80.7688 172.406 80.7688 cv
173.065 80.7688 173.599 81.303 173.599 81.9619 cv
173.599 82.6209 173.065 83.1551 172.406 83.1551 cv
f
167.295 85.3963 mo
166.636 85.3963 166.102 84.8621 166.102 84.2032 cv
166.102 83.5443 166.636 83.0101 167.295 83.0101 cv
167.954 83.0101 168.488 83.5443 168.488 84.2032 cv
168.488 84.8621 167.954 85.3963 167.295 85.3963 cv
f
162.283 87.8026 mo
161.625 87.8026 161.09 87.2684 161.09 86.6094 cv
161.09 85.9505 161.625 85.4163 162.283 85.4163 cv
162.942 85.4163 163.477 85.9505 163.477 86.6094 cv
163.477 87.2684 162.942 87.8026 162.283 87.8026 cv
f
157.338 90.4688 mo
156.68 90.4688 156.145 89.9346 156.145 89.2757 cv
156.145 88.6167 156.68 88.0825 157.338 88.0825 cv
157.997 88.0825 158.532 88.6167 158.532 89.2757 cv
158.532 89.9346 157.997 90.4688 157.338 90.4688 cv
f
152.554 93.2626 mo
151.895 93.2626 151.361 92.7283 151.361 92.0694 cv
151.361 91.4105 151.895 90.8763 152.554 90.8763 cv
153.213 90.8763 153.747 91.4105 153.747 92.0694 cv
153.747 92.7283 153.213 93.2626 152.554 93.2626 cv
f
147.847 96.3038 mo
147.188 96.3038 146.654 95.7696 146.654 95.1107 cv
146.654 94.4518 147.188 93.9176 147.847 93.9176 cv
148.506 93.9176 149.04 94.4518 149.04 95.1107 cv
149.04 95.7696 148.506 96.3038 147.847 96.3038 cv
f
143.267 99.5157 mo
142.608 99.5157 142.074 98.9815 142.074 98.3225 cv
142.074 97.6636 142.608 97.1294 143.267 97.1294 cv
143.926 97.1294 144.46 97.6636 144.46 98.3225 cv
144.46 98.9815 143.926 99.5157 143.267 99.5157 cv
f
138.805 102.942 mo
138.146 102.942 137.612 102.408 137.612 101.749 cv
137.612 101.09 138.146 100.556 138.805 100.556 cv
139.464 100.556 139.999 101.09 139.999 101.749 cv
139.999 102.408 139.464 102.942 138.805 102.942 cv
f
134.524 106.497 mo
133.865 106.497 133.331 105.963 133.331 105.304 cv
133.331 104.645 133.865 104.111 134.524 104.111 cv
135.183 104.111 135.717 104.645 135.717 105.304 cv
135.717 105.963 135.183 106.497 134.524 106.497 cv
f
130.36 110.247 mo
129.701 110.247 129.167 109.713 129.167 109.054 cv
129.167 108.395 129.701 107.861 130.36 107.861 cv
131.019 107.861 131.554 108.395 131.554 109.054 cv
131.554 109.713 131.019 110.247 130.36 110.247 cv
f
126.362 114.16 mo
125.703 114.16 125.169 113.626 125.169 112.967 cv
125.169 112.308 125.703 111.774 126.362 111.774 cv
127.021 111.774 127.555 112.308 127.555 112.967 cv
127.555 113.626 127.021 114.16 126.362 114.16 cv
f
88.6273 187.839 mo
87.9684 187.839 87.4342 187.305 87.4342 186.646 cv
87.4342 185.987 87.9684 185.453 88.6273 185.453 cv
89.2862 185.453 89.8206 185.987 89.8206 186.646 cv
89.8206 187.305 89.2862 187.839 88.6273 187.839 cv
f
87.768 193.353 mo
87.109 193.353 86.5748 192.819 86.5748 192.16 cv
86.5748 191.501 87.109 190.967 87.768 190.967 cv
88.4269 190.967 88.9611 191.501 88.9611 192.16 cv
88.9611 192.819 88.4269 193.353 87.768 193.353 cv
f
87.1773 198.919 mo
86.5184 198.919 85.9842 198.385 85.9842 197.726 cv
85.9842 197.067 86.5184 196.533 87.1773 196.533 cv
87.8363 196.533 88.3705 197.067 88.3705 197.726 cv
88.3705 198.385 87.8363 198.919 87.1773 198.919 cv
f
86.8184 204.524 mo
86.1594 204.524 85.6253 203.99 85.6253 203.331 cv
85.6253 202.672 86.1594 202.138 86.8184 202.138 cv
87.4773 202.138 88.0115 202.672 88.0115 203.331 cv
88.0115 203.99 87.4773 204.524 86.8184 204.524 cv
f
86.6452 210.096 mo
85.9863 210.096 85.4521 209.562 85.4521 208.903 cv
85.4521 208.244 85.9863 207.71 86.6452 207.71 cv
87.3042 207.71 87.8383 208.244 87.8383 208.903 cv
87.8383 209.562 87.3042 210.096 86.6452 210.096 cv
f
86.7253 215.702 mo
86.0663 215.702 85.5321 215.168 85.5321 214.509 cv
85.5321 213.85 86.0663 213.316 86.7253 213.316 cv
87.3842 213.316 87.9184 213.85 87.9184 214.509 cv
87.9184 215.168 87.3842 215.702 86.7253 215.702 cv
f
87.0277 221.311 mo
86.3688 221.311 85.8346 220.777 85.8346 220.118 cv
85.8346 219.459 86.3688 218.925 87.0277 218.925 cv
87.6867 218.925 88.2209 219.459 88.2209 220.118 cv
88.2209 220.777 87.6867 221.311 87.0277 221.311 cv
f
87.539 226.883 mo
86.88 226.883 86.3459 226.348 86.3459 225.689 cv
86.3459 225.031 86.88 224.496 87.539 224.496 cv
88.1979 224.496 88.7321 225.031 88.7321 225.689 cv
88.7321 226.348 88.1979 226.883 87.539 226.883 cv
f
88.2809 232.434 mo
87.6219 232.434 87.0877 231.9 87.0877 231.241 cv
87.0877 230.582 87.6219 230.048 88.2809 230.048 cv
88.9398 230.048 89.474 230.582 89.474 231.241 cv
89.474 231.9 88.9398 232.434 88.2809 232.434 cv
f
89.2309 237.914 mo
88.5719 237.914 88.0378 237.38 88.0378 236.721 cv
88.0378 236.062 88.5719 235.528 89.2309 235.528 cv
89.8898 235.528 90.424 236.062 90.424 236.721 cv
90.424 237.38 89.8898 237.914 89.2309 237.914 cv
f
128.716 310.518 mo
128.712 310.518 128.708 310.518 128.704 310.518 cv
128.886 310.481 129.066 310.44 129.244 310.395 cv
129.085 310.474 128.906 310.518 128.716 310.518 cv
f
132.806 314.331 mo
132.147 314.331 131.613 313.797 131.613 313.138 cv
131.613 312.479 132.147 311.945 132.806 311.945 cv
133.465 311.945 133.999 312.479 133.999 313.138 cv
133.999 313.797 133.465 314.331 132.806 314.331 cv
f
137.064 317.973 mo
136.405 317.973 135.871 317.439 135.871 316.78 cv
135.871 316.121 136.405 315.587 137.064 315.587 cv
137.723 315.587 138.257 316.121 138.257 316.78 cv
138.257 317.439 137.723 317.973 137.064 317.973 cv
f
141.476 321.439 mo
140.817 321.439 140.283 320.905 140.283 320.246 cv
140.283 319.587 140.817 319.053 141.476 319.053 cv
142.135 319.053 142.669 319.587 142.669 320.246 cv
142.669 320.905 142.135 321.439 141.476 321.439 cv
f
145.997 324.73 mo
145.338 324.73 144.804 324.195 144.804 323.536 cv
144.804 322.878 145.338 322.343 145.997 322.343 cv
146.656 322.343 147.191 322.878 147.191 323.536 cv
147.191 324.195 146.656 324.73 145.997 324.73 cv
f
150.615 327.852 mo
149.956 327.852 149.422 327.317 149.422 326.658 cv
149.422 326 149.956 325.465 150.615 325.465 cv
151.274 325.465 151.808 326 151.808 326.658 cv
151.808 327.317 151.274 327.852 150.615 327.852 cv
f
155.407 330.783 mo
154.748 330.783 154.214 330.249 154.214 329.59 cv
154.214 328.931 154.748 328.397 155.407 328.397 cv
156.066 328.397 156.601 328.931 156.601 329.59 cv
156.601 330.249 156.066 330.783 155.407 330.783 cv
f
160.324 333.504 mo
159.665 333.504 159.131 332.969 159.131 332.31 cv
159.131 331.651 159.665 331.117 160.324 331.117 cv
160.983 331.117 161.517 331.651 161.517 332.31 cv
161.517 332.969 160.983 333.504 160.324 333.504 cv
f
165.344 336.04 mo
164.685 336.04 164.15 335.505 164.15 334.846 cv
164.15 334.188 164.685 333.653 165.344 333.653 cv
166.003 333.653 166.537 334.188 166.537 334.846 cv
166.537 335.505 166.003 336.04 165.344 336.04 cv
f
170.449 338.336 mo
169.79 338.336 169.256 337.802 169.256 337.143 cv
169.256 336.484 169.79 335.95 170.449 335.95 cv
171.108 335.95 171.642 336.484 171.642 337.143 cv
171.642 337.802 171.108 338.336 170.449 338.336 cv
f
175.639 340.464 mo
174.98 340.464 174.446 339.93 174.446 339.271 cv
174.446 338.612 174.98 338.078 175.639 338.078 cv
176.298 338.078 176.832 338.612 176.832 339.271 cv
176.832 339.93 176.298 340.464 175.639 340.464 cv
f
265.141 343.609 mo
264.942 343.609 264.755 343.56 264.59 343.475 cv
264.526 342.818 264.446 342.169 264.35 341.522 cv
264.56 341.336 264.837 341.223 265.141 341.223 cv
265.8 341.223 266.334 341.757 266.334 342.416 cv
266.334 343.075 265.8 343.609 265.141 343.609 cv
f
270.467 341.885 mo
269.809 341.885 269.274 341.35 269.274 340.692 cv
269.274 340.033 269.809 339.498 270.467 339.498 cv
271.126 339.498 271.661 340.033 271.661 340.692 cv
271.661 341.35 271.126 341.885 270.467 341.885 cv
f
275.693 339.949 mo
275.034 339.949 274.5 339.415 274.5 338.756 cv
274.5 338.097 275.034 337.563 275.693 337.563 cv
276.352 337.563 276.886 338.097 276.886 338.756 cv
276.886 338.889 276.864 339.018 276.824 339.138 cv
276.603 339.368 276.401 339.599 276.215 339.829 cv
276.057 339.906 275.88 339.949 275.693 339.949 cv
f
279.695 336.952 mo
279.66 336.839 279.641 336.719 279.641 336.594 cv
279.641 335.935 280.175 335.401 280.834 335.401 cv
281.233 335.401 281.587 335.597 281.803 335.898 cv
281.753 335.92 281.702 335.942 281.652 335.964 cv
281.652 335.963 li
281.451 336.06 li
280.827 336.341 280.242 336.638 279.695 336.952 cv
f
290.901 332.856 mo
290.242 332.856 289.708 332.322 289.708 331.663 cv
289.708 331.601 289.713 331.541 289.722 331.481 cv
290.419 331.317 291.087 331.084 291.714 330.789 cv
291.948 331.007 292.094 331.318 292.094 331.663 cv
292.094 332.322 291.56 332.856 290.901 332.856 cv
f
295.753 330.09 mo
295.094 330.09 294.559 329.556 294.559 328.897 cv
294.559 328.848 294.562 328.799 294.568 328.751 cv
294.868 328.439 295.143 328.108 295.393 327.759 cv
295.506 327.723 295.627 327.704 295.753 327.704 cv
296.411 327.704 296.946 328.238 296.946 328.897 cv
296.946 329.556 296.411 330.09 295.753 330.09 cv
f
300.461 327.148 mo
299.802 327.148 299.268 326.614 299.268 325.955 cv
299.268 325.296 299.802 324.762 300.461 324.762 cv
301.12 324.762 301.654 325.296 301.654 325.955 cv
301.654 326.614 301.12 327.148 300.461 327.148 cv
f
305.088 324.002 mo
304.429 324.002 303.894 323.468 303.894 322.809 cv
303.894 322.15 304.429 321.616 305.088 321.616 cv
305.747 321.616 306.281 322.15 306.281 322.809 cv
306.281 323.468 305.747 324.002 305.088 324.002 cv
f
309.592 320.637 mo
308.933 320.637 308.399 320.103 308.399 319.444 cv
308.399 318.785 308.933 318.251 309.592 318.251 cv
310.251 318.251 310.785 318.785 310.785 319.444 cv
310.785 320.103 310.251 320.637 309.592 320.637 cv
f
313.935 317.151 mo
313.275 317.151 312.741 316.617 312.741 315.958 cv
312.741 315.299 313.275 314.765 313.935 314.765 cv
314.593 314.765 315.128 315.299 315.128 315.958 cv
315.128 316.617 314.593 317.151 313.935 317.151 cv
f
318.154 313.466 mo
317.495 313.466 316.961 312.932 316.961 312.273 cv
316.961 311.614 317.495 311.08 318.154 311.08 cv
318.813 311.08 319.347 311.614 319.347 312.273 cv
319.347 312.932 318.813 313.466 318.154 313.466 cv
f
322.201 309.618 mo
321.542 309.618 321.008 309.084 321.008 308.425 cv
321.008 307.766 321.542 307.232 322.201 307.232 cv
322.86 307.232 323.394 307.766 323.394 308.425 cv
323.394 309.084 322.86 309.618 322.201 309.618 cv
f
326.047 305.587 mo
325.43 305.546 324.94 305.035 324.934 304.409 cv
325.297 304.809 325.668 305.202 326.047 305.587 cv
f
362.231 235.123 mo
359.872 235.123 li
359.958 234.549 360.453 234.109 361.051 234.109 cv
361.65 234.109 362.145 234.549 362.231 235.123 cv
f
361.958 230.969 mo
361.299 230.969 360.765 230.434 360.765 229.775 cv
360.765 229.116 361.299 228.582 361.958 228.582 cv
362.617 228.582 363.151 229.116 363.151 229.775 cv
363.151 230.434 362.617 230.969 361.958 230.969 cv
f
172.992 313.281 mo
163.789 313.281 154.894 308.303 150.311 299.593 cv
148.126 295.438 147.196 290.956 147.387 286.581 cv
150.441 290.446 154.741 292.659 158.948 292.975 cv
159.281 293.001 159.62 293.013 159.964 293.013 cv
163.301 293.013 166.947 291.781 169.818 288.762 cv
169.818 298.428 li
200.872 298.428 li
197.319 300.401 194.022 302.843 191.107 305.753 cv
189.323 307.541 187.243 309.094 184.891 310.332 cv
181.087 312.333 177.011 313.281 172.992 313.281 cv
278.221 313.281 mo
271.482 313.281 264.91 310.613 260.073 305.765 cv
257.154 302.849 253.856 300.404 250.297 298.428 cv
292.175 298.428 li
292.175 287.868 li
286.25 287.868 li
286.25 164.347 li
286.25 161.477 281.38 159.046 277.582 158.177 cv
277.582 143 li
277.582 139.798 274.986 137.202 271.784 137.202 cv
190.206 137.202 li
187.004 137.202 184.408 139.798 184.408 143 cv
184.408 158.177 li
180.61 159.046 175.741 161.477 175.741 164.347 cv
175.741 223.253 li
173.045 223.84 169.319 225.965 168.077 231.351 cv
167.4 234.281 168.03 238.103 168.901 243.398 cv
170.218 251.407 172.023 262.376 170.25 276.561 cv
169.151 285.365 164.429 288.492 160.013 288.492 cv
159.769 288.492 159.526 288.482 159.284 288.464 cv
155.005 288.145 150.598 285.023 148.663 279.595 cv
151.372 270.7 152.057 263.161 150.629 256.806 cv
152.304 251.626 154.508 246.519 156.776 241.268 cv
162.184 228.744 161.175 215.093 161.104 198.056 cv
162.068 198.056 li
162.068 195.236 li
160.505 195.236 li
160.505 193.923 li
157.169 193.923 li
157.169 195.236 li
155.606 195.236 li
155.606 198.056 li
156.583 198.056 li
156.669 214.178 157.846 227.383 152.623 239.475 cv
151.061 243.093 149.527 246.646 148.164 250.214 cv
144.116 242.815 136.183 237.449 124.149 233.707 cv
124.155 233.704 li
117.899 231.76 112.385 227.43 109.094 221.174 cv
102.51 208.66 107.318 193.178 119.832 186.595 cv
121.304 185.821 122.817 185.21 124.351 184.745 cv
124.344 184.741 li
148.781 177.355 155.843 164.173 148.457 139.736 cv
148.465 139.74 li
144.968 128.224 150.004 115.48 161.05 109.668 cv
164.854 107.667 168.929 106.719 172.948 106.719 cv
175.989 106.719 178.999 107.263 181.828 108.306 cv
181.785 112.852 182.209 116.056 182.209 116.056 cv
193.035 116.056 li
201.916 123.885 213.75 127.8 225.583 127.8 cv
237.417 127.799 249.251 123.885 258.132 116.056 cv
271.194 116.056 li
271.194 116.056 271.534 112.548 271.305 107.664 cv
273.573 107.028 275.884 106.719 278.176 106.719 cv
287.379 106.719 296.274 111.696 300.857 120.407 cv
304.168 126.701 304.595 133.746 302.611 140.032 cv
302.621 140.027 li
295.028 164.114 301.859 177.237 325.947 184.83 cv
325.937 184.835 li
332.155 186.793 337.632 191.109 340.906 197.333 cv
347.49 209.848 342.682 225.329 330.168 231.913 cv
328.85 232.606 327.497 233.166 326.127 233.611 cv
326.138 233.616 li
301.775 241.507 294.67 255.42 302.56 279.782 cv
302.549 279.777 li
306.177 290.92 301.733 303.325 291.524 309.535 cv
290.147 309.286 288.634 309.159 287.321 309.159 cv
284.39 309.159 280.465 309.792 279.27 311.007 cv
278.842 311.442 278.561 312.053 278.36 313.28 cv
278.313 313.281 278.267 313.281 278.221 313.281 cv
155.21 174.995 mo
155.21 191.701 li
155.707 191.701 li
155.707 193.89 li
161.967 193.89 li
161.967 191.701 li
162.388 191.701 li
162.545 191.752 li
163.587 191.929 164.611 192.012 165.622 192.012 cv
168.472 192.012 171.219 191.35 173.981 190.265 cv
175.046 189.847 175.698 188.765 175.573 187.627 cv
174.833 180.92 172.234 169.966 172.083 169.512 cv
172.073 169.461 li
172.066 169.462 li
171.635 168.23 170.089 165.924 164.557 164.208 cv
164.341 164.141 164.131 164.083 163.923 164.027 cv
165.312 161.706 li
165.631 161.172 165.457 160.481 164.924 160.161 cv
164.82 160.099 li
168.274 152.889 171.971 148.485 177.123 144.67 cv
175.409 142.105 li
169.624 146.264 166.273 149.515 161.422 158.067 cv
161.27 157.976 li
161.089 157.868 160.89 157.816 160.693 157.816 cv
160.31 157.816 159.937 158.012 159.725 158.364 cv
154.488 167.121 li
154.028 167.026 li
154.003 167.02 153.977 167.018 153.952 167.018 cv
153.777 167.018 153.62 167.14 153.583 167.319 cv
152.176 174.099 li
152.134 174.303 152.265 174.502 152.469 174.545 cv
155.034 175.077 li
155.034 175.077 155.101 175.046 155.21 174.995 cv
175.741 287.868 mo
170.595 287.868 li
172.607 285.378 174.143 281.887 174.738 277.12 cv
176.59 262.288 174.726 250.945 173.363 242.664 cv
172.606 238.062 172.008 234.425 172.482 232.37 cv
173.108 229.657 174.579 228.49 175.741 227.982 cv
175.741 287.868 li
167.294 188.55 mo
165.686 188.55 164.064 188.34 162.465 188.012 cv
162.465 172.124 li
163 171.951 163.537 171.789 164.067 171.643 cv
164.422 171.545 164.768 171.466 165.116 171.382 cv
164.736 172.624 164.299 174.778 164.631 177.523 cv
165.087 181.299 167.791 186.211 169.128 188.452 cv
168.52 188.519 167.908 188.55 167.294 188.55 cv
171.201 188.065 mo
169.822 186.232 167.058 182.125 166.378 177.856 cv
165.854 174.556 166.414 172.259 166.915 170.99 cv
167.038 170.967 167.17 170.936 167.29 170.914 cv
167.443 170.887 167.595 170.873 167.746 170.873 cv
168.949 170.873 170.018 171.731 170.242 172.957 cv
172.675 186.264 li
172.811 187.007 172.371 187.731 171.649 187.95 cv
171.5 187.995 171.35 188.026 171.201 188.065 cv
.4 .478431 .541176 rgb
f
201.697 104.84 mo
201.201 104.481 200.716 104.113 200.238 103.732 cv
200.546 102.737 200.846 102.118 201.098 102.118 cv
201.107 102.118 201.115 102.119 201.124 102.121 cv
201.473 102.178 201.639 103.276 201.697 104.84 cv
187.521 85.9664 mo
186.031 81.7877 185.218 77.2851 185.218 72.5943 cv
185.218 57.0226 194.165 43.5406 207.198 37.008 cv
207.198 37.474 li
207.198 37.475 li
207.198 46.4769 li
207.175 47.0579 207.141 47.6297 207.141 48.2318 cv
207.141 55.2771 209.738 61.9124 214.104 66.3256 cv
214.104 78.1372 li
208.959 78.1372 li
202.82 78.1372 li
202.184 78.1372 li
201.774 78.1835 li
195.027 78.618 190.517 81.7148 187.521 85.9664 cv
188.308 75.3551 mo
187.649 75.3551 187.115 75.8893 187.115 76.5482 cv
187.115 77.207 187.649 77.7412 188.308 77.7412 cv
188.967 77.7412 189.501 77.207 189.501 76.5482 cv
189.501 75.8893 188.967 75.3551 188.308 75.3551 cv
193.72 73.9745 mo
193.061 73.9745 192.527 74.5086 192.527 75.1676 cv
192.527 75.8265 193.061 76.3607 193.72 76.3607 cv
194.379 76.3607 194.913 75.8265 194.913 75.1676 cv
194.913 74.5086 194.379 73.9745 193.72 73.9745 cv
199.223 72.815 mo
198.564 72.815 198.03 73.3493 198.03 74.0082 cv
198.03 74.6671 198.564 75.2013 199.223 75.2013 cv
199.882 75.2013 200.416 74.6671 200.416 74.0082 cv
200.416 73.3493 199.882 72.815 199.223 72.815 cv
204.739 71.9045 mo
204.08 71.9045 203.545 72.4386 203.545 73.0976 cv
203.545 73.7565 204.08 74.2907 204.739 74.2907 cv
205.397 74.2907 205.932 73.7565 205.932 73.0976 cv
205.932 72.4386 205.397 71.9045 204.739 71.9045 cv
210.285 71.1945 mo
209.626 71.1945 209.092 71.7286 209.092 72.3876 cv
209.092 73.0466 209.626 73.5807 210.285 73.5807 cv
210.944 73.5807 211.478 73.0466 211.478 72.3876 cv
211.478 71.7286 210.944 71.1945 210.285 71.1945 cv
f
210.285 73.5807 mo
209.626 73.5807 209.092 73.0466 209.092 72.3876 cv
209.092 71.7286 209.626 71.1945 210.285 71.1945 cv
210.944 71.1945 211.478 71.7286 211.478 72.3876 cv
211.478 73.0466 210.944 73.5807 210.285 73.5807 cv
.815686 .843137 .862745 rgb
f
204.739 74.2907 mo
204.08 74.2907 203.545 73.7565 203.545 73.0976 cv
203.545 72.4386 204.08 71.9045 204.739 71.9045 cv
205.397 71.9045 205.932 72.4386 205.932 73.0976 cv
205.932 73.7565 205.397 74.2907 204.739 74.2907 cv
f
199.223 75.2013 mo
198.564 75.2013 198.03 74.6671 198.03 74.0082 cv
198.03 73.3493 198.564 72.815 199.223 72.815 cv
199.882 72.815 200.416 73.3493 200.416 74.0082 cv
200.416 74.6671 199.882 75.2013 199.223 75.2013 cv
f
193.72 76.3607 mo
193.061 76.3607 192.527 75.8265 192.527 75.1676 cv
192.527 74.5086 193.061 73.9745 193.72 73.9745 cv
194.379 73.9745 194.913 74.5086 194.913 75.1676 cv
194.913 75.8265 194.379 76.3607 193.72 76.3607 cv
f
188.308 77.7412 mo
187.649 77.7412 187.115 77.207 187.115 76.5482 cv
187.115 75.8893 187.649 75.3551 188.308 75.3551 cv
188.967 75.3551 189.501 75.8893 189.501 76.5482 cv
189.501 77.207 188.967 77.7412 188.308 77.7412 cv
f
263.265 83.5116 mo
260.461 80.5942 256.708 78.575 251.7 78.1835 cv
251.033 78.1982 li
251.048 78.1372 li
244.909 78.1372 li
244.866 78.3336 li
239.41 78.4535 li
239.017 78.6088 li
239.017 73.1547 li
239.278 72.9358 239.444 72.6073 239.444 72.2401 cv
239.444 71.8728 239.278 71.5443 239.017 71.3254 cv
239.017 66.6991 li
244.207 61.9464 247.4 54.3568 246.612 46.2301 cv
246.598 46.091 246.58 45.9539 246.565 45.8154 cv
246.565 45.3655 li
246.565 39.159 li
257.527 46.2435 264.782 58.5714 264.782 72.5943 cv
264.782 74.2209 264.684 75.8258 264.494 77.4013 cv
264.47 77.496 264.457 77.5953 264.457 77.6975 cv
264.457 77.6982 264.457 77.6989 264.457 77.6995 cv
264.203 79.6861 263.801 81.6279 263.265 83.5116 cv
260.264 74.9588 mo
259.605 74.9588 259.071 75.493 259.071 76.1521 cv
259.071 76.8108 259.605 77.345 260.264 77.345 cv
260.923 77.345 261.457 76.8108 261.457 76.1521 cv
261.457 75.493 260.923 74.9588 260.264 74.9588 cv
254.82 73.6563 mo
254.161 73.6563 253.627 74.1905 253.627 74.8494 cv
253.627 75.5084 254.161 76.0425 254.82 76.0425 cv
255.479 76.0425 256.013 75.5084 256.013 74.8494 cv
256.013 74.1905 255.479 73.6563 254.82 73.6563 cv
249.343 72.5626 mo
248.685 72.5626 248.15 73.0968 248.15 73.7557 cv
248.15 74.4146 248.685 74.9488 249.343 74.9488 cv
250.002 74.9488 250.537 74.4146 250.537 73.7557 cv
250.537 73.0968 250.002 72.5626 249.343 72.5626 cv
243.777 71.7032 mo
243.118 71.7032 242.584 72.2374 242.584 72.8963 cv
242.584 73.5553 243.118 74.0895 243.777 74.0895 cv
244.436 74.0895 244.97 73.5553 244.97 72.8963 cv
244.97 72.2374 244.436 71.7032 243.777 71.7032 cv
.4 .478431 .541176 rgb
f
264.457 77.6995 mo
264.457 77.6989 264.457 77.6982 264.457 77.6975 cv
264.457 77.5953 264.47 77.496 264.494 77.4013 cv
264.482 77.5013 264.47 77.5997 264.457 77.6995 cv
.815686 .843137 .862745 rgb
f
260.264 77.345 mo
259.605 77.345 259.071 76.8108 259.071 76.1521 cv
259.071 75.493 259.605 74.9588 260.264 74.9588 cv
260.923 74.9588 261.457 75.493 261.457 76.1521 cv
261.457 76.8108 260.923 77.345 260.264 77.345 cv
f
254.82 76.0425 mo
254.161 76.0425 253.627 75.5084 253.627 74.8494 cv
253.627 74.1905 254.161 73.6563 254.82 73.6563 cv
255.479 73.6563 256.013 74.1905 256.013 74.8494 cv
256.013 75.5084 255.479 76.0425 254.82 76.0425 cv
f
249.343 74.9488 mo
248.685 74.9488 248.15 74.4146 248.15 73.7557 cv
248.15 73.0968 248.685 72.5626 249.343 72.5626 cv
250.002 72.5626 250.537 73.0968 250.537 73.7557 cv
250.537 74.4146 250.002 74.9488 249.343 74.9488 cv
f
243.777 74.0895 mo
243.118 74.0895 242.584 73.5553 242.584 72.8963 cv
242.584 72.2374 243.118 71.7032 243.777 71.7032 cv
244.436 71.7032 244.97 72.2374 244.97 72.8963 cv
244.97 73.5553 244.436 74.0895 243.777 74.0895 cv
f
239.017 73.1547 mo
239.017 71.3254 li
239.278 71.5443 239.444 71.8728 239.444 72.2401 cv
239.444 72.6073 239.278 72.9358 239.017 73.1547 cv
f
225 387.187 mo
217.906 387.187 211.247 385.331 205.48 382.077 cv
206.292 382.086 207.113 382.091 207.943 382.091 cv
216.337 382.091 223.85 381.618 229.843 380.955 cv
229.843 386.896 li
228.256 387.088 226.639 387.187 225 387.187 cv
242.83 382.978 mo
242.83 378.596 li
243.465 378.371 243.909 378.155 244.139 377.956 cv
246.125 376.232 247.175 371.866 247.237 367.717 cv
247.241 367.431 247.13 367.156 246.929 366.952 cv
246.728 366.748 246.454 366.633 246.168 366.633 cv
245.652 366.633 li
245.655 366.442 245.662 366.257 245.662 366.06 cv
245.662 359.1 243.868 355.585 243.868 355.585 cv
243.868 355.585 243.522 355.427 242.801 355.171 cv
242.801 355.171 li
242.801 355.171 li
241.541 347.698 235.601 335.721 230.794 330.81 cv
230.794 330.81 224.25 328.389 207.943 328.389 cv
198.942 328.389 192.916 329.127 189.322 329.788 cv
195.82 316.656 209.356 307.624 225 307.624 cv
244.971 307.624 261.506 322.342 264.35 341.522 cv
264.103 341.741 263.947 342.06 263.947 342.416 cv
263.947 342.876 264.208 343.276 264.59 343.475 cv
264.706 344.659 264.771 345.859 264.78 347.072 cv
263.348 347.213 261.816 347.363 260.458 347.532 cv
260.987 351.781 li
262.262 351.623 263.463 351.518 264.581 351.428 cv
263.192 365.266 254.713 377.01 242.83 382.978 cv
247.945 349.094 mo
248.077 349.094 248.211 349.095 248.347 349.098 cv
248.35 349.137 li
248.401 349.828 249.738 352.319 250.038 352.629 cv
250.036 352.631 li
250.05 352.642 li
250.161 352.754 253.012 355.149 254.884 356.364 cv
255.024 356.455 255.182 356.499 255.341 356.499 cv
255.542 356.499 255.742 356.427 255.9 356.286 cv
256.891 355.398 257.647 354.404 258.038 353.128 cv
258.047 353.073 li
258.264 352.641 li
258.687 352.854 li
258.465 353.295 li
259.288 353.709 li
260.352 351.593 li
259.529 351.179 li
259.307 351.62 li
258.884 351.407 li
258.571 352.03 li
259.082 351.013 li
259.382 351.06 259.711 351.082 260.055 351.082 cv
260.329 351.082 260.611 351.068 260.895 351.041 cv
260.54 348.194 li
258.718 348.414 257.605 349.15 257.719 350.112 cv
257.778 350.281 li
254.177 348.47 li
253.866 347.545 li
253.866 347.545 253.813 347.407 253.612 347.337 cv
252.15 346.849 li
249.584 347.199 li
249.844 346.98 250.009 346.652 250.009 346.286 cv
250.009 345.627 249.475 345.093 248.816 345.093 cv
248.157 345.093 247.623 345.627 247.623 346.286 cv
247.623 346.798 247.946 347.235 248.4 347.404 cv
248.299 347.478 248.238 347.6 248.247 347.733 cv
248.252 347.792 li
245.005 347.955 243.545 348.462 241.457 349.553 cv
241.961 350.441 li
243.755 349.534 245.513 349.094 247.945 349.094 cv
243.263 345.941 mo
242.604 345.941 242.07 346.475 242.07 347.134 cv
242.07 347.793 242.604 348.327 243.263 348.327 cv
243.922 348.327 244.456 347.793 244.456 347.134 cv
244.456 346.475 243.922 345.941 243.263 345.941 cv
254.306 344.03 mo
253.647 344.03 253.113 344.564 253.113 345.223 cv
253.113 345.882 253.647 346.416 254.306 346.416 cv
254.965 346.416 255.499 345.882 255.499 345.223 cv
255.499 344.564 254.965 344.03 254.306 344.03 cv
259.711 342.747 mo
259.052 342.747 258.518 343.281 258.518 343.94 cv
258.518 344.599 259.052 345.133 259.711 345.133 cv
260.37 345.133 260.904 344.599 260.904 343.94 cv
260.904 343.281 260.37 342.747 259.711 342.747 cv
241.791 354.832 mo
241.744 354.818 241.696 354.802 241.647 354.787 cv
241.696 354.802 241.744 354.818 241.791 354.832 cv
241.288 354.676 mo
241.116 354.623 240.936 354.57 240.744 354.514 cv
240.936 354.569 241.116 354.623 241.288 354.676 cv
239.895 354.277 mo
239.743 354.235 239.587 354.194 239.425 354.151 cv
239.587 354.194 239.743 354.235 239.895 354.277 cv
239.173 354.086 mo
239.041 354.052 238.906 354.018 238.768 353.984 cv
238.906 354.018 239.041 354.052 239.173 354.086 cv
236.449 353.449 mo
236.314 353.42 236.177 353.391 236.039 353.363 cv
236.177 353.391 236.314 353.42 236.449 353.449 cv
233.169 352.819 mo
232.794 352.754 232.409 352.69 232.013 352.626 cv
232.409 352.69 232.794 352.754 233.169 352.819 cv
229.918 352.314 mo
229.761 352.292 229.603 352.27 229.443 352.248 cv
229.603 352.27 229.761 352.292 229.918 352.314 cv
185.967 352.314 mo
186.124 352.292 186.282 352.27 186.442 352.248 cv
186.282 352.27 186.124 352.292 185.967 352.314 cv
228.966 352.185 mo
228.646 352.143 228.32 352.102 227.99 352.061 cv
228.32 352.102 228.646 352.143 228.966 352.185 cv
187.387 352.124 mo
187.554 352.103 187.724 352.082 187.894 352.061 cv
187.724 352.082 187.554 352.103 187.387 352.124 cv
227.578 352.01 mo
227.111 351.955 226.636 351.9 226.147 351.847 cv
226.636 351.9 227.111 351.955 227.578 352.01 cv
189.78 351.842 mo
190.288 351.788 190.81 351.736 191.341 351.685 cv
190.81 351.736 190.288 351.788 189.78 351.842 cv
225.333 351.762 mo
225.073 351.736 224.809 351.71 224.543 351.684 cv
224.809 351.71 225.073 351.736 225.333 351.762 cv
191.773 351.645 mo
192.164 351.609 192.56 351.573 192.963 351.539 cv
192.56 351.573 192.164 351.609 191.773 351.645 cv
222.357 351.493 mo
221.975 351.463 221.587 351.433 221.194 351.405 cv
221.587 351.433 221.975 351.463 222.357 351.493 cv
194.105 351.448 mo
194.298 351.433 194.493 351.419 194.689 351.405 cv
194.493 351.419 194.298 351.433 194.105 351.448 cv
195.941 351.319 mo
196.166 351.304 196.393 351.29 196.62 351.276 cv
196.393 351.29 196.166 351.304 195.941 351.319 cv
219.715 351.304 mo
219.564 351.295 219.413 351.285 219.261 351.276 cv
219.413 351.285 219.564 351.295 219.715 351.304 cv
218.817 351.249 mo
218.208 351.214 217.588 351.181 216.954 351.152 cv
217.588 351.181 218.208 351.214 218.817 351.249 cv
197.069 351.249 mo
197.373 351.231 197.68 351.214 197.99 351.198 cv
197.68 351.214 197.373 351.231 197.069 351.249 cv
199.823 351.114 mo
200.163 351.099 200.507 351.086 200.854 351.074 cv
200.507 351.086 200.163 351.099 199.823 351.114 cv
215.808 351.103 mo
215.551 351.093 215.291 351.083 215.03 351.074 cv
215.291 351.083 215.551 351.093 215.808 351.103 cv
214.306 351.05 mo
213.872 351.036 213.435 351.024 212.991 351.013 cv
213.435 351.024 213.872 351.036 214.306 351.05 cv
201.601 351.049 mo
202.027 351.036 202.457 351.023 202.893 351.013 cv
202.457 351.024 202.026 351.036 201.601 351.049 cv
212.259 350.996 mo
211.779 350.985 211.292 350.978 210.8 350.971 cv
211.292 350.978 211.779 350.985 212.259 350.996 cv
204.351 350.982 mo
204.594 350.978 204.838 350.974 205.084 350.971 cv
204.838 350.974 204.594 350.978 204.351 350.982 cv
210.127 350.962 mo
209.41 350.954 208.685 350.949 207.942 350.949 cv
207.943 350.949 li
208.685 350.949 209.41 350.954 210.127 350.962 cv
.4 .478431 .541176 rgb
f
243.263 348.327 mo
242.604 348.327 242.07 347.793 242.07 347.134 cv
242.07 346.475 242.604 345.941 243.263 345.941 cv
243.922 345.941 244.456 346.475 244.456 347.134 cv
244.456 347.793 243.922 348.327 243.263 348.327 cv
.815686 .843137 .862745 rgb
f
248.4 347.404 mo
247.946 347.235 247.623 346.798 247.623 346.286 cv
247.623 345.627 248.157 345.093 248.816 345.093 cv
249.475 345.093 250.009 345.627 250.009 346.286 cv
250.009 346.652 249.844 346.98 249.584 347.199 cv
248.592 347.334 li
248.52 347.339 248.454 347.365 248.4 347.404 cv
f
254.306 346.416 mo
253.647 346.416 253.113 345.882 253.113 345.223 cv
253.113 344.564 253.647 344.03 254.306 344.03 cv
254.965 344.03 255.499 344.564 255.499 345.223 cv
255.499 345.882 254.965 346.416 254.306 346.416 cv
f
259.711 345.133 mo
259.052 345.133 258.518 344.599 258.518 343.94 cv
258.518 343.281 259.052 342.747 259.711 342.747 cv
260.37 342.747 260.904 343.281 260.904 343.94 cv
260.904 344.599 260.37 345.133 259.711 345.133 cv
f
264.59 343.475 mo
264.208 343.276 263.947 342.876 263.947 342.416 cv
263.947 342.06 264.103 341.741 264.35 341.522 cv
264.446 342.169 264.526 342.818 264.59 343.475 cv
f
255.208 355.405 mo
255.104 355.405 255 355.372 254.912 355.305 cv
251.341 352.609 li
250.971 352.33 250.898 351.804 251.176 351.434 cv
251.256 351.335 li
251.705 351.375 252.466 351.551 253.363 352.196 cv
254.52 353.028 255.319 354.446 255.658 355.128 cv
255.562 355.253 li
255.467 355.353 255.338 355.405 255.208 355.405 cv
256.081 354.576 mo
255.616 353.846 254.569 352.324 253.524 351.63 cv
252.775 351.133 252.087 350.941 251.662 350.866 cv
251.899 350.617 252.222 350.482 252.551 350.482 cv
252.734 350.482 252.919 350.524 253.093 350.611 cv
255.999 352.072 li
256.572 352.36 256.826 353.043 256.58 353.636 cv
256.443 353.966 256.274 354.279 256.081 354.576 cv
.4 .478431 .541176 rgb
f
364.349 246.209 mo
364.266 246.209 364.184 246.206 364.103 246.199 cv
359.708 245.865 li
359.561 245.373 359.105 245.015 358.565 245.015 cv
358.09 245.015 357.679 245.293 357.488 245.696 cv
349.971 245.123 li
348.424 245.005 347.876 243.889 348.757 242.644 cv
349.637 241.398 351.625 240.321 353.177 240.249 cv
359.023 239.983 li
358.835 240.194 358.721 240.471 358.721 240.775 cv
358.721 241.434 359.256 241.969 359.915 241.969 cv
360.574 241.969 361.108 241.434 361.108 240.775 cv
361.108 240.432 360.963 240.123 360.731 239.905 cv
366.119 239.659 li
367.317 240.027 368.492 240.451 369.638 240.927 cv
369.63 241.231 369.533 241.572 369.337 241.934 cv
368.258 243.931 li
367.559 245.224 365.843 246.209 364.349 246.209 cv
f
359.708 245.865 mo
357.488 245.696 li
357.679 245.293 358.09 245.015 358.565 245.015 cv
359.105 245.015 359.561 245.373 359.708 245.865 cv
.815686 .843137 .862745 rgb
f
359.915 241.969 mo
359.256 241.969 358.721 241.434 358.721 240.775 cv
358.721 240.471 358.835 240.194 359.023 239.983 cv
360.731 239.905 li
360.963 240.123 361.108 240.432 361.108 240.775 cv
361.108 241.434 360.574 241.969 359.915 241.969 cv
f
354.407 317.47 mo
349.09 317.47 344.016 316.427 339.379 314.534 cv
352.803 314.534 li
354.355 314.534 356.895 314.534 358.448 314.534 cv
369.435 314.534 li
364.799 316.427 359.724 317.47 354.407 317.47 cv
326.833 306.364 mo
326.568 306.109 326.305 305.849 326.047 305.587 cv
326.074 305.589 326.1 305.59 326.127 305.59 cv
326.391 305.59 326.636 305.504 326.833 305.358 cv
326.833 306.364 li
324.934 304.409 mo
318.528 297.347 314.625 287.974 314.625 277.689 cv
314.625 266.16 319.53 255.776 327.366 248.51 cv
327.401 248.512 327.436 248.513 327.471 248.513 cv
327.748 248.513 328.037 248.458 328.318 248.342 cv
328.889 248.107 li
330.459 251.905 li
329.24 252.653 li
327.917 253.464 326.833 255.399 326.833 256.952 cv
326.833 303.435 li
326.636 303.289 326.391 303.203 326.127 303.203 cv
325.468 303.203 324.934 303.738 324.934 304.397 cv
324.934 304.401 324.934 304.405 324.934 304.409 cv
.4 .478431 .541176 rgb
f
326.127 305.59 mo
326.1 305.59 326.074 305.589 326.047 305.587 cv
325.668 305.202 325.297 304.809 324.934 304.409 cv
324.934 304.405 324.934 304.401 324.934 304.397 cv
324.934 303.738 325.468 303.203 326.127 303.203 cv
326.391 303.203 326.636 303.289 326.833 303.435 cv
326.833 305.358 li
326.636 305.504 326.391 305.59 326.127 305.59 cv
.815686 .843137 .862745 rgb
f
384.417 303.805 mo
384.417 256.952 li
384.399 256.743 li
384.417 256.576 li
384.417 251.572 li
390.503 258.56 394.189 267.694 394.189 277.689 cv
394.189 287.683 390.503 296.817 384.417 303.805 cv
337.331 248.337 mo
336.017 245.159 li
336.589 244.923 li
337.559 244.522 338.079 243.542 337.748 242.736 cv
337.594 242.366 337.288 242.097 336.907 241.953 cv
339.769 240.549 342.823 239.479 346.021 238.792 cv
340.15 246.946 li
340.016 247.135 339.915 247.323 339.841 247.51 cv
337.798 248.173 li
337.651 248.221 337.491 248.279 337.331 248.337 cv
.4 .478431 .541176 rgb
f
95.5929 317.47 mo
87.4517 317.47 79.8814 315.025 73.5771 310.828 cv
117.609 310.828 li
111.304 315.025 103.734 317.47 95.5929 317.47 cv
59.3682 294.155 mo
57.0842 289.138 55.8111 283.561 55.8111 277.689 cv
55.8111 255.718 73.622 237.907 95.5929 237.907 cv
117.564 237.907 135.375 255.718 135.375 277.689 cv
135.375 282.516 134.515 287.143 132.94 291.424 cv
106.247 245.188 li
103.946 241.211 100.557 238.93 96.9429 238.93 cv
94.8267 238.93 92.7885 239.711 91.0008 241.157 cv
90.8299 241.062 90.6332 241.008 90.424 241.008 cv
89.765 241.008 89.2309 241.542 89.2309 242.201 cv
89.2309 242.399 89.2788 242.585 89.3636 242.749 cv
88.7395 243.47 88.1613 244.286 87.6393 245.188 cv
59.3682 294.155 li
f
89.3636 242.749 mo
89.2788 242.585 89.2309 242.399 89.2309 242.201 cv
89.2309 241.542 89.765 241.008 90.424 241.008 cv
90.6332 241.008 90.8299 241.062 91.0008 241.157 cv
90.4274 241.62 89.8798 242.152 89.3636 242.749 cv
.815686 .843137 .862745 rgb
f
354.407 182.093 mo
332.436 182.093 314.625 164.282 314.625 142.311 cv
314.625 133.801 317.297 125.916 321.848 119.448 cv
338.004 123.392 li
339.658 123.795 342.203 124.843 343.661 125.718 cv
349.054 128.961 li
347.83 130.999 li
351.794 133.411 li
352.542 136.698 li
347.327 142.805 li
347.163 142.342 346.721 142.01 346.202 142.01 cv
345.543 142.01 345.009 142.544 345.009 143.203 cv
345.009 143.796 345.441 144.288 346.008 144.381 cv
342.823 148.597 li
345.17 156.098 li
347.608 154.911 li
349.694 158.875 352.797 164.089 356.404 167.955 cv
356.13 168.174 355.955 168.51 355.955 168.888 cv
355.955 169.547 356.489 170.081 357.148 170.081 cv
357.53 170.081 357.871 169.901 358.089 169.622 cv
359.237 170.66 360.424 171.536 361.637 172.173 cv
363.642 173.228 365.884 173.67 368.391 173.67 cv
371.075 173.67 374.063 173.164 377.391 172.362 cv
378.262 174.151 li
371.615 179.139 363.357 182.093 354.407 182.093 cv
360.023 178.488 mo
359.364 178.488 358.83 179.022 358.83 179.681 cv
358.83 180.34 359.364 180.874 360.023 180.874 cv
360.682 180.874 361.216 180.34 361.216 179.681 cv
361.216 179.022 360.682 178.488 360.023 178.488 cv
358.695 173.081 mo
358.036 173.081 357.502 173.616 357.502 174.274 cv
357.502 174.933 358.036 175.468 358.695 175.468 cv
359.354 175.468 359.888 174.933 359.888 174.274 cv
359.888 173.616 359.354 173.081 358.695 173.081 cv
343.425 137.184 mo
342.766 137.184 342.232 137.719 342.232 138.378 cv
342.232 139.037 342.766 139.571 343.425 139.571 cv
344.084 139.571 344.618 139.037 344.618 138.378 cv
344.618 137.719 344.084 137.184 343.425 137.184 cv
340.426 132.466 mo
339.767 132.466 339.233 133 339.233 133.659 cv
339.233 134.318 339.767 134.852 340.426 134.852 cv
341.085 134.852 341.619 134.318 341.619 133.659 cv
341.619 133 341.085 132.466 340.426 132.466 cv
337.239 127.872 mo
336.58 127.872 336.045 128.406 336.045 129.065 cv
336.045 129.724 336.58 130.258 337.239 130.258 cv
337.897 130.258 338.432 129.724 338.432 129.065 cv
338.432 128.406 337.897 127.872 337.239 127.872 cv
333.838 123.387 mo
333.179 123.387 332.645 123.922 332.645 124.581 cv
332.645 125.24 333.179 125.774 333.838 125.774 cv
334.497 125.774 335.031 125.24 335.031 124.581 cv
335.031 123.922 334.497 123.387 333.838 123.387 cv
.4 .478431 .541176 rgb
f
360.023 180.874 mo
359.364 180.874 358.83 180.34 358.83 179.681 cv
358.83 179.022 359.364 178.488 360.023 178.488 cv
360.682 178.488 361.216 179.022 361.216 179.681 cv
361.216 180.34 360.682 180.874 360.023 180.874 cv
.815686 .843137 .862745 rgb
f
358.695 175.468 mo
358.036 175.468 357.502 174.933 357.502 174.274 cv
357.502 173.616 358.036 173.081 358.695 173.081 cv
359.354 173.081 359.888 173.616 359.888 174.274 cv
359.888 174.933 359.354 175.468 358.695 175.468 cv
f
357.148 170.081 mo
356.489 170.081 355.955 169.547 355.955 168.888 cv
355.955 168.51 356.13 168.174 356.404 167.955 cv
356.955 168.545 357.517 169.104 358.089 169.622 cv
357.871 169.901 357.53 170.081 357.148 170.081 cv
f
346.008 144.381 mo
345.441 144.288 345.009 143.796 345.009 143.203 cv
345.009 142.544 345.543 142.01 346.202 142.01 cv
346.721 142.01 347.163 142.342 347.327 142.805 cv
346.221 144.099 li
346.008 144.381 li
f
343.425 139.571 mo
342.766 139.571 342.232 139.037 342.232 138.378 cv
342.232 137.719 342.766 137.184 343.425 137.184 cv
344.084 137.184 344.618 137.719 344.618 138.378 cv
344.618 139.037 344.084 139.571 343.425 139.571 cv
f
340.426 134.852 mo
339.767 134.852 339.233 134.318 339.233 133.659 cv
339.233 133 339.767 132.466 340.426 132.466 cv
341.085 132.466 341.619 133 341.619 133.659 cv
341.619 134.318 341.085 134.852 340.426 134.852 cv
f
337.239 130.258 mo
336.58 130.258 336.045 129.724 336.045 129.065 cv
336.045 128.406 336.58 127.872 337.239 127.872 cv
337.897 127.872 338.432 128.406 338.432 129.065 cv
338.432 129.724 337.897 130.258 337.239 130.258 cv
f
333.838 125.774 mo
333.179 125.774 332.645 125.24 332.645 124.581 cv
332.645 123.922 333.179 123.387 333.838 123.387 cv
334.497 123.387 335.031 123.922 335.031 124.581 cv
335.031 125.24 334.497 125.774 333.838 125.774 cv
f
368.436 167.913 mo
368.262 167.913 368.092 167.91 367.924 167.904 cv
367.955 164.788 367.29 153.656 356.595 150.534 cv
364.812 146.533 li
374.808 167.059 li
372.415 167.59 370.273 167.913 368.436 167.913 cv
366.295 167.733 mo
365.566 167.598 364.898 167.391 364.314 167.084 cv
360.737 165.204 356.923 159.698 354.065 154.695 cv
358.471 155.363 365.546 157.968 366.295 167.733 cv
387.377 164.579 mo
375.948 141.11 li
375.949 141.109 li
376.322 140.043 li
371.706 130.563 li
354.467 119.949 li
353.331 121.842 li
347.398 118.276 li
345.941 117.399 344.209 116.409 343.991 116.337 cv
343.772 116.264 342.241 115.876 340.587 115.474 cv
328.139 112.435 li
335.146 106.269 344.34 102.529 354.407 102.529 cv
376.378 102.529 394.189 120.34 394.189 142.311 cv
394.189 150.561 391.677 158.225 387.377 164.579 cv
.4 .478431 .541176 rgb
f
62.6966 164.688 mo
58.3508 158.313 55.8111 150.609 55.8111 142.311 cv
55.8111 120.34 73.622 102.529 95.5929 102.529 cv
107.638 102.529 118.431 107.881 125.726 116.338 cv
118.452 108.841 108.274 104.175 97.0277 104.175 cv
74.9693 104.175 57.027 122.12 57.027 144.176 cv
57.027 151.669 59.0973 158.687 62.6966 164.688 cv
f
318.872 378.454 mo
318.541 378.454 318.205 378.381 317.888 378.227 cv
312.135 375.424 li
311.015 374.879 310.55 373.53 311.095 372.41 cv
311.301 371.989 li
311.691 371.188 312.492 370.727 313.327 370.727 cv
313.392 370.727 313.457 370.73 313.523 370.736 cv
322.235 352.843 li
321.994 352.153 li
324.979 346.025 li
336.124 339.163 li
336.859 340.385 li
340.694 338.079 li
341.637 337.513 342.757 336.872 342.899 336.826 cv
343.039 336.78 344.029 336.528 345.099 336.267 cv
360.771 332.442 li
360.929 332.403 361.087 332.385 361.243 332.385 cv
362.143 332.385 362.966 332.999 363.189 333.91 cv
363.513 335.24 li
363.774 336.309 363.113 337.397 362.044 337.658 cv
346.769 341.387 li
345.699 341.648 344.054 342.326 343.111 342.892 cv
339.624 344.988 li
340.416 346.306 li
337.853 347.866 li
337.369 349.991 li
341.456 354.776 li
343.653 357.684 li
342.136 362.534 li
340.559 361.765 li
338.592 365.503 335.227 370.962 331.488 372.927 cv
330.192 373.609 328.743 373.895 327.121 373.895 cv
325.386 373.895 323.454 373.568 321.303 373.049 cv
320.723 374.241 li
321.342 374.904 321.528 375.901 321.107 376.764 cv
320.902 377.187 li
320.511 377.989 319.708 378.454 318.872 378.454 cv
329.437 356.35 mo
322.975 369.618 li
324.518 369.959 325.898 370.166 327.083 370.166 cv
327.199 370.166 327.312 370.164 327.424 370.16 cv
327.405 368.135 327.842 360.954 334.748 358.936 cv
329.437 356.35 li
336.384 361.627 mo
333.537 362.059 328.968 363.741 328.478 370.041 cv
328.944 369.954 329.383 369.834 329.758 369.637 cv
332.07 368.421 334.536 364.862 336.384 361.627 cv
.701961 .741176 .772549 rgb
f
58.4892 236.141 mo
37.9385 236.141 li
37.9385 202.434 li
37.9385 199.592 40.4378 197.155 43.9323 196.185 cv
43.9323 193.026 li
43.9323 192.369 44.4792 191.832 45.1496 191.832 cv
45.3068 191.832 li
45.3068 191.031 li
37.3207 191.645 li
37.2956 191.647 37.2695 191.648 37.2427 191.648 cv
36.8371 191.648 36.2636 191.432 35.9248 191.143 cv
34.0949 189.583 li
33.752 189.291 33.7708 189.067 34.1252 189.067 cv
34.1431 189.067 34.1619 189.067 34.1814 189.068 cv
45.3163 189.72 li
45.3335 189.216 45.4882 188.746 45.7456 188.344 cv
31.7209 181.728 li
31.2372 181.499 31.2648 181.02 31.7831 180.663 cv
32.7723 179.982 li
33.0797 179.769 33.4885 179.657 33.8663 179.657 cv
34.1233 179.657 34.366 179.709 34.5528 179.817 cv
47.2998 187.167 li
47.5694 187.084 47.8502 187.026 48.1465 187.026 cv
48.2821 187.026 li
49.1658 187.026 49.9486 187.435 50.4704 188.062 cv
50.5756 188.059 50.6798 188.058 50.7819 188.058 cv
55.4609 188.058 56.9616 190.706 58.0987 192.718 cv
58.4357 193.314 58.7535 193.876 59.1086 194.29 cv
59.449 194.684 59.9388 195.199 60.4823 195.751 cv
60.5165 195.749 60.5508 195.748 60.5849 195.748 cv
60.892 195.748 61.1903 195.853 61.3816 196.077 cv
64.1063 199.278 li
64.2377 199.402 64.3197 199.479 64.3249 199.484 cv
64.3015 199.507 li
77.205 214.666 li
77.5358 215.055 77.4244 215.615 76.9595 215.912 cv
71.3174 219.525 li
71.1474 219.635 70.9636 219.687 70.7876 219.687 cv
70.4826 219.687 70.2012 219.53 70.0561 219.244 cv
59.1008 197.537 li
58.9652 197.267 58.9937 196.946 59.1251 196.663 cv
58.636 196.161 58.1929 195.691 57.8706 195.318 cv
57.4119 194.786 57.0568 194.157 56.681 193.49 cv
55.64 191.648 54.5645 189.758 51.1053 189.653 cv
51.1218 189.812 li
51.1218 191.832 li
51.2799 191.832 li
51.9494 191.832 52.4962 192.369 52.4962 193.026 cv
52.4962 196.185 li
55.9908 197.155 58.4892 199.592 58.4892 202.434 cv
58.4892 236.141 li
f
431.497 231.301 mo
422.491 231.301 li
395.666 231.301 li
386.624 231.301 li
386.493 230.327 li
386.438 229.924 385.194 220.367 389.643 214.936 cv
391.443 212.738 393.906 211.527 396.961 211.336 cv
397.23 211.31 li
401.849 211.31 li
401.849 205.738 li
399.999 203.563 398.867 200.531 398.867 197.127 cv
398.867 196.947 398.88 196.776 398.884 196.597 cv
398.596 196.212 398.425 195.73 398.391 195.2 cv
398.371 195.018 li
398.371 194.737 398.424 194.467 398.5 194.203 cv
398.659 193.643 398.967 193.128 399.388 192.689 cv
399.68 192.385 400.02 192.119 400.397 191.9 cv
400.691 191.729 401.005 191.59 401.333 191.483 cv
401.511 191.419 li
402.311 191.192 403.109 191.016 403.907 190.862 cv
404.143 190.822 li
405.796 190.519 407.446 190.368 409.096 190.368 cv
410.975 190.368 412.854 190.563 414.737 190.951 cv
414.907 190.987 415.078 191.029 415.249 191.067 cv
415.705 191.169 416.16 191.278 416.617 191.403 cv
416.797 191.447 li
417.063 191.521 417.317 191.625 417.564 191.742 cv
417.948 191.924 418.304 192.151 418.619 192.42 cv
419.204 192.92 419.635 193.554 419.824 194.258 cv
419.891 194.507 419.937 194.762 419.937 195.026 cv
419.937 195.309 419.883 195.574 419.806 195.826 cv
419.715 196.125 419.587 196.403 419.406 196.64 cv
419.593 200.049 418.46 203.373 416.225 205.837 cv
416.101 205.96 li
416.101 211.44 li
421.116 211.331 li
421.171 211.336 li
423.981 211.551 426.289 212.712 428.033 214.792 cv
432.548 220.179 431.638 229.878 431.597 230.288 cv
431.497 231.301 li
421.629 223.641 mo
422.17 223.641 422.641 224.037 422.73 224.588 cv
423.451 229.051 li
429.418 229.051 li
429.516 226.539 429.436 219.965 426.306 216.235 cv
424.959 214.63 423.241 213.761 421.054 213.585 cv
420.5 213.597 li
418.692 221.307 li
420.395 229.051 li
421.171 229.051 li
420.507 224.946 li
420.41 224.333 420.826 223.755 421.439 223.657 cv
421.503 223.646 421.566 223.641 421.629 223.641 cv
396.53 223.641 mo
396.593 223.641 396.656 223.646 396.72 223.657 cv
397.332 223.755 397.75 224.333 397.651 224.946 cv
396.987 229.051 li
397.892 229.051 li
399.618 221.307 li
397.804 213.575 li
397.157 213.577 li
394.662 213.733 392.792 214.643 391.384 216.362 cv
388.303 220.123 388.447 226.604 388.629 229.051 cv
394.707 229.051 li
395.429 224.588 li
395.517 224.037 395.99 223.641 396.53 223.641 cv
402.606 213.562 mo
401.849 213.563 li
400.741 213.567 li
402.433 221.307 li
415.877 221.307 li
417.547 213.66 li
416.101 213.691 li
415.383 213.707 li
415.135 213.805 li
414.688 214.061 413.926 214.472 412.487 214.744 cv
411.618 214.909 410.504 215.024 409.06 215.024 cv
408.886 215.024 408.722 215.018 408.555 215.015 cv
408.24 215.008 407.936 214.995 407.649 214.976 cv
404.448 214.76 403.023 213.862 402.973 213.829 cv
402.969 213.826 li
402.606 213.562 li
404.099 207.723 mo
404.099 211.865 li
404.199 211.939 li
404.438 212.062 405.967 212.774 409.06 212.774 cv
412.039 212.774 413.296 212.242 413.85 211.946 cv
413.85 207.813 li
412.373 208.717 410.733 209.201 409.047 209.201 cv
407.239 209.201 405.556 208.666 404.099 207.723 cv
400.382 197.511 mo
400.465 200.248 401.435 202.99 403.147 204.942 cv
403.511 205.357 403.911 205.732 404.34 206.068 cv
404.934 206.531 405.584 206.917 406.296 207.193 cv
407.136 207.518 408.054 207.701 409.047 207.701 cv
409.96 207.701 410.858 207.521 411.718 207.193 cv
412.43 206.921 413.117 206.549 413.758 206.068 cv
414.194 205.74 414.608 205.361 415.001 204.942 cv
415.113 204.829 li
416.902 202.856 417.896 200.252 417.937 197.53 cv
417.793 197.555 417.645 197.568 417.493 197.568 cv
417.269 197.568 417.037 197.539 416.797 197.474 cv
414.21 196.753 411.634 196.385 409.057 196.385 cv
406.545 196.385 404.033 196.735 401.511 197.449 cv
401.269 197.517 401.033 197.547 400.807 197.547 cv
400.661 197.547 400.519 197.534 400.382 197.511 cv
f
398.519 192.403 mo
398.532 191.095 li
398.532 185.864 402.769 181.626 408.001 181.626 cv
408.411 181.626 li
408.334 181.711 408.279 181.806 408.279 181.92 cv
408.307 182.008 li
407.406 182.679 406.046 183.875 405.008 185.538 cv
404.779 185.904 404.565 186.29 404.376 186.701 cv
404.203 187.079 404.053 187.476 403.927 187.891 cv
403.722 188.569 403.597 189.301 403.565 190.077 cv
402.974 190.194 402.385 190.334 401.798 190.489 cv
401.627 190.534 401.455 190.567 401.284 190.616 cv
401.129 190.66 400.986 190.722 400.838 190.778 cv
400.481 190.91 400.139 191.066 399.829 191.258 cv
399.316 191.574 398.876 191.963 398.519 192.403 cv
f
414.647 190.089 mo
412.769 189.72 410.896 189.524 409.052 189.524 cv
407.423 189.524 405.785 189.686 404.154 189.974 cv
404.207 189.017 404.425 188.141 404.744 187.344 cv
404.895 186.964 405.062 186.596 405.252 186.254 cv
405.464 185.877 405.697 185.53 405.939 185.2 cv
406.895 183.889 408.009 182.949 408.745 182.413 cv
408.898 182.466 409.071 182.503 409.28 182.503 cv
409.563 182.503 409.798 182.447 409.97 182.355 cv
410.796 182.945 412.169 184.088 413.224 185.733 cv
413.475 186.125 413.71 186.539 413.911 186.987 cv
414.095 187.396 414.245 187.834 414.369 188.29 cv
414.522 188.856 414.62 189.454 414.647 190.089 cv
f
419.824 192.464 mo
419.375 191.901 418.785 191.426 418.09 191.072 cv
417.765 190.906 417.425 190.76 417.059 190.655 cv
417.021 190.642 li
416.714 190.557 416.406 190.493 416.099 190.417 cv
415.806 190.345 415.513 190.267 415.221 190.203 cv
415.185 189.772 415.12 189.36 415.035 188.96 cv
414.929 188.459 414.79 187.984 414.623 187.532 cv
414.449 187.06 414.253 186.609 414.029 186.188 cv
412.877 184.02 411.21 182.57 410.265 181.867 cv
410.253 181.776 410.213 181.697 410.149 181.626 cv
410.352 181.626 li
415.583 181.626 419.824 185.864 419.824 191.095 cv
419.824 192.464 li
f
139.889 357.898 mo
139.775 357.898 139.662 357.87 139.552 357.813 cv
139.184 357.62 138.837 357.057 138.961 356.056 cv
139.312 353.255 138.197 351.972 137.408 351.425 cv
137.408 346.608 li
137.534 346.639 137.665 346.663 137.809 346.663 cv
137.82 346.663 li
137.979 346.662 138.128 346.661 138.27 346.661 cv
138.611 347.13 138.842 347.886 139.169 349.065 cv
139.433 350.015 139.761 351.196 140.295 352.568 cv
141.408 355.426 141.095 357.08 140.43 357.672 cv
140.263 357.822 140.076 357.898 139.889 357.898 cv
f
137.765 346.21 mo
137.661 346.195 li
137.685 346.173 li
137.765 346.21 li
f
131.328 383.479 mo
130.452 383.479 129.576 382.929 128.912 381.831 cv
128.912 381.831 113.073 355.624 113.073 346.691 cv
113.073 336.625 121.262 328.436 131.328 328.436 cv
141.394 328.436 149.584 336.625 149.584 346.691 cv
149.584 355.624 133.745 381.829 133.745 381.829 cv
133.08 382.929 132.204 383.479 131.328 383.479 cv
124.831 341.142 mo
124.389 341.142 124.027 341.504 124.027 341.945 cv
124.027 358.577 li
124.027 359.019 124.389 359.38 124.831 359.38 cv
136.605 359.38 li
137.047 359.38 137.408 359.019 137.408 358.577 cv
137.408 352.72 li
137.85 353.298 138.231 354.286 138.024 355.939 cv
137.84 357.419 138.465 358.309 139.113 358.649 cv
139.361 358.779 139.625 358.842 139.889 358.842 cv
140.303 358.842 140.716 358.683 141.061 358.377 cv
141.496 357.986 142.795 356.391 141.175 352.226 cv
140.659 350.898 140.337 349.74 140.079 348.812 cv
139.847 347.975 139.643 347.248 139.363 346.661 cv
139.402 346.661 li
140.094 347.205 li
140.3 347.277 li
140.4 347.277 140.497 347.233 140.564 347.149 cv
140.677 347.005 140.652 346.795 140.507 346.681 cv
138.171 344.846 li
137.966 344.774 li
137.408 344.774 li
137.408 341.945 li
137.408 341.504 137.047 341.142 136.605 341.142 cv
124.831 341.142 li
f
135.056 349.256 mo
131.234 349.256 li
131.779 345.356 li
131.689 345.223 li
131.546 345.3 li
130.152 349.256 li
126.379 349.256 li
125.937 349.256 125.576 348.895 125.576 348.454 cv
125.576 343.597 li
125.576 343.156 125.937 342.794 126.379 342.794 cv
135.056 342.794 li
135.499 342.794 135.861 343.156 135.861 343.597 cv
135.861 344.774 li
135.861 345.441 li
135.861 348.454 li
135.861 348.895 135.499 349.256 135.056 349.256 cv
135.048 345.21 mo
134.938 345.28 134.824 345.36 134.71 345.441 cv
134.536 345.565 134.358 345.698 134.168 345.853 cv
134.145 346.08 li
134.27 346.138 li
134.371 346.103 li
134.676 345.854 134.953 345.65 135.22 345.481 cv
135.248 345.441 li
135.269 345.259 li
135.048 345.21 li
126.389 345.172 mo
126.168 345.22 li
126.215 345.442 li
126.48 345.615 126.757 345.821 127.064 346.075 cv
127.167 346.112 li
127.29 346.052 li
127.269 345.827 li
126.952 345.565 126.666 345.352 126.389 345.172 cv
132.989 344.22 mo
132.779 344.304 li
132.633 344.639 132.49 344.977 132.346 345.317 cv
132.431 345.528 li
132.494 345.541 li
132.641 345.443 li
132.785 345.103 132.928 344.767 133.073 344.432 cv
132.989 344.22 li
128.447 344.204 mo
128.363 344.417 li
128.507 344.751 128.65 345.09 128.794 345.431 cv
128.942 345.529 li
129.004 345.515 li
129.09 345.305 li
128.946 344.964 128.802 344.625 128.658 344.288 cv
128.447 344.204 li
130.718 343.913 mo
130.557 344.074 li
130.556 345.19 li
130.718 345.351 li
130.879 345.19 li
130.879 344.074 li
130.718 343.913 li
f
130.761 357.837 mo
129.619 357.837 128.689 356.908 128.689 355.767 cv
128.689 354.782 130.133 352.3 130.423 351.814 cv
130.761 351.243 li
131.099 351.814 li
131.388 352.3 132.831 354.782 132.831 355.767 cv
132.831 356.908 131.902 357.837 130.761 357.837 cv
130.156 354.102 mo
130.125 354.115 li
130.112 354.147 li
130.068 354.233 li
130.029 354.309 129.97 354.414 129.904 354.547 cv
129.839 354.681 129.767 354.841 129.71 355.024 cv
129.652 355.206 129.612 355.41 129.604 355.623 cv
129.596 355.728 129.601 355.837 129.606 355.944 cv
129.616 356.051 129.631 356.158 129.669 356.255 cv
129.701 356.354 129.75 356.442 129.804 356.518 cv
129.977 356.718 li
130.149 356.854 li
130.297 356.934 li
130.436 356.984 li
130.451 356.983 li
130.467 356.95 li
130.467 356.949 li
130.411 356.817 li
130.349 356.676 li
130.312 356.592 li
130.272 356.503 li
130.193 356.306 li
130.114 356.092 li
130.026 355.865 li
129.968 355.611 li
129.946 355.436 129.955 355.254 129.973 355.08 cv
130.011 354.829 li
130.059 354.604 li
130.093 354.463 130.125 354.346 130.144 354.262 cv
130.165 354.162 li
130.169 354.127 li
130.156 354.102 li
f
318.894 85.3487 mo
315.865 85.3487 312.835 84.7749 309.937 83.6208 cv
297.297 78.6013 291.034 64.0779 295.978 51.2469 cv
298.388 44.9912 303.071 40.0744 309.169 37.4092 cv
312.303 36.0367 315.613 35.3489 318.926 35.3489 cv
321.956 35.3489 324.988 35.9242 327.887 37.0769 cv
333.226 39.1943 337.661 43.1524 340.437 48.243 cv
342.409 48.0006 li
342.441 47.9961 342.473 47.9939 342.504 47.9939 cv
342.73 47.9939 342.945 48.1032 343.083 48.2856 cv
343.241 48.4966 343.273 48.7761 343.168 49.0158 cv
339.933 56.4598 li
339.833 56.6884 339.624 56.8512 339.376 56.8911 cv
339.263 56.8994 li
339.054 56.8994 338.852 56.8097 338.714 56.6514 cv
333.405 50.5936 li
333.228 50.3918 333.176 50.1104 333.267 49.8607 cv
333.358 49.6081 333.579 49.4286 333.843 49.3869 cv
335.499 49.137 li
333.426 45.6083 330.475 43.2153 326.058 41.4607 cv
323.709 40.5281 321.254 40.0627 318.799 40.0627 cv
316.114 40.0627 313.43 40.6199 310.889 41.7318 cv
305.942 43.8946 302.14 47.883 300.185 52.9627 cv
296.168 63.3866 301.249 75.182 311.509 79.2594 cv
313.858 80.1925 316.313 80.658 318.767 80.6579 cv
321.454 80.6579 324.139 80.1001 326.682 78.9873 cv
331.626 76.8255 335.428 72.8351 337.385 67.7555 cv
337.5 67.575 li
337.539 67.5139 li
337.694 67.4038 li
337.769 67.3521 li
337.93 67.3131 li
338.042 67.2891 li
338.142 67.3049 li
338.326 67.3344 li
341.423 68.5032 li
341.519 68.5393 341.601 68.593 341.671 68.6605 cv
341.754 68.7799 li
341.83 68.8883 li
341.87 69.0548 li
341.894 69.1612 li
341.871 69.2983 li
341.848 69.4453 li
341.846 69.4491 li
341.846 69.4499 li
339.436 75.7067 334.751 80.6234 328.656 83.2896 cv
325.522 84.6602 322.209 85.3487 318.894 85.3487 cv
f
311.556 64.6442 mo
303.781 64.6442 li
303.781 62.2613 li
303.781 62.1475 303.781 62.0901 304.323 61.2609 cv
304.475 61.0295 304.647 60.776 304.837 60.4993 cv
305.421 59.659 li
305.762 59.1889 306.296 58.4448 307.021 57.4222 cv
307.693 56.4811 308.198 55.6242 308.528 54.8672 cv
308.784 54.274 308.914 53.7187 308.914 53.2153 cv
308.914 52.8396 308.814 52.5333 308.61 52.277 cv
308.401 52.0281 308.137 51.905 307.804 51.905 cv
307.503 51.905 307.071 51.9937 306.792 52.762 cv
306.719 52.9627 306.681 53.2097 306.681 53.4994 cv
306.681 54.4017 li
303.816 54.4017 li
303.816 53.6771 li
303.816 52.1872 304.23 51.0248 305.051 50.2216 cv
305.765 49.5081 306.712 49.1444 307.862 49.1444 cv
308.93 49.1444 309.854 49.5497 310.608 50.3503 cv
311.355 51.1441 311.733 52.0836 311.733 53.146 cv
311.733 54.2 311.495 55.2327 311.026 56.2109 cv
310.773 56.7513 310.201 57.6464 309.283 58.9456 cv
309.04 59.2889 308.679 59.8256 308.2 60.5558 cv
307.797 61.1601 li
307.638 61.4016 307.503 61.6116 307.391 61.7893 cv
311.556 61.7893 li
311.556 64.6442 li
f
318.025 64.6442 mo
315.123 64.6442 li
315.123 61.4506 li
311.172 61.4506 li
311.199 58.741 li
315.235 49.1444 li
318.025 49.1444 li
318.025 58.5374 li
319.456 58.5374 li
319.456 61.4506 li
318.025 61.4506 li
318.025 64.6442 li
315.123 55.974 mo
314.101 58.5374 li
315.123 58.5374 li
315.123 55.974 li
f
320.178 71.323 mo
317.642 71.323 li
324.083 54.4406 li
326.618 54.4406 li
320.178 71.323 li
f
330.549 74.4148 mo
327.669 74.4148 li
330.803 61.8283 li
326.373 61.8283 li
326.373 58.916 li
333.757 58.916 li
333.747 61.5774 li
330.549 74.4148 li
f
156.397 75.0025 mo
128.974 75.0025 li
129.051 74.8911 li
129.38 74.3717 129.751 73.8062 130.146 73.2047 cv
132.461 69.6743 135.533 64.9815 136.267 60.7573 cv
156.397 60.7573 li
156.397 63.4849 li
151.462 63.4849 li
151.462 65.6715 li
156.397 65.6715 li
156.397 66.731 li
151.462 66.731 li
151.462 68.9185 li
156.397 68.9185 li
156.397 69.978 li
151.462 69.978 li
151.462 72.1646 li
156.397 72.1646 li
156.397 75.0025 li
138.659 70.3238 mo
137.186 70.4253 li
137.223 71.0512 137.383 71.5972 137.666 72.067 cv
137.998 72.6139 138.468 72.9625 139.083 73.1138 cv
139.083 73.8326 li
140.386 73.8326 li
140.386 73.1451 li
140.841 73.0669 141.223 72.8902 141.532 72.6139 cv
142.048 72.1441 142.295 71.4888 142.273 70.6441 cv
142.262 70.2222 142.108 69.7564 141.809 69.2456 cv
141.608 68.9019 141.318 68.5416 140.938 68.1676 cv
140.819 68.0474 140.581 67.8463 140.222 67.566 cv
139.918 67.3198 139.692 67.1148 139.547 66.9478 cv
139.144 66.4791 138.944 66.0211 138.944 65.5728 cv
138.944 65.2867 139.004 65.0465 139.123 64.8541 cv
139.269 64.6148 139.484 64.4947 139.768 64.4947 cv
140.036 64.4947 140.238 64.5728 140.368 64.7291 cv
140.563 64.9635 140.682 65.2779 140.726 65.6744 cv
142.208 65.4166 li
142.154 64.7242 141.888 64.1635 141.41 63.7369 cv
141.139 63.4918 140.798 63.3248 140.386 63.2369 cv
140.386 62.6031 li
139.083 62.6031 li
139.083 63.2369 li
138.479 63.3765 138.026 63.7047 137.723 64.2203 cv
137.473 64.6383 137.349 65.0982 137.349 65.6041 cv
137.349 66.1294 137.481 66.6168 137.747 67.066 cv
137.959 67.4244 138.301 67.8209 138.773 68.2525 cv
139.38 68.8052 139.84 69.2193 140.149 69.4957 cv
140.528 69.9018 140.718 70.3051 140.718 70.7077 cv
140.718 70.9879 140.667 71.2047 140.563 71.3551 cv
140.363 71.6627 140.095 71.8219 139.758 71.8326 cv
139.746 71.8331 139.735 71.8333 139.723 71.8333 cv
139.498 71.8333 139.299 71.7421 139.123 71.5592 cv
138.879 71.313 138.724 70.9019 138.659 70.3238 cv
f
153.25 49.8071 mo
136.446 49.8071 li
136.446 48.6362 li
153.25 48.6362 li
153.25 49.8071 li
f
153.25 52.2114 mo
136.446 52.2114 li
136.446 51.0416 li
153.25 51.0416 li
153.25 52.2114 li
f
153.25 54.6157 mo
136.463 54.6157 li
136.446 54.6157 li
136.446 53.4449 li
136.502 53.4449 li
153.25 53.4449 li
153.25 54.6157 li
f
118.649 90.816 mo
118.427 90.816 118.213 90.7691 118.013 90.6782 cv
103.758 84.2329 li
102.983 83.8814 102.636 82.9625 102.986 82.1842 cv
106.715 73.94 li
106.967 73.3812 107.556 73.0376 108.153 73.0376 cv
108.361 73.0376 108.57 73.0791 108.765 73.1674 cv
109.289 73.4044 li
110.71 74.0474 li
110.881 73.6168 111.069 73.1392 111.286 72.5913 cv
112.176 70.3325 111.063 58.6655 111.559 56.4674 cv
112.139 53.9107 116.461 49.3931 117.344 47.8189 cv
118.529 45.7094 118.605 41.7008 120.83 40.8071 cv
121.046 40.7202 li
121.3 40.6475 121.648 40.4843 122.045 40.3922 cv
122.155 39.7949 122.422 39.2506 122.811 38.7861 cv
123.555 37.8955 124.726 37.31 126.054 37.31 cv
152.402 37.31 li
154.65 37.31 156.476 38.9605 156.476 40.9879 cv
156.476 55.9116 li
156.476 56.1533 156.447 56.3891 156.397 56.6176 cv
156.031 58.3081 154.381 59.5894 152.402 59.5894 cv
136.407 59.5894 li
134.839 59.5894 li
134.81 59.9713 134.757 60.3609 134.679 60.7573 cv
133.783 65.2905 129.897 70.6544 127.737 74.0551 cv
127.525 74.3886 127.296 74.7007 127.059 75.0025 cv
125.828 76.58 124.335 77.7202 123.148 78.2553 cv
122.6 78.5029 122.133 78.7642 121.724 79.0279 cv
123.017 79.6129 li
123.16 79.6773 123.276 79.7778 123.39 79.8784 cv
123.578 80.0435 123.737 80.2363 123.828 80.4771 cv
123.973 80.8648 123.96 81.2856 123.79 81.6616 cv
120.061 89.9058 li
119.812 90.4586 119.255 90.816 118.649 90.816 cv
108.133 74.5825 mo
104.402 82.8131 li
118.646 89.2545 li
122.376 81.0327 li
121.907 80.8203 li
120.357 80.1187 li
110.14 75.4912 li
108.718 74.8476 li
108.133 74.5825 li
123.498 58.752 mo
123.527 59.4218 123.554 59.8765 123.579 60.0045 cv
123.582 60.1583 li
123.582 60.7758 123.561 63.0613 124.582 63.0613 cv
124.699 63.0613 124.829 63.0313 124.975 62.9653 cv
125.714 62.6303 126.967 62.1528 127.836 60.7573 cv
128.044 60.4243 128.228 60.0382 128.378 59.5894 cv
127.068 59.5894 li
126.054 59.5894 li
125.719 59.5894 125.399 59.5424 125.088 59.4732 cv
124.494 59.3419 123.959 59.0899 123.498 58.752 cv
132.87 48.1679 mo
132.981 48.1679 133.096 48.1764 133.214 48.1939 cv
134.268 48.3491 134.72 50.5958 134.88 52.3198 cv
134.967 53.2584 134.969 54.0448 134.931 54.2485 cv
134.83 55.0548 134.835 56.21 134.854 57.2515 cv
136.413 57.2515 li
152.402 57.2515 li
153.343 57.2515 154.139 56.6383 154.139 55.9116 cv
154.139 52.3198 li
154.139 46.4918 li
124.74 46.4918 li
124.316 46.4918 li
124.316 52.3198 li
124.316 55.9116 li
124.316 56.33 124.586 56.7071 124.99 56.9547 cv
125.287 57.1367 125.655 57.2515 126.054 57.2515 cv
127.225 57.2515 li
128.791 57.2515 li
128.87 56.3341 129.216 54.1513 129.376 53.3879 cv
129.285 53.4058 li
129.204 53.4143 129.124 53.4183 129.045 53.4183 cv
128.717 53.4183 128.404 53.3497 128.106 53.2545 cv
128.065 53.4497 li
128.012 53.647 li
127.914 53.8316 li
127.866 53.957 127.753 54.0424 127.658 54.1314 cv
127.647 54.141 li
127.543 54.228 127.401 54.2545 127.284 54.3092 cv
127.265 54.2476 li
127.368 54.1734 127.486 54.1323 127.561 54.0404 cv
127.71 53.8267 li
127.749 53.7467 li
127.807 53.5836 li
127.829 53.4058 li
127.829 53.1798 li
127.829 53.1508 li
127.319 52.9459 126.846 52.6693 126.427 52.3198 cv
126.275 52.1934 126.129 52.0592 125.992 51.9155 cv
125.709 51.6176 125.453 51.2788 125.285 50.8727 cv
125.117 50.4752 125.033 49.9791 125.199 49.5112 cv
125.277 49.2924 li
125.454 49.3011 li
125.622 49.31 125.807 49.2877 125.954 49.3452 cv
126.105 49.398 126.263 49.4448 126.38 49.5338 cv
126.508 49.6118 126.631 49.6939 126.728 49.7945 cv
126.835 49.8892 126.939 49.9849 127.022 50.0943 cv
127.207 50.2992 127.352 50.5278 127.494 50.7564 cv
127.628 50.9887 127.74 51.231 127.834 51.481 cv
127.886 51.6021 127.914 51.7349 127.957 51.861 cv
127.996 51.9752 128.019 52.0952 128.044 52.2149 cv
128.051 52.2485 li
128.062 52.3198 li
128.084 52.4249 128.102 52.5308 128.113 52.6383 cv
128.227 52.692 li
128.522 52.8054 128.832 52.8797 129.126 52.8797 cv
129.161 52.8797 129.196 52.8787 129.231 52.8765 cv
129.333 52.872 129.418 52.8316 129.508 52.8012 cv
129.545 52.6455 129.586 52.4849 129.628 52.3198 cv
129.661 52.1973 li
129.605 52.0594 129.535 51.9287 129.487 51.7885 cv
129.243 51.0474 129.097 50.2564 129.237 49.4427 cv
129.293 49.2446 129.302 49.0133 129.584 48.8198 cv
129.635 48.79 129.695 48.7776 129.754 48.7776 cv
129.873 48.7776 129.992 48.8278 130.044 48.8871 cv
130.149 48.9713 130.216 49.065 130.27 49.1588 cv
130.408 49.3912 130.488 49.6265 130.552 49.8656 cv
131.09 48.8976 131.833 48.1679 132.87 48.1679 cv
132.783 49.0448 mo
131.591 49.0448 131.551 50.6235 131.551 50.6235 cv
131.551 50.6235 131.377 51.8267 131.606 52.3198 cv
131.657 52.4243 li
131.789 52.5978 132.08 52.6364 132.467 52.6364 cv
132.623 52.6364 132.793 52.6302 132.976 52.624 cv
133.157 52.6178 133.35 52.6116 133.55 52.6116 cv
133.57 52.6116 133.59 52.6117 133.611 52.6118 cv
133.622 52.6119 133.634 52.6119 133.645 52.6119 cv
134.405 52.6119 134.297 52.4478 134.297 52.4478 cv
134.284 52.3198 li
134.181 51.1715 133.974 50.0006 133.575 49.234 cv
132.894 49.0493 li
132.856 49.0463 132.819 49.0448 132.783 49.0448 cv
125.786 49.9492 mo
125.748 50.4487 126.066 51.0172 126.474 51.4673 cv
126.776 51.7935 127.129 52.0811 127.511 52.3198 cv
127.709 52.4434 li
127.688 52.3383 li
127.681 52.3198 li
127.649 52.2091 127.617 52.0991 127.566 51.9926 cv
127.516 51.8813 127.48 51.7651 127.419 51.6587 cv
127.31 51.439 127.186 51.2299 127.056 51.0269 cv
126.919 50.8297 126.776 50.6334 126.611 50.4692 cv
126.45 50.3012 126.271 50.148 126.084 50.0561 cv
125.992 49.9907 125.897 49.981 125.808 49.9517 cv
125.786 49.9492 li
129.749 49.1411 mo
129.746 49.1411 129.745 49.143 129.747 49.1469 cv
129.695 49.1655 129.61 49.3521 129.575 49.5133 cv
129.506 49.8549 129.496 50.2456 129.521 50.6099 cv
129.552 50.9799 129.636 51.3491 129.736 51.7114 cv
129.772 51.8071 li
129.904 51.3613 130.063 50.9072 130.253 50.4746 cv
130.244 50.3765 li
130.188 50.0299 130.105 49.645 129.942 49.3549 cv
129.876 49.2214 129.77 49.1411 129.749 49.1411 cv
126.054 39.648 mo
125.523 39.648 125.043 39.8471 124.721 40.1484 cv
124.473 40.3803 124.316 40.6715 124.316 40.9879 cv
124.316 42.2924 li
124.721 42.2924 li
154.139 42.2924 li
154.139 40.9879 li
154.139 40.2612 153.343 39.648 152.402 39.648 cv
126.054 39.648 li
f
109.038 80.9509 mo
109.034 80.9509 109.03 80.9509 109.026 80.9508 cv
109.024 80.9508 109.021 80.9509 109.019 80.9509 cv
108.646 80.9509 108.325 80.8018 108.057 80.5864 cv
107.68 80.2886 107.423 79.8471 107.429 79.3258 cv
107.434 78.9702 107.554 78.6461 107.75 78.3809 cv
108.042 77.9832 108.508 77.7231 109.039 77.7231 cv
109.044 77.7231 109.05 77.7232 109.055 77.7232 cv
109.06 77.723 109.065 77.7229 109.069 77.7229 cv
109.159 77.7229 109.242 77.7574 109.333 77.7758 cv
110.084 77.9174 110.661 78.5523 110.657 79.3463 cv
110.656 79.4674 110.638 79.5841 110.612 79.6973 cv
110.445 80.4166 109.804 80.9509 109.038 80.9509 cv
f
250.297 298.428 mo
200.872 298.428 li
208.349 294.276 216.967 292.2 225.584 292.2 cv
234.202 292.2 242.82 294.277 250.297 298.428 cv
147.387 286.581 mo
144.708 283.19 142.988 278.529 143.132 272.765 cv
143.336 264.729 145.402 257.439 148.164 250.214 cv
149.279 252.253 150.1 254.448 150.629 256.806 cv
148.945 262.015 147.796 267.297 147.655 272.877 cv
147.592 275.398 147.968 277.646 148.663 279.595 cv
148.615 279.753 148.566 279.911 148.517 280.069 cv
148.524 280.065 li
147.869 282.172 147.484 284.363 147.387 286.581 cv
.392157 .439216 .478431 rgb
f
292.175 298.428 mo
250.297 298.428 li
242.82 294.277 234.202 292.2 225.584 292.2 cv
216.967 292.2 208.349 294.276 200.872 298.428 cv
169.818 298.428 li
169.818 288.762 li
166.947 291.781 163.301 293.013 159.964 293.013 cv
159.62 293.013 159.281 293.001 158.948 292.975 cv
154.741 292.659 150.441 290.446 147.387 286.581 cv
147.484 284.363 147.869 282.172 148.524 280.065 cv
148.517 280.069 li
148.566 279.911 148.615 279.753 148.663 279.595 cv
150.598 285.023 155.005 288.145 159.284 288.464 cv
159.526 288.482 159.769 288.492 160.013 288.492 cv
164.429 288.492 169.151 285.365 170.25 276.561 cv
172.023 262.376 170.218 251.407 168.901 243.398 cv
168.03 238.103 167.4 234.281 168.077 231.351 cv
169.319 225.965 173.045 223.84 175.741 223.253 cv
175.741 164.347 li
175.741 161.477 180.61 159.046 184.408 158.177 cv
184.408 143 li
184.408 139.798 187.004 137.202 190.206 137.202 cv
271.784 137.202 li
274.986 137.202 277.582 139.798 277.582 143 cv
277.582 158.177 li
281.38 159.046 286.25 161.477 286.25 164.347 cv
286.25 287.868 li
292.175 287.868 li
292.175 298.428 li
175.741 227.982 mo
174.579 228.49 173.108 229.657 172.482 232.37 cv
172.008 234.425 172.606 238.062 173.363 242.664 cv
174.726 250.945 176.59 262.288 174.738 277.12 cv
174.143 281.887 172.607 285.378 170.595 287.868 cv
175.741 287.868 li
175.741 227.982 li
150.629 256.806 mo
150.1 254.448 149.279 252.253 148.164 250.214 cv
149.527 246.646 151.061 243.093 152.623 239.475 cv
157.846 227.383 156.669 214.178 156.583 198.056 cv
155.606 198.056 li
155.606 195.236 li
157.169 195.236 li
157.169 193.923 li
160.505 193.923 li
160.505 195.236 li
162.068 195.236 li
162.068 198.056 li
161.104 198.056 li
161.175 215.093 162.184 228.744 156.776 241.268 cv
154.508 246.519 152.304 251.626 150.629 256.806 cv
.298039 .356863 .403922 rgb
f
161.967 193.89 mo
155.707 193.89 li
155.707 191.701 li
155.21 191.701 li
155.21 174.995 li
155.101 175.046 155.034 175.077 155.034 175.077 cv
152.469 174.545 li
152.265 174.502 152.134 174.303 152.176 174.099 cv
153.583 167.319 li
153.62 167.14 153.777 167.018 153.952 167.018 cv
153.977 167.018 154.003 167.02 154.028 167.026 cv
154.488 167.121 li
159.725 158.364 li
159.937 158.012 160.31 157.816 160.693 157.816 cv
160.89 157.816 161.089 157.868 161.27 157.976 cv
161.422 158.067 li
166.273 149.515 169.624 146.264 175.409 142.105 cv
177.123 144.67 li
171.971 148.485 168.274 152.889 164.82 160.099 cv
164.924 160.161 li
165.457 160.481 165.631 161.172 165.312 161.706 cv
163.923 164.027 li
164.131 164.083 164.341 164.141 164.557 164.208 cv
170.089 165.924 171.635 168.23 172.066 169.462 cv
172.073 169.461 li
172.083 169.512 li
172.234 169.966 174.833 180.92 175.573 187.627 cv
175.698 188.765 175.046 189.847 173.981 190.265 cv
171.219 191.35 168.472 192.012 165.622 192.012 cv
164.611 192.012 163.587 191.929 162.545 191.752 cv
162.388 191.701 li
161.967 191.701 li
161.967 193.89 li
165.116 171.382 mo
164.768 171.466 164.422 171.545 164.067 171.643 cv
163.537 171.789 163 171.951 162.465 172.124 cv
162.465 188.012 li
164.064 188.34 165.686 188.55 167.294 188.55 cv
167.908 188.55 168.52 188.519 169.128 188.452 cv
167.791 186.211 165.087 181.299 164.631 177.523 cv
164.299 174.778 164.736 172.624 165.116 171.382 cv
167.746 170.873 mo
167.595 170.873 167.443 170.887 167.29 170.914 cv
167.17 170.936 167.038 170.967 166.915 170.99 cv
166.414 172.259 165.854 174.556 166.378 177.856 cv
167.058 182.125 169.822 186.232 171.201 188.065 cv
171.35 188.026 171.5 187.995 171.649 187.95 cv
172.371 187.731 172.811 187.007 172.675 186.264 cv
170.242 172.957 li
170.018 171.731 168.949 170.873 167.746 170.873 cv
f
158.264 291.013 mo
157.92 291.013 157.581 291.001 157.248 290.975 cv
149.351 290.383 141.123 283.1 141.432 270.765 cv
141.736 258.76 146.197 248.421 150.923 237.475 cv
156.33 224.957 154.874 211.256 154.874 194.35 cv
159.398 194.35 li
159.398 212.192 160.664 226.327 155.075 239.268 cv
150.529 249.799 146.236 259.749 145.955 270.877 cv
145.714 280.418 151.768 286.031 157.584 286.464 cv
162.195 286.82 167.39 283.852 168.55 274.561 cv
170.323 260.376 168.518 249.407 167.201 241.398 cv
166.33 236.103 165.7 232.281 166.377 229.351 cv
167.888 222.799 173.079 221.067 175.615 221.067 cv
175.615 225.59 li
175.258 225.602 171.831 225.826 170.782 230.37 cv
170.308 232.425 170.906 236.062 171.663 240.664 cv
173.026 248.945 174.89 260.288 173.038 275.12 cv
171.566 286.917 164.383 291.013 158.264 291.013 cv
cp
.117647 .180392 .25098 rgb
f
185.299 155.832 mo
185.299 288.457 li
174.041 288.457 li
174.041 162.347 li
174.041 158.749 181.701 155.832 185.299 155.832 cv
cp
f
284.55 162.347 mo
284.55 288.457 li
273.292 288.457 li
273.292 155.832 li
276.89 155.832 284.55 158.749 284.55 162.347 cv
cp
f
182.708 288.457 mo
182.708 141 li
182.708 137.798 185.304 135.202 188.506 135.202 cv
270.084 135.202 li
273.286 135.202 275.882 137.798 275.882 141 cv
275.882 288.457 li
182.708 288.457 li
cp
.847059 .372549 .129412 rgb
f
196.905 211.978 mo
196.905 151.086 li
196.905 149.833 197.921 148.818 199.173 148.818 cv
263.027 148.818 li
264.28 148.818 265.295 149.833 265.295 151.086 cv
265.295 211.977 li
265.295 213.23 264.279 214.246 263.026 214.246 cv
199.173 214.246 li
197.921 214.246 196.905 213.23 196.905 211.978 cv
cp
1 1 1 rgb
f
290.474 296.428 mo
168.118 296.428 li
168.118 285.868 li
290.474 285.868 li
290.474 296.428 li
cp
.968627 .682353 .164706 rgb
f
275.882 267.736 mo
182.711 267.736 li
182.711 230.967 li
275.882 230.967 li
275.882 267.736 li
cp
f
229.036 156.457 mo
229.556 156.457 li
229.556 152.286 li
229.036 152.286 li
229.036 156.457 li
cp
.117647 .180392 .25098 rgb
f
227.492 152.733 mo
227.627 154.443 li
227.936 154.419 li
227.801 152.709 li
227.492 152.733 li
cp
f
225.855 152.94 mo
226.123 154.633 li
226.429 154.585 li
226.161 152.891 li
225.855 152.94 li
cp
f
224.238 153.273 mo
224.638 154.941 li
224.94 154.869 li
224.54 153.201 li
224.238 153.273 li
cp
f
222.653 153.733 mo
223.183 155.364 li
223.478 155.268 li
222.948 153.637 li
222.653 153.733 li
cp
f
219.615 155.018 mo
220.393 156.546 li
220.67 156.405 li
219.891 154.877 li
219.615 155.018 li
cp
f
218.181 155.835 mo
219.077 157.297 li
219.341 157.136 li
218.445 155.673 li
218.181 155.835 li
cp
f
216.815 156.762 mo
217.823 158.15 li
218.074 157.967 li
217.066 156.58 li
216.815 156.762 li
cp
f
216.876 158.896 mo
215.762 157.592 li
215.526 157.794 li
216.64 159.098 li
216.876 158.896 li
cp
f
241.952 159.098 mo
243.066 157.794 li
242.83 157.592 li
241.716 158.896 li
241.952 159.098 li
cp
f
241.526 156.58 mo
240.518 157.967 li
240.769 158.15 li
241.777 156.762 li
241.526 156.58 li
cp
f
239.251 157.136 mo
239.515 157.297 li
240.411 155.835 li
240.147 155.673 li
239.251 157.136 li
cp
f
237.922 156.405 mo
238.199 156.546 li
238.977 155.018 li
238.701 154.877 li
237.922 156.405 li
cp
f
235.644 153.637 mo
235.115 155.268 li
235.409 155.364 li
235.939 153.733 li
235.644 153.637 li
cp
f
233.652 154.869 mo
233.953 154.941 li
234.354 153.273 li
234.052 153.201 li
233.652 154.869 li
cp
f
232.163 154.585 mo
232.469 154.633 li
232.737 152.94 li
232.431 152.891 li
232.163 154.585 li
cp
f
230.656 154.419 mo
230.966 154.443 li
231.1 152.733 li
230.791 152.709 li
230.656 154.419 li
cp
f
220.87 154.014 mo
222.466 157.867 li
222.946 157.668 li
221.35 153.815 li
220.87 154.014 li
cp
f
235.646 157.668 mo
236.126 157.867 li
237.722 154.014 li
237.242 153.815 li
235.646 157.668 li
cp
f
229.556 190.929 mo
229.036 190.929 li
229.036 195.099 li
229.556 195.099 li
229.556 190.929 li
cp
f
231.1 194.652 mo
230.965 192.942 li
230.657 192.966 li
230.791 194.676 li
231.1 194.652 li
cp
f
232.737 194.445 mo
232.469 192.752 li
232.163 192.8 li
232.431 194.494 li
232.737 194.445 li
cp
f
234.354 194.112 mo
233.953 192.444 li
233.652 192.517 li
234.052 194.184 li
234.354 194.112 li
cp
f
235.939 193.652 mo
235.409 192.021 li
235.115 192.117 li
235.644 193.748 li
235.939 193.652 li
cp
f
238.977 192.367 mo
238.199 190.839 li
237.922 190.98 li
238.701 192.508 li
238.977 192.367 li
cp
f
240.411 191.55 mo
239.515 190.088 li
239.251 190.249 li
240.147 191.712 li
240.411 191.55 li
cp
f
241.777 190.623 mo
240.769 189.236 li
240.518 189.418 li
241.526 190.805 li
241.777 190.623 li
cp
f
241.716 188.489 mo
242.83 189.793 li
243.066 189.592 li
241.952 188.288 li
241.716 188.489 li
cp
f
243.875 186.364 mo
245.179 187.478 li
245.381 187.242 li
244.076 186.128 li
243.875 186.364 li
cp
f
244.823 185.181 mo
246.211 186.189 li
246.393 185.939 li
245.005 184.93 li
244.823 185.181 li
cp
f
245.675 183.928 mo
247.138 184.823 li
247.3 184.559 li
245.838 183.663 li
245.675 183.928 li
cp
f
246.427 182.611 mo
247.955 183.389 li
248.096 183.113 li
246.567 182.335 li
246.427 182.611 li
cp
f
247.608 179.821 mo
249.24 180.351 li
249.336 180.057 li
247.705 179.527 li
247.608 179.821 li
cp
f
248.032 178.366 mo
249.699 178.766 li
249.772 178.465 li
248.104 178.064 li
248.032 178.366 li
cp
f
248.34 176.881 mo
250.033 177.15 li
250.082 176.844 li
248.388 176.575 li
248.34 176.881 li
cp
f
248.53 175.378 mo
250.239 175.512 li
250.264 175.203 li
248.554 175.068 li
248.53 175.378 li
cp
f
248.554 172.348 mo
250.264 172.214 li
250.239 171.905 li
248.53 172.039 li
248.554 172.348 li
cp
f
248.388 170.841 mo
250.082 170.573 li
250.033 170.267 li
248.34 170.535 li
248.388 170.841 li
cp
f
248.104 169.352 mo
249.772 168.952 li
249.699 168.651 li
248.032 169.051 li
248.104 169.352 li
cp
f
247.705 167.89 mo
249.336 167.36 li
249.24 167.065 li
247.608 167.595 li
247.705 167.89 li
cp
f
246.567 165.082 mo
248.096 164.303 li
247.955 164.027 li
246.427 164.806 li
246.567 165.082 li
cp
f
245.838 163.753 mo
247.3 162.857 li
247.138 162.593 li
245.675 163.489 li
245.838 163.753 li
cp
f
245.005 162.486 mo
246.393 161.478 li
246.211 161.228 li
244.823 162.235 li
245.005 162.486 li
cp
f
244.076 161.288 mo
245.381 160.174 li
245.179 159.939 li
243.875 161.053 li
244.076 161.288 li
cp
f
214.717 161.053 mo
213.412 159.939 li
213.212 160.174 li
214.515 161.288 li
214.717 161.053 li
cp
f
213.769 162.235 mo
212.381 161.228 li
212.199 161.478 li
213.587 162.486 li
213.769 162.235 li
cp
f
212.916 163.489 mo
211.454 162.593 li
211.292 162.857 li
212.755 163.753 li
212.916 163.489 li
cp
f
212.165 164.806 mo
210.637 164.027 li
210.497 164.303 li
212.024 165.082 li
212.165 164.806 li
cp
f
210.983 167.595 mo
209.352 167.065 li
209.256 167.36 li
210.887 167.89 li
210.983 167.595 li
cp
f
210.56 169.051 mo
208.892 168.651 li
208.82 168.952 li
210.488 169.352 li
210.56 169.051 li
cp
f
210.253 170.535 mo
208.559 170.267 li
208.51 170.573 li
210.204 170.841 li
210.253 170.535 li
cp
f
210.062 172.039 mo
208.353 171.905 li
208.328 172.214 li
210.038 172.348 li
210.062 172.039 li
cp
f
210.038 175.068 mo
208.328 175.203 li
208.353 175.512 li
210.062 175.378 li
210.038 175.068 li
cp
f
210.204 176.575 mo
208.51 176.844 li
208.559 177.15 li
210.253 176.881 li
210.204 176.575 li
cp
f
210.488 178.064 mo
208.82 178.465 li
208.892 178.766 li
210.56 178.366 li
210.488 178.064 li
cp
f
210.887 179.527 mo
209.256 180.057 li
209.352 180.351 li
210.983 179.821 li
210.887 179.527 li
cp
f
212.024 182.335 mo
210.497 183.113 li
210.637 183.389 li
212.165 182.611 li
212.024 182.335 li
cp
f
212.755 183.663 mo
211.292 184.559 li
211.454 184.823 li
212.916 183.928 li
212.755 183.663 li
cp
f
213.587 184.93 mo
212.199 185.939 li
212.381 186.189 li
213.769 185.181 li
213.587 184.93 li
cp
f
214.515 186.128 mo
213.212 187.242 li
213.412 187.478 li
214.717 186.364 li
214.515 186.128 li
cp
f
216.64 188.288 mo
215.526 189.592 li
215.762 189.793 li
216.876 188.489 li
216.64 188.288 li
cp
f
217.066 190.805 mo
218.074 189.418 li
217.823 189.236 li
216.815 190.623 li
217.066 190.805 li
cp
f
219.341 190.249 mo
219.077 190.088 li
218.181 191.55 li
218.445 191.712 li
219.341 190.249 li
cp
f
220.669 190.98 mo
220.393 190.839 li
219.615 192.367 li
219.891 192.508 li
220.669 190.98 li
cp
f
222.948 193.748 mo
223.478 192.117 li
223.183 192.021 li
222.653 193.652 li
222.948 193.748 li
cp
f
224.94 192.517 mo
224.638 192.444 li
224.238 194.112 li
224.54 194.184 li
224.94 192.517 li
cp
f
226.429 192.8 mo
226.123 192.752 li
225.855 194.445 li
226.161 194.494 li
226.429 192.8 li
cp
f
227.936 192.966 mo
227.627 192.942 li
227.492 194.652 li
227.801 194.676 li
227.936 192.966 li
cp
f
237.722 193.372 mo
236.126 189.519 li
235.646 189.717 li
237.242 193.57 li
237.722 193.372 li
cp
f
244.605 188.65 mo
241.656 185.701 li
241.289 186.069 li
244.238 189.018 li
244.605 188.65 li
cp
f
245.106 180.538 mo
248.959 182.134 li
249.158 181.654 li
245.305 180.058 li
245.106 180.538 li
cp
f
246.516 173.968 mo
250.687 173.968 li
250.687 173.449 li
246.516 173.449 li
246.516 173.968 li
cp
f
245.305 167.359 mo
249.158 165.762 li
248.959 165.283 li
245.106 166.878 li
245.305 167.359 li
cp
f
244.605 158.767 mo
244.238 158.399 li
241.289 161.348 li
241.656 161.715 li
244.605 158.767 li
cp
f
217.303 161.348 mo
214.354 158.399 li
213.987 158.767 li
216.936 161.715 li
217.303 161.348 li
cp
f
213.486 166.878 mo
209.633 165.283 li
209.434 165.762 li
213.287 167.359 li
213.486 166.878 li
cp
f
212.076 173.968 mo
212.076 173.449 li
207.905 173.449 li
207.905 173.968 li
212.076 173.968 li
cp
f
213.287 180.058 mo
209.434 181.654 li
209.633 182.134 li
213.486 180.538 li
213.287 180.058 li
cp
f
216.936 185.701 mo
213.987 188.65 li
214.354 189.018 li
217.303 186.069 li
216.936 185.701 li
cp
f
222.946 189.717 mo
222.466 189.519 li
220.87 193.372 li
221.35 193.57 li
222.946 189.717 li
cp
f
220.231 161.557 mo
219.813 161.893 li
219.395 162.23 li
226.088 172.244 li
227.33 171.246 li
228.571 170.248 li
220.231 161.557 li
cp
.847059 .372549 .129412 rgb
f
233.598 173.693 mo
233.598 176.068 231.672 177.995 229.296 177.995 cv
226.92 177.995 224.994 176.068 224.994 173.693 cv
224.994 171.316 226.92 169.39 229.296 169.39 cv
231.672 169.39 233.598 171.316 233.598 173.693 cv
cp
.117647 .180392 .25098 rgb
f
158.805 193.376 mo
155.469 193.376 li
155.469 191.923 li
158.805 191.923 li
158.805 193.376 li
cp
f
160.368 196.056 mo
153.906 196.056 li
153.906 193.236 li
160.368 193.236 li
160.368 196.056 li
cp
f
163.861 168.199 mo
163.861 168.199 162.396 171.095 162.931 175.523 cv
163.542 180.575 168.177 187.665 168.177 187.665 cv
170.293 187.068 li
170.293 187.068 165.593 181.605 164.678 175.856 cv
163.833 170.54 165.805 167.821 165.805 167.821 cv
163.861 168.199 li
cp
f
160.765 189.701 mo
160.765 169.165 li
153.509 169.165 li
153.509 189.701 li
160.765 189.701 li
cp
f
160.267 191.89 mo
160.267 189.701 li
154.007 189.701 li
154.007 191.89 li
160.267 191.89 li
cp
1 1 1 rgb
f
159.66 156.174 mo
164.545 147.539 167.899 144.282 173.709 140.105 cv
175.423 142.67 li
170.244 146.505 166.535 150.933 163.065 158.211 cv
159.66 156.174 li
cp
f
160.765 186.012 mo
163.831 186.64 166.985 186.852 169.949 185.951 cv
170.671 185.731 171.11 185.007 170.975 184.264 cv
168.542 170.957 li
168.29 169.578 166.969 168.665 165.59 168.914 cv
164.583 169.097 163.488 169.334 162.367 169.643 cv
158.107 170.815 153.334 173.077 153.334 173.077 cv
150.769 172.545 li
150.565 172.503 150.434 172.303 150.476 172.099 cv
151.883 165.319 li
151.925 165.115 152.125 164.984 152.328 165.026 cv
152.788 165.121 li
158.025 156.364 li
158.345 155.831 159.036 155.657 159.57 155.976 cv
163.224 158.161 li
163.757 158.481 163.931 159.172 163.612 159.706 cv
162.223 162.027 li
162.431 162.083 162.641 162.141 162.857 162.208 cv
168.389 163.924 169.935 166.23 170.366 167.462 cv
170.373 167.461 li
170.383 167.512 li
170.534 167.966 173.133 178.92 173.873 185.627 cv
173.998 186.764 173.346 187.846 172.281 188.265 cv
168.538 189.736 164.826 190.428 160.845 189.752 cv
159.237 189.478 159.537 185.76 160.765 186.012 cv
cp
.847059 .372549 .129412 rgb
f
227.183 233.949 mo
227.183 245.39 219.653 244.883 219.023 252.11 cv
218.536 257.698 222.9 262.289 228.509 262.289 cv
234.118 262.289 238.157 257.913 238.157 252.304 cv
238.157 245.423 233.107 238.857 227.183 233.949 cv
cp
.117647 .180392 .25098 rgb
f
233.479 258.522 mo
234.586 257.264 235.348 255.646 235.595 253.785 cv
236.353 248.052 232.934 242.036 228.571 237.252 cv
232.412 242.545 235.224 248.995 234.396 255.245 cv
234.239 256.43 233.908 257.517 233.479 258.522 cv
cp
1 1 1 rgb
f
211.242 208.809 mo
207.343 208.809 li
207.343 201.689 li
211.242 201.689 li
211.242 208.809 li
cp
.847059 .372549 .129412 rgb
f
216.459 208.809 mo
212.56 208.809 li
212.56 201.689 li
216.459 201.689 li
216.459 208.809 li
cp
f
221.677 208.809 mo
217.778 208.809 li
217.778 201.689 li
221.677 201.689 li
221.677 208.809 li
cp
f
226.895 208.809 mo
222.996 208.809 li
222.996 201.689 li
226.895 201.689 li
226.895 208.809 li
cp
f
239.204 208.809 mo
235.305 208.809 li
235.305 201.689 li
239.204 201.689 li
239.204 208.809 li
cp
f
244.422 208.809 mo
240.523 208.809 li
240.523 201.689 li
244.422 201.689 li
244.422 208.809 li
cp
f
249.64 208.809 mo
245.741 208.809 li
245.741 201.689 li
249.64 201.689 li
249.64 208.809 li
cp
f
254.858 208.809 mo
250.959 208.809 li
250.959 201.689 li
254.858 201.689 li
254.858 208.809 li
cp
f
258.132 116.056 mo
255.321 116.056 li
255.142 111.538 253.445 102.118 252.458 102.118 cv
252.45 102.118 252.441 102.119 252.432 102.121 cv
251.278 102.311 252.115 113.883 252.284 116.056 cv
251.048 116.056 li
202.82 116.056 li
201.269 116.056 li
201.386 114.54 201.83 108.449 201.697 104.84 cv
208.246 109.581 216.297 112.376 225 112.376 cv
243.185 112.376 258.52 100.175 263.265 83.5116 cv
269.319 89.8099 270.959 100.3 271.305 107.664 cv
269.595 108.143 267.912 108.809 266.277 109.668 cv
263.924 110.906 261.844 112.459 260.061 114.247 cv
259.435 114.871 258.792 115.475 258.132 116.056 cv
198.238 116.056 mo
193.035 116.056 li
192.371 115.47 191.725 114.864 191.095 114.235 cv
188.442 111.576 185.267 109.573 181.828 108.306 cv
181.89 101.787 182.912 92.5088 187.521 85.9664 cv
190.038 93.0206 194.49 99.1549 200.238 103.732 cv
199.343 106.623 198.369 112.696 198.238 116.056 cv
246.565 39.159 mo
240.352 35.1436 232.948 32.8125 225 32.8125 cv
218.601 32.8125 212.554 34.3234 207.198 37.008 cv
207.198 36.3039 li
207.198 26.364 216.005 19.6278 226.877 19.6278 cv
237.749 19.6278 246.565 26.364 246.565 36.3039 cv
246.565 37.475 li
246.565 39.159 li
.392157 .439216 .478431 rgb
f
271.194 116.056 mo
258.132 116.056 li
258.792 115.475 259.435 114.871 260.061 114.247 cv
261.844 112.459 263.924 110.906 266.277 109.668 cv
267.912 108.809 269.595 108.143 271.305 107.664 cv
271.534 112.548 271.194 116.056 271.194 116.056 cv
193.035 116.056 mo
182.209 116.056 li
182.209 116.056 181.785 112.852 181.828 108.306 cv
185.267 109.573 188.442 111.576 191.095 114.235 cv
191.725 114.864 192.371 115.47 193.035 116.056 cv
.298039 .356863 .403922 rgb
f
225 112.376 mo
216.297 112.376 208.246 109.581 201.697 104.84 cv
201.639 103.276 201.473 102.178 201.124 102.121 cv
201.115 102.119 201.107 102.118 201.098 102.118 cv
200.846 102.118 200.546 102.737 200.238 103.732 cv
194.49 99.1549 190.038 93.0206 187.521 85.9664 cv
190.517 81.7148 195.027 78.618 201.774 78.1835 cv
202.184 78.1372 li
202.82 78.1372 li
208.959 78.1372 li
214.104 78.1372 li
214.104 66.3256 li
209.738 61.9124 207.141 55.2771 207.141 48.2318 cv
207.141 47.6297 207.175 47.0579 207.198 46.4769 cv
207.198 37.475 li
207.198 37.474 li
207.198 37.008 li
212.554 34.3234 218.601 32.8125 225 32.8125 cv
232.948 32.8125 240.352 35.1436 246.565 39.159 cv
246.565 45.3655 li
246.565 45.8154 li
246.58 45.9539 246.598 46.091 246.612 46.2301 cv
247.4 54.3568 244.207 61.9464 239.017 66.6991 cv
239.017 71.3254 li
238.81 71.1516 238.543 71.047 238.251 71.047 cv
237.592 71.047 237.058 71.5812 237.058 72.2401 cv
237.058 72.899 237.592 73.4332 238.251 73.4332 cv
238.543 73.4332 238.81 73.3285 239.017 73.1547 cv
239.017 78.6088 li
239.41 78.4535 li
244.866 78.3336 li
244.909 78.1372 li
251.048 78.1372 li
251.033 78.1982 li
251.7 78.1835 li
256.708 78.575 260.461 80.5942 263.265 83.5116 cv
258.52 100.175 243.185 112.376 225 112.376 cv
215.851 70.7414 mo
215.192 70.7414 214.658 71.2755 214.658 71.9344 cv
214.658 72.5933 215.192 73.1275 215.851 73.1275 cv
216.51 73.1275 217.044 72.5933 217.044 71.9344 cv
217.044 71.2755 216.51 70.7414 215.851 70.7414 cv
232.637 70.6407 mo
231.978 70.6407 231.444 71.1749 231.444 71.8338 cv
231.444 72.4928 231.978 73.0269 232.637 73.0269 cv
233.296 73.0269 233.83 72.4928 233.83 71.8338 cv
233.83 71.1749 233.296 70.6407 232.637 70.6407 cv
221.484 70.4757 mo
220.825 70.4757 220.29 71.0099 220.29 71.6689 cv
220.29 72.3278 220.825 72.862 221.484 72.862 cv
222.143 72.862 222.677 72.3278 222.677 71.6689 cv
222.677 71.0099 222.143 70.4757 221.484 70.4757 cv
227.07 70.4407 mo
226.412 70.4407 225.877 70.9749 225.877 71.6338 cv
225.877 72.2928 226.412 72.8269 227.07 72.8269 cv
227.729 72.8269 228.264 72.2928 228.264 71.6338 cv
228.264 70.9749 227.729 70.4407 227.07 70.4407 cv
f
238.251 73.4332 mo
237.592 73.4332 237.058 72.899 237.058 72.2401 cv
237.058 71.5812 237.592 71.047 238.251 71.047 cv
238.543 71.047 238.81 71.1516 239.017 71.3254 cv
239.017 73.1547 li
238.81 73.3285 238.543 73.4332 238.251 73.4332 cv
.611765 .631373 .647059 rgb
f
232.637 73.0269 mo
231.978 73.0269 231.444 72.4928 231.444 71.8338 cv
231.444 71.1749 231.978 70.6407 232.637 70.6407 cv
233.296 70.6407 233.83 71.1749 233.83 71.8338 cv
233.83 72.4928 233.296 73.0269 232.637 73.0269 cv
f
227.07 72.8269 mo
226.412 72.8269 225.877 72.2928 225.877 71.6338 cv
225.877 70.9749 226.412 70.4407 227.07 70.4407 cv
227.729 70.4407 228.264 70.9749 228.264 71.6338 cv
228.264 72.2928 227.729 72.8269 227.07 72.8269 cv
f
221.484 72.862 mo
220.825 72.862 220.29 72.3278 220.29 71.6689 cv
220.29 71.0099 220.825 70.4757 221.484 70.4757 cv
222.143 70.4757 222.677 71.0099 222.677 71.6689 cv
222.677 72.3278 222.143 72.862 221.484 72.862 cv
f
215.851 73.1275 mo
215.192 73.1275 214.658 72.5933 214.658 71.9344 cv
214.658 71.2755 215.192 70.7414 215.851 70.7414 cv
216.51 70.7414 217.044 71.2755 217.044 71.9344 cv
217.044 72.5933 216.51 73.1275 215.851 73.1275 cv
f
212.404 62.9164 mo
212.404 79.1334 li
222.863 84.4016 li
237.317 78.994 li
237.317 62.9164 li
212.404 62.9164 li
cp
.952941 .796078 .639216 rgb
f
225.01 69.7365 mo
236.573 69.7365 246.22 57.7163 244.912 44.23 cv
243.724 32.0168 236.594 22.103 225.044 22.103 cv
213.494 22.103 205.441 30.6013 205.441 46.232 cv
205.441 58.6121 213.452 69.7365 225.01 69.7365 cv
cp
1 .87451 .72549 rgb
f
250 76.1836 mo
237.71 76.4535 li
237.317 76.6089 li
236.633 76.8891 li
235.561 77.5206 232.89 79.2612 225.038 79.2612 cv
217.171 79.2612 213.714 77.1228 213.69 77.1054 cv
212.404 76.1372 li
200.484 76.1372 li
200.074 76.1836 li
175.706 77.7529 180.509 114.056 180.509 114.056 cv
196.538 114.056 li
196.715 109.497 198.444 99.948 199.424 100.121 cv
200.577 100.311 199.737 111.882 199.569 114.056 cv
250.584 114.056 li
250.415 111.882 249.578 100.311 250.732 100.121 cv
251.715 99.948 253.441 109.497 253.621 114.056 cv
269.494 114.056 li
269.494 114.056 272.991 77.9808 250 76.1836 cv
cp
.968627 .682353 .164706 rgb
f
201.12 76.1372 mo
207.259 76.1372 li
211.283 94.5476 li
205.441 94.5476 li
201.12 76.1372 li
cp
.117647 .180392 .25098 rgb
f
249.348 76.1372 mo
243.209 76.1372 li
239.186 94.5476 li
245.031 94.5476 li
249.348 76.1372 li
cp
f
249.348 114.056 mo
201.12 114.056 li
205.441 94.5476 li
245.031 94.5476 li
249.348 114.056 li
cp
f
225.236 22.1134 mo
225.044 22.1031 li
213.494 22.1031 205.441 30.6013 205.441 46.2319 cv
205.441 58.6121 213.452 69.7365 225.01 69.7365 cv
225.236 69.7292 li
225.236 22.1134 li
cp
.992157 .847059 .678431 rgb
f
225.177 18.7988 mo
214.304 18.7988 205.498 25.5351 205.498 35.475 cv
205.498 44.5366 li
205.498 44.1206 206.642 43.7539 208.61 43.4431 cv
208.701 43.4226 208.803 43.4118 208.891 43.3947 cv
210.809 46.7136 li
210.832 46.7599 li
212.025 48.8763 212.158 49.3777 213.777 49.3777 cv
214.033 49.3777 li
215.137 48.6999 219.701 48.2079 225.177 48.2079 cv
230.666 48.2079 235.264 48.7142 236.344 49.3777 cv
236.602 49.3777 li
238.205 49.3777 238.336 48.8763 239.542 46.7599 cv
239.571 46.7136 li
241.471 43.3947 li
241.561 43.4118 241.665 43.4226 241.758 43.4431 cv
243.732 43.7539 244.865 44.1206 244.865 44.5366 cv
244.865 35.475 li
244.865 25.5351 236.049 18.7988 225.177 18.7988 cv
cp
.960784 .803922 .647059 rgb
f
244.865 34.3039 mo
244.865 43.3655 li
244.865 42.9496 243.732 42.5829 241.758 42.272 cv
241.665 42.2515 241.561 42.2407 241.471 42.2236 cv
239.571 45.5425 li
239.542 45.5888 li
238.336 47.7052 238.205 48.2066 236.602 48.2066 cv
236.344 48.2066 li
235.264 47.5431 230.666 47.0368 225.177 47.0368 cv
219.701 47.0368 215.137 47.5289 214.033 48.2066 cv
213.776 48.2066 li
212.158 48.2066 212.025 47.7052 210.832 45.5888 cv
210.809 45.5425 li
208.891 42.2236 li
208.803 42.2407 208.701 42.2515 208.61 42.272 cv
206.642 42.5829 205.498 42.9496 205.498 43.3655 cv
205.498 34.3039 li
205.498 24.364 214.304 17.6278 225.177 17.6278 cv
236.049 17.6278 244.865 24.364 244.865 34.3039 cv
cp
.968627 .682353 .164706 rgb
f
241.758 42.272 mo
241.665 42.2515 241.561 42.2407 241.471 42.2236 cv
239.571 45.5425 li
239.542 45.5888 li
238.336 47.7052 238.205 48.2066 236.602 48.2066 cv
236.344 48.2066 li
235.264 47.5431 230.666 47.0368 225.177 47.0368 cv
219.701 47.0368 215.137 47.5289 214.033 48.2066 cv
213.776 48.2066 li
212.158 48.2066 212.025 47.7052 210.832 45.5888 cv
210.809 45.5425 li
208.891 42.2236 li
208.803 42.2407 208.701 42.2515 208.61 42.272 cv
212.106 41.5143 218.224 41.01 225.19 41.01 cv
232.141 41.01 238.26 41.5143 241.758 42.272 cv
cp
.85098 .560784 .0392157 rgb
f
229.23 31.3742 mo
228.459 28.7641 225.379 24.0296 225.182 24.0296 cv
224.984 24.0296 221.904 28.7641 221.133 31.3742 cv
220.336 34.0726 222.808 36.4 225.182 36.4 cv
227.555 36.4 230.027 34.0726 229.23 31.3742 cv
cp
.117647 .180392 .25098 rgb
f
222.868 28.8656 mo
222.411 29.7674 222.02 30.652 221.807 31.3742 cv
221.39 32.7859 222.078 34.1749 223.123 34.9485 cv
222.191 32.9661 222.098 31.1986 222.868 28.8656 cv
cp
1 1 1 rgb
f
381.151 180.722 mo
379.859 180.722 378.615 180.001 378.012 178.762 cv
377.695 178.107 li
377.043 176.771 377.331 175.229 378.288 174.205 cv
378.262 174.151 li
381.805 171.491 384.891 168.254 387.377 164.579 cv
389.425 168.784 li
389.526 168.775 389.628 168.77 389.729 168.77 cv
391.019 168.77 392.259 169.483 392.86 170.721 cv
393.179 171.373 li
394.022 173.104 393.303 175.192 391.571 176.036 cv
382.672 180.37 li
382.182 180.609 381.663 180.722 381.151 180.722 cv
321.848 119.448 mo
315.112 117.803 li
317.067 109.732 li
322.177 110.979 li
321.795 111.178 321.534 111.578 321.534 112.038 cv
321.534 112.697 322.068 113.231 322.727 113.231 cv
323.386 113.231 323.92 112.697 323.92 112.038 cv
323.92 111.783 323.84 111.546 323.704 111.352 cv
328.139 112.435 li
325.776 114.513 323.663 116.868 321.848 119.448 cv
.392157 .439216 .478431 rgb
f
322.727 113.231 mo
322.068 113.231 321.534 112.697 321.534 112.038 cv
321.534 111.578 321.795 111.178 322.177 110.979 cv
323.704 111.352 li
323.84 111.546 323.92 111.783 323.92 112.038 cv
323.92 112.697 323.386 113.231 322.727 113.231 cv
.639216 .654902 .666667 rgb
f
378.262 174.151 mo
377.391 172.362 li
374.063 173.164 371.075 173.67 368.391 173.67 cv
365.884 173.67 363.642 173.228 361.637 172.173 cv
360.424 171.536 359.237 170.66 358.089 169.622 cv
358.247 169.419 358.341 169.165 358.341 168.888 cv
358.341 168.229 357.807 167.695 357.148 167.695 cv
356.867 167.695 356.608 167.792 356.404 167.955 cv
352.797 164.089 349.694 158.875 347.608 154.911 cv
345.17 156.098 li
342.823 148.597 li
346.008 144.381 li
346.071 144.391 346.136 144.396 346.202 144.396 cv
346.861 144.396 347.395 143.862 347.395 143.203 cv
347.395 143.064 347.371 142.929 347.327 142.805 cv
352.542 136.698 li
351.794 133.411 li
347.83 130.999 li
349.054 128.961 li
343.661 125.718 li
342.203 124.843 339.658 123.795 338.004 123.392 cv
321.848 119.448 li
323.663 116.868 325.776 114.513 328.139 112.435 cv
340.587 115.474 li
342.241 115.876 343.772 116.264 343.991 116.337 cv
344.209 116.409 345.941 117.399 347.398 118.276 cv
353.331 121.842 li
354.467 119.949 li
371.706 130.563 li
376.322 140.043 li
375.949 141.109 li
375.948 141.11 li
387.377 164.579 li
384.891 168.254 381.805 171.491 378.262 174.151 cv
364.812 146.533 mo
356.595 150.534 li
367.29 153.656 367.955 164.788 367.924 167.904 cv
368.092 167.91 368.262 167.913 368.436 167.913 cv
370.273 167.913 372.415 167.59 374.808 167.059 cv
364.812 146.533 li
354.065 154.695 mo
356.923 159.698 360.737 165.204 364.314 167.084 cv
364.898 167.391 365.566 167.598 366.295 167.733 cv
365.546 157.968 358.471 155.363 354.065 154.695 cv
355.381 162.366 mo
354.722 162.366 354.188 162.9 354.188 163.559 cv
354.188 164.218 354.722 164.752 355.381 164.752 cv
356.04 164.752 356.574 164.218 356.574 163.559 cv
356.574 162.9 356.04 162.366 355.381 162.366 cv
353.408 157.153 mo
352.749 157.153 352.215 157.687 352.215 158.346 cv
352.215 159.005 352.749 159.539 353.408 159.539 cv
354.067 159.539 354.601 159.005 354.601 158.346 cv
354.601 157.687 354.067 157.153 353.408 157.153 cv
351.199 152.014 mo
350.54 152.014 350.006 152.549 350.006 153.208 cv
350.006 153.866 350.54 154.401 351.199 154.401 cv
351.858 154.401 352.392 153.866 352.392 153.208 cv
352.392 152.549 351.858 152.014 351.199 152.014 cv
348.803 146.945 mo
348.144 146.945 347.61 147.479 347.61 148.138 cv
347.61 148.797 348.144 149.331 348.803 149.331 cv
349.462 149.331 349.996 148.797 349.996 148.138 cv
349.996 147.479 349.462 146.945 348.803 146.945 cv
330.338 119.074 mo
329.679 119.074 329.145 119.608 329.145 120.267 cv
329.145 120.926 329.679 121.46 330.338 121.46 cv
330.997 121.46 331.531 120.926 331.531 120.267 cv
331.531 119.608 330.997 119.074 330.338 119.074 cv
326.624 114.892 mo
325.965 114.892 325.431 115.426 325.431 116.085 cv
325.431 116.744 325.965 117.278 326.624 117.278 cv
327.283 117.278 327.817 116.744 327.817 116.085 cv
327.817 115.426 327.283 114.892 326.624 114.892 cv
.298039 .356863 .403922 rgb
f
358.089 169.622 mo
357.517 169.104 356.955 168.545 356.404 167.955 cv
356.608 167.792 356.867 167.695 357.148 167.695 cv
357.807 167.695 358.341 168.229 358.341 168.888 cv
358.341 169.165 358.247 169.419 358.089 169.622 cv
.611765 .631373 .647059 rgb
f
355.381 164.752 mo
354.722 164.752 354.188 164.218 354.188 163.559 cv
354.188 162.9 354.722 162.366 355.381 162.366 cv
356.04 162.366 356.574 162.9 356.574 163.559 cv
356.574 164.218 356.04 164.752 355.381 164.752 cv
f
353.408 159.539 mo
352.749 159.539 352.215 159.005 352.215 158.346 cv
352.215 157.687 352.749 157.153 353.408 157.153 cv
354.067 157.153 354.601 157.687 354.601 158.346 cv
354.601 159.005 354.067 159.539 353.408 159.539 cv
f
351.199 154.401 mo
350.54 154.401 350.006 153.866 350.006 153.208 cv
350.006 152.549 350.54 152.014 351.199 152.014 cv
351.858 152.014 352.392 152.549 352.392 153.208 cv
352.392 153.866 351.858 154.401 351.199 154.401 cv
f
348.803 149.331 mo
348.144 149.331 347.61 148.797 347.61 148.138 cv
347.61 147.479 348.144 146.945 348.803 146.945 cv
349.462 146.945 349.996 147.479 349.996 148.138 cv
349.996 148.797 349.462 149.331 348.803 149.331 cv
f
346.202 144.396 mo
346.136 144.396 346.071 144.391 346.008 144.381 cv
346.221 144.099 li
347.327 142.805 li
347.371 142.929 347.395 143.064 347.395 143.203 cv
347.395 143.862 346.861 144.396 346.202 144.396 cv
f
330.338 121.46 mo
329.679 121.46 329.145 120.926 329.145 120.267 cv
329.145 119.608 329.679 119.074 330.338 119.074 cv
330.997 119.074 331.531 119.608 331.531 120.267 cv
331.531 120.926 330.997 121.46 330.338 121.46 cv
f
326.624 117.278 mo
325.965 117.278 325.431 116.744 325.431 116.085 cv
325.431 115.426 325.965 114.892 326.624 114.892 cv
327.283 114.892 327.817 115.426 327.817 116.085 cv
327.817 116.744 327.283 117.278 326.624 117.278 cv
f
348.862 152.49 mo
348.862 152.49 364.25 151.392 364.659 166.827 cv
366.196 166.726 li
366.196 166.726 367.494 150.759 353.046 148.086 cv
348.862 152.49 li
cp
.117647 .180392 .25098 rgb
f
348.46 145 mo
345.823 146.141 li
348.458 145 li
348.46 145 li
cp
382.718 168.454 mo
372.889 171.307 365.501 173.101 359.937 170.173 cv
351.339 165.654 343.994 149.152 343.186 147.287 cv
348.46 145 li
350.438 149.558 356.838 162.048 362.614 165.084 cv
366.266 167.006 372.865 165.328 381.114 162.933 cv
382.718 168.454 li
cp
.968627 .682353 .164706 rgb
f
389.306 170.03 mo
378.17 175.453 li
361.224 140.658 li
372.361 135.235 li
389.306 170.03 li
cp
.117647 .180392 .25098 rgb
f
357.813 123.557 mo
345.698 116.276 li
344.241 115.399 342.509 114.409 342.29 114.337 cv
342.072 114.265 340.542 113.876 338.887 113.474 cv
315.367 107.732 li
313.412 115.803 li
336.304 121.392 li
337.958 121.795 340.503 122.843 341.961 123.718 cv
353.532 130.675 li
354.99 131.55 356.901 131.076 357.778 129.618 cv
358.868 127.801 li
359.745 126.343 359.27 124.432 357.813 123.557 cv
cp
.960784 .960784 .960784 rgb
f
343.47 154.098 mo
374.249 139.109 li
374.621 138.043 li
370.006 128.563 li
352.767 117.949 li
346.13 128.999 li
350.094 131.411 li
350.842 134.698 li
344.521 142.099 li
341.123 146.597 li
343.47 154.098 li
cp
.968627 .682353 .164706 rgb
f
391.479 169.373 mo
392.322 171.104 391.603 173.192 389.87 174.036 cv
380.972 178.37 li
379.244 179.212 377.154 178.493 376.312 176.762 cv
375.995 176.107 li
375.15 174.376 375.871 172.288 377.602 171.447 cv
386.5 167.114 li
388.231 166.27 390.319 166.99 391.16 168.721 cv
391.479 169.373 li
cp
.117647 .180392 .25098 rgb
f
376.136 314.534 mo
369.435 314.534 li
375.242 312.164 380.361 308.461 384.417 303.805 cv
384.417 306.631 li
384.417 308.183 383.488 310.32 382.351 311.376 cv
381.026 312.611 li
379.888 313.669 377.689 314.534 376.136 314.534 cv
339.379 314.534 mo
335.114 314.534 li
333.562 314.534 331.362 313.669 330.225 312.611 cv
328.899 311.376 li
327.763 310.32 326.833 308.183 326.833 306.631 cv
326.833 306.364 li
330.432 309.826 334.681 312.616 339.379 314.534 cv
384.417 251.572 mo
380.409 246.971 375.361 243.3 369.638 240.927 cv
369.659 240.122 369.056 239.576 368.005 239.576 cv
367.957 239.576 367.909 239.577 367.859 239.58 cv
366.119 239.659 li
362.416 238.52 358.484 237.907 354.407 237.907 cv
351.531 237.907 348.724 238.212 346.021 238.792 cv
347.013 237.415 li
347.92 236.155 349.933 235.123 351.484 235.123 cv
359.872 235.123 li
359.863 235.182 359.858 235.241 359.858 235.302 cv
359.858 235.961 360.393 236.495 361.051 236.495 cv
361.71 236.495 362.245 235.961 362.245 235.302 cv
362.245 235.241 362.24 235.182 362.231 235.123 cv
377.078 235.123 li
378.631 235.123 380.856 235.96 382.023 236.982 cv
382.294 237.217 li
383.462 238.238 384.417 240.346 384.417 241.897 cv
384.417 251.572 li
.392157 .439216 .478431 rgb
f
361.051 236.495 mo
360.393 236.495 359.858 235.961 359.858 235.302 cv
359.858 235.241 359.863 235.182 359.872 235.123 cv
362.231 235.123 li
362.24 235.182 362.245 235.241 362.245 235.302 cv
362.245 235.961 361.71 236.495 361.051 236.495 cv
.639216 .654902 .666667 rgb
f
327.366 248.51 mo
326.731 248.478 326.177 248.153 325.953 247.61 cv
325.621 246.804 326.14 245.823 327.112 245.423 cv
335.381 242.004 li
335.663 241.888 335.952 241.833 336.229 241.833 cv
336.469 241.833 336.699 241.874 336.907 241.953 cv
333.406 243.671 330.195 245.887 327.366 248.51 cv
.392157 .439216 .478431 rgb
f
369.435 314.534 mo
358.448 314.534 li
356.895 314.534 354.355 314.534 352.803 314.534 cv
339.379 314.534 li
334.681 312.616 330.432 309.826 326.833 306.364 cv
326.833 305.358 li
327.129 305.141 327.32 304.791 327.32 304.397 cv
327.32 304.002 327.129 303.652 326.833 303.435 cv
326.833 256.952 li
326.833 255.399 327.917 253.464 329.24 252.653 cv
330.459 251.905 li
328.889 248.107 li
328.318 248.342 li
328.037 248.458 327.748 248.513 327.471 248.513 cv
327.436 248.513 327.401 248.512 327.366 248.51 cv
330.195 245.887 333.406 243.671 336.907 241.953 cv
337.288 242.097 337.594 242.366 337.748 242.736 cv
338.079 243.542 337.559 244.522 336.589 244.923 cv
336.017 245.159 li
337.331 248.337 li
337.491 248.279 337.651 248.221 337.798 248.173 cv
339.841 247.51 li
339.915 247.323 340.016 247.135 340.15 246.946 cv
346.021 238.792 li
348.724 238.212 351.531 237.907 354.407 237.907 cv
358.484 237.907 362.416 238.52 366.119 239.659 cv
360.731 239.905 li
360.517 239.705 360.23 239.582 359.915 239.582 cv
359.56 239.582 359.241 239.737 359.023 239.983 cv
353.177 240.249 li
351.625 240.321 349.637 241.398 348.757 242.644 cv
347.876 243.889 348.424 245.005 349.971 245.123 cv
357.488 245.696 li
357.414 245.851 357.372 246.025 357.372 246.208 cv
357.372 246.867 357.906 247.402 358.565 247.402 cv
359.224 247.402 359.758 246.867 359.758 246.208 cv
359.758 246.089 359.741 245.974 359.708 245.865 cv
364.103 246.199 li
364.184 246.206 364.266 246.209 364.349 246.209 cv
365.843 246.209 367.559 245.224 368.258 243.931 cv
369.337 241.934 li
369.533 241.572 369.63 241.231 369.638 240.927 cv
375.361 243.3 380.409 246.971 384.417 251.572 cv
384.417 256.576 li
384.399 256.743 li
384.417 256.952 li
384.417 303.805 li
380.361 308.461 375.242 312.164 369.435 314.534 cv
329.855 299.043 mo
329.196 299.043 328.661 299.577 328.661 300.236 cv
328.661 300.895 329.196 301.429 329.855 301.429 cv
330.514 301.429 331.048 300.895 331.048 300.236 cv
331.048 299.577 330.514 299.043 329.855 299.043 cv
333.438 294.712 mo
332.779 294.712 332.245 295.246 332.245 295.905 cv
332.245 296.564 332.779 297.098 333.438 297.098 cv
334.097 297.098 334.632 296.564 334.632 295.905 cv
334.632 295.246 334.097 294.712 333.438 294.712 cv
336.825 290.265 mo
336.166 290.265 335.632 290.799 335.632 291.458 cv
335.632 292.117 336.166 292.652 336.825 292.652 cv
337.484 292.652 338.018 292.117 338.018 291.458 cv
338.018 290.799 337.484 290.265 336.825 290.265 cv
340.05 285.667 mo
339.391 285.667 338.856 286.201 338.856 286.86 cv
338.856 287.519 339.391 288.053 340.05 288.053 cv
340.709 288.053 341.243 287.519 341.243 286.86 cv
341.243 286.201 340.709 285.667 340.05 285.667 cv
343.078 280.958 mo
342.419 280.958 341.885 281.492 341.885 282.151 cv
341.885 282.81 342.419 283.344 343.078 283.344 cv
343.737 283.344 344.271 282.81 344.271 282.151 cv
344.271 281.492 343.737 280.958 343.078 280.958 cv
345.883 276.094 mo
345.224 276.094 344.69 276.628 344.69 277.287 cv
344.69 277.946 345.224 278.48 345.883 278.48 cv
346.542 278.48 347.076 277.946 347.076 277.287 cv
347.076 276.628 346.542 276.094 345.883 276.094 cv
348.539 271.158 mo
347.88 271.158 347.346 271.692 347.346 272.351 cv
347.346 273.01 347.88 273.544 348.539 273.544 cv
349.198 273.544 349.732 273.01 349.732 272.351 cv
349.732 271.692 349.198 271.158 348.539 271.158 cv
350.975 266.1 mo
350.316 266.1 349.782 266.635 349.782 267.293 cv
349.782 267.952 350.316 268.487 350.975 268.487 cv
351.634 268.487 352.168 267.952 352.168 267.293 cv
352.168 266.635 351.634 266.1 350.975 266.1 cv
353.171 260.963 mo
352.512 260.963 351.978 261.497 351.978 262.156 cv
351.978 262.815 352.512 263.349 353.171 263.349 cv
353.83 263.349 354.364 262.815 354.364 262.156 cv
354.364 261.497 353.83 260.963 353.171 260.963 cv
355.179 255.71 mo
354.52 255.71 353.986 256.244 353.986 256.903 cv
353.986 257.562 354.52 258.096 355.179 258.096 cv
355.838 258.096 356.372 257.562 356.372 256.903 cv
356.372 256.244 355.838 255.71 355.179 255.71 cv
356.991 250.396 mo
356.333 250.396 355.798 250.93 355.798 251.589 cv
355.798 252.248 356.333 252.782 356.991 252.782 cv
357.65 252.782 358.185 252.248 358.185 251.589 cv
358.185 250.93 357.65 250.396 356.991 250.396 cv
.298039 .356863 .403922 rgb
f
326.833 305.358 mo
326.833 303.435 li
327.129 303.652 327.32 304.002 327.32 304.397 cv
327.32 304.791 327.129 305.141 326.833 305.358 cv
.611765 .631373 .647059 rgb
f
329.855 301.429 mo
329.196 301.429 328.661 300.895 328.661 300.236 cv
328.661 299.577 329.196 299.043 329.855 299.043 cv
330.514 299.043 331.048 299.577 331.048 300.236 cv
331.048 300.895 330.514 301.429 329.855 301.429 cv
f
333.438 297.098 mo
332.779 297.098 332.245 296.564 332.245 295.905 cv
332.245 295.246 332.779 294.712 333.438 294.712 cv
334.097 294.712 334.632 295.246 334.632 295.905 cv
334.632 296.564 334.097 297.098 333.438 297.098 cv
f
336.825 292.652 mo
336.166 292.652 335.632 292.117 335.632 291.458 cv
335.632 290.799 336.166 290.265 336.825 290.265 cv
337.484 290.265 338.018 290.799 338.018 291.458 cv
338.018 292.117 337.484 292.652 336.825 292.652 cv
f
340.05 288.053 mo
339.391 288.053 338.856 287.519 338.856 286.86 cv
338.856 286.201 339.391 285.667 340.05 285.667 cv
340.709 285.667 341.243 286.201 341.243 286.86 cv
341.243 287.519 340.709 288.053 340.05 288.053 cv
f
343.078 283.344 mo
342.419 283.344 341.885 282.81 341.885 282.151 cv
341.885 281.492 342.419 280.958 343.078 280.958 cv
343.737 280.958 344.271 281.492 344.271 282.151 cv
344.271 282.81 343.737 283.344 343.078 283.344 cv
f
345.883 278.48 mo
345.224 278.48 344.69 277.946 344.69 277.287 cv
344.69 276.628 345.224 276.094 345.883 276.094 cv
346.542 276.094 347.076 276.628 347.076 277.287 cv
347.076 277.946 346.542 278.48 345.883 278.48 cv
f
348.539 273.544 mo
347.88 273.544 347.346 273.01 347.346 272.351 cv
347.346 271.692 347.88 271.158 348.539 271.158 cv
349.198 271.158 349.732 271.692 349.732 272.351 cv
349.732 273.01 349.198 273.544 348.539 273.544 cv
f
350.975 268.487 mo
350.316 268.487 349.782 267.952 349.782 267.293 cv
349.782 266.635 350.316 266.1 350.975 266.1 cv
351.634 266.1 352.168 266.635 352.168 267.293 cv
352.168 267.952 351.634 268.487 350.975 268.487 cv
f
353.171 263.349 mo
352.512 263.349 351.978 262.815 351.978 262.156 cv
351.978 261.497 352.512 260.963 353.171 260.963 cv
353.83 260.963 354.364 261.497 354.364 262.156 cv
354.364 262.815 353.83 263.349 353.171 263.349 cv
f
355.179 258.096 mo
354.52 258.096 353.986 257.562 353.986 256.903 cv
353.986 256.244 354.52 255.71 355.179 255.71 cv
355.838 255.71 356.372 256.244 356.372 256.903 cv
356.372 257.562 355.838 258.096 355.179 258.096 cv
f
356.991 252.782 mo
356.333 252.782 355.798 252.248 355.798 251.589 cv
355.798 250.93 356.333 250.396 356.991 250.396 cv
357.65 250.396 358.185 250.93 358.185 251.589 cv
358.185 252.248 357.65 252.782 356.991 252.782 cv
f
358.565 247.402 mo
357.906 247.402 357.372 246.867 357.372 246.208 cv
357.372 246.025 357.414 245.851 357.488 245.696 cv
359.708 245.865 li
359.741 245.974 359.758 246.089 359.758 246.208 cv
359.758 246.867 359.224 247.402 358.565 247.402 cv
f
359.023 239.983 mo
359.241 239.737 359.56 239.582 359.915 239.582 cv
360.23 239.582 360.517 239.705 360.731 239.905 cv
359.023 239.983 li
f
337.356 250.512 mo
330.228 253.456 li
326.585 244.647 li
333.715 241.701 li
337.356 250.512 li
cp
.117647 .180392 .25098 rgb
f
336.048 240.736 mo
336.379 241.542 335.859 242.522 334.888 242.923 cv
326.618 246.342 li
325.646 246.742 324.586 246.416 324.253 245.61 cv
323.921 244.804 324.44 243.823 325.412 243.423 cv
333.681 240.004 li
334.654 239.604 335.714 239.93 336.048 240.736 cv
cp
f
347.056 240.644 mo
347.937 239.398 349.925 238.321 351.477 238.249 cv
366.159 237.58 li
367.711 237.508 368.375 238.568 367.637 239.934 cv
366.558 241.931 li
365.82 243.296 363.95 244.316 362.403 244.199 cv
348.271 243.123 li
346.724 243.005 346.176 241.889 347.056 240.644 cv
cp
382.717 239.897 mo
382.717 238.346 381.762 236.238 380.594 235.217 cv
380.323 234.982 li
379.156 233.96 376.931 233.123 375.378 233.123 cv
349.784 233.123 li
348.233 233.123 346.22 234.155 345.313 235.415 cv
338.45 244.946 li
338.316 245.135 338.215 245.323 338.141 245.51 cv
336.098 246.174 li
334.623 246.655 332.332 247.713 331.009 248.525 cv
327.54 250.653 li
326.216 251.464 325.133 253.399 325.133 254.952 cv
325.133 304.631 li
325.133 306.183 326.063 308.32 327.199 309.376 cv
328.525 310.611 li
329.662 311.669 331.862 312.534 333.414 312.534 cv
351.103 312.534 li
352.655 312.534 355.195 312.534 356.748 312.534 cv
374.436 312.534 li
375.989 312.534 378.188 311.669 379.326 310.611 cv
380.651 309.376 li
381.788 308.32 382.717 306.183 382.717 304.631 cv
382.717 254.952 li
382.699 254.743 li
382.717 254.576 li
382.717 239.897 li
cp
.968627 .682353 .164706 rgb
f
345.832 290.802 mo
345.611 291.042 345.313 291.316 344.938 291.623 cv
344.564 291.93 344.096 292.221 343.534 292.495 cv
342.972 292.769 342.312 293 341.552 293.186 cv
340.794 293.374 339.92 293.468 338.931 293.468 cv
337.759 293.468 336.702 293.285 335.761 292.921 cv
334.82 292.555 334.013 292.003 333.341 291.263 cv
332.668 290.524 332.152 289.59 331.792 288.461 cv
331.432 287.333 331.252 286.005 331.252 284.477 cv
331.252 280.934 li
331.252 279.406 331.425 278.078 331.77 276.949 cv
332.116 275.821 332.608 274.882 333.246 274.134 cv
333.885 273.383 334.664 272.827 335.581 272.461 cv
336.498 272.096 337.529 271.914 338.671 271.914 cv
339.862 271.914 340.89 272.064 341.754 272.361 cv
342.619 272.659 343.34 273.103 343.916 273.694 cv
344.492 274.284 344.934 275.014 345.24 275.884 cv
345.549 276.753 345.745 277.754 345.832 278.887 cv
341.711 278.887 li
341.653 278.224 341.56 277.672 341.43 277.23 cv
341.301 276.789 341.118 276.436 340.883 276.172 cv
340.648 275.907 340.36 275.718 340.018 275.603 cv
339.677 275.487 339.272 275.43 338.801 275.43 cv
338.244 275.43 337.759 275.528 337.346 275.725 cv
336.932 275.922 336.589 276.239 336.316 276.676 cv
336.042 277.113 335.837 277.68 335.703 278.376 cv
335.569 279.072 335.502 279.915 335.502 280.904 cv
335.502 284.477 li
335.502 285.476 335.576 286.322 335.725 287.013 cv
335.874 287.705 336.1 288.269 336.402 288.706 cv
336.704 289.143 337.086 289.461 337.547 289.657 cv
338.009 289.853 338.551 289.952 339.175 289.952 cv
339.55 289.952 339.869 289.924 340.134 289.865 cv
340.397 289.809 340.623 289.738 340.811 289.657 cv
340.998 289.576 341.151 289.491 341.272 289.404 cv
341.392 289.318 341.496 289.246 341.582 289.189 cv
341.582 285.342 li
338.614 285.342 li
338.614 282.143 li
345.832 282.143 li
345.832 290.802 li
cp
.117647 .180392 .25098 rgb
f
353.397 285.356 mo
357.316 285.356 li
355.356 277.878 li
353.397 285.356 li
cp
358.252 288.887 mo
352.475 288.887 li
351.35 293.179 li
346.87 293.179 li
353.425 272.202 li
357.3 272.202 li
363.899 293.179 li
359.375 293.179 li
358.252 288.887 li
cp
f
373.539 287.675 mo
373.539 287.311 373.505 286.984 373.438 286.697 cv
373.371 286.407 373.229 286.137 373.013 285.882 cv
372.797 285.628 372.49 285.381 372.091 285.139 cv
371.692 284.9 371.162 284.646 370.499 284.376 cv
369.712 284.079 368.959 283.738 368.244 283.354 cv
367.529 282.97 366.9 282.516 366.356 281.992 cv
365.814 281.469 365.381 280.863 365.06 280.176 cv
364.738 279.491 364.578 278.691 364.578 277.778 cv
364.578 276.904 364.74 276.105 365.067 275.379 cv
365.394 274.655 365.853 274.037 366.443 273.528 cv
367.034 273.019 367.735 272.622 368.546 272.339 cv
369.358 272.056 370.254 271.914 371.234 271.914 cv
372.241 271.914 373.152 272.075 373.963 272.396 cv
374.775 272.719 375.466 273.166 376.038 273.737 cv
376.61 274.309 377.049 274.99 377.356 275.782 cv
377.665 276.575 377.818 277.447 377.818 278.398 cv
373.596 278.398 li
373.596 277.956 373.55 277.55 373.46 277.18 cv
373.368 276.81 373.224 276.494 373.027 276.229 cv
372.831 275.965 372.578 275.759 372.271 275.609 cv
371.964 275.461 371.594 275.386 371.162 275.386 cv
370.758 275.386 370.41 275.448 370.117 275.573 cv
369.823 275.699 369.581 275.87 369.389 276.085 cv
369.198 276.301 369.053 276.559 368.958 276.856 cv
368.861 277.154 368.813 277.47 368.813 277.806 cv
368.813 278.152 368.887 278.465 369.037 278.744 cv
369.185 279.021 369.396 279.281 369.671 279.521 cv
369.945 279.761 370.275 279.987 370.664 280.199 cv
371.054 280.409 371.483 280.616 371.955 280.819 cv
372.933 281.174 373.788 281.566 374.518 281.999 cv
375.249 282.432 375.858 282.921 376.348 283.47 cv
376.838 284.016 377.203 284.634 377.443 285.321 cv
377.683 286.008 377.803 286.783 377.803 287.647 cv
377.803 288.569 377.652 289.39 377.349 290.111 cv
377.047 290.831 376.614 291.439 376.053 291.933 cv
375.491 292.428 374.811 292.808 374.014 293.071 cv
373.216 293.336 372.319 293.468 371.319 293.468 cv
370.417 293.468 369.531 293.331 368.661 293.057 cv
367.792 292.783 367.017 292.363 366.335 291.796 cv
365.653 291.229 365.104 290.514 364.685 289.65 cv
364.267 288.785 364.058 287.758 364.058 286.566 cv
368.309 286.566 li
368.309 287.2 368.371 287.739 368.497 288.18 cv
368.621 288.622 368.811 288.979 369.065 289.254 cv
369.32 289.528 369.634 289.724 370.009 289.844 cv
370.383 289.964 370.821 290.024 371.319 290.024 cv
371.724 290.024 372.066 289.964 372.35 289.844 cv
372.633 289.724 372.864 289.56 373.041 289.355 cv
373.219 289.148 373.347 288.901 373.423 288.613 cv
373.5 288.324 373.539 288.012 373.539 287.675 cv
cp
f
125.539 310.828 mo
117.609 310.828 li
119.793 309.374 121.827 307.708 123.679 305.862 cv
123.875 306.252 124.279 306.52 124.746 306.52 cv
125.405 306.52 125.939 305.986 125.939 305.327 cv
125.939 304.838 125.645 304.418 125.224 304.233 cv
128.548 300.525 131.187 296.188 132.94 291.424 cv
134.84 294.716 li
137.141 298.695 137.419 302.774 135.608 305.902 cv
134.321 308.135 132.085 309.688 129.244 310.395 cv
129.638 310.201 129.909 309.795 129.909 309.325 cv
129.909 308.666 129.375 308.132 128.716 308.132 cv
128.057 308.132 127.523 308.666 127.523 309.325 cv
127.523 309.98 128.05 310.512 128.704 310.518 cv
127.712 310.723 126.652 310.828 125.539 310.828 cv
.392157 .439216 .478431 rgb
f
124.746 306.52 mo
124.279 306.52 123.875 306.252 123.679 305.862 cv
124.21 305.333 124.724 304.791 125.224 304.233 cv
125.645 304.418 125.939 304.838 125.939 305.327 cv
125.939 305.986 125.405 306.52 124.746 306.52 cv
.639216 .654902 .666667 rgb
f
128.704 310.518 mo
128.05 310.512 127.523 309.98 127.523 309.325 cv
127.523 308.666 128.057 308.132 128.716 308.132 cv
129.375 308.132 129.909 308.666 129.909 309.325 cv
129.909 309.795 129.638 310.201 129.244 310.395 cv
129.066 310.44 128.886 310.481 128.704 310.518 cv
f
73.5771 310.828 mo
68.3476 310.828 li
63.7538 310.828 60.0847 309.035 58.275 305.902 cv
56.4691 302.774 56.749 298.695 59.0444 294.716 cv
59.3682 294.155 li
62.4632 300.954 67.4151 306.727 73.5771 310.828 cv
.392157 .439216 .478431 rgb
f
117.609 310.828 mo
73.5771 310.828 li
67.4151 306.727 62.4632 300.954 59.3682 294.155 cv
87.6393 245.188 li
88.1613 244.286 88.7395 243.47 89.3636 242.749 cv
89.562 243.132 89.9623 243.394 90.424 243.394 cv
91.0829 243.394 91.6171 242.86 91.6171 242.201 cv
91.6171 241.752 91.3683 241.36 91.0008 241.157 cv
92.7885 239.711 94.8267 238.93 96.9429 238.93 cv
100.557 238.93 103.946 241.211 106.247 245.188 cv
132.94 291.424 li
131.187 296.188 128.548 300.525 125.224 304.233 cv
125.078 304.169 124.916 304.133 124.746 304.133 cv
124.087 304.133 123.553 304.668 123.553 305.327 cv
123.553 305.519 123.598 305.701 123.679 305.862 cv
121.827 307.708 119.793 309.374 117.609 310.828 cv
121.017 300.024 mo
120.358 300.024 119.824 300.558 119.824 301.217 cv
119.824 301.876 120.358 302.41 121.017 302.41 cv
121.676 302.41 122.21 301.876 122.21 301.217 cv
122.21 300.558 121.676 300.024 121.017 300.024 cv
117.394 295.737 mo
116.735 295.737 116.201 296.271 116.201 296.93 cv
116.201 297.589 116.735 298.123 117.394 298.123 cv
118.053 298.123 118.587 297.589 118.587 296.93 cv
118.587 296.271 118.053 295.737 117.394 295.737 cv
113.969 291.324 mo
113.31 291.324 112.775 291.858 112.775 292.517 cv
112.775 293.176 113.31 293.71 113.969 293.71 cv
114.628 293.71 115.162 293.176 115.162 292.517 cv
115.162 291.858 114.628 291.324 113.969 291.324 cv
110.731 286.77 mo
110.072 286.77 109.538 287.305 109.538 287.963 cv
109.538 288.622 110.072 289.157 110.731 289.157 cv
111.39 289.157 111.924 288.622 111.924 287.963 cv
111.924 287.305 111.39 286.77 110.731 286.77 cv
107.636 282.083 mo
106.977 282.083 106.442 282.617 106.442 283.276 cv
106.442 283.935 106.977 284.469 107.636 284.469 cv
108.294 284.469 108.829 283.935 108.829 283.276 cv
108.829 282.617 108.294 282.083 107.636 282.083 cv
104.77 277.29 mo
104.112 277.29 103.577 277.824 103.577 278.483 cv
103.577 279.142 104.112 279.676 104.77 279.676 cv
105.429 279.676 105.964 279.142 105.964 278.483 cv
105.964 277.824 105.429 277.29 104.77 277.29 cv
102.103 272.386 mo
101.444 272.386 100.91 272.92 100.91 273.579 cv
100.91 274.238 101.444 274.772 102.103 274.772 cv
102.762 274.772 103.296 274.238 103.296 273.579 cv
103.296 272.92 102.762 272.386 102.103 272.386 cv
99.6246 267.386 mo
98.9657 267.386 98.4315 267.92 98.4315 268.579 cv
98.4315 269.238 98.9657 269.772 99.6246 269.772 cv
100.284 269.772 100.818 269.238 100.818 268.579 cv
100.818 267.92 100.284 267.386 99.6246 267.386 cv
97.3646 262.266 mo
96.7057 262.266 96.1715 262.801 96.1715 263.459 cv
96.1715 264.118 96.7057 264.653 97.3646 264.653 cv
98.0235 264.653 98.5577 264.118 98.5577 263.459 cv
98.5577 262.801 98.0235 262.266 97.3646 262.266 cv
95.3402 257.081 mo
94.6813 257.081 94.1471 257.616 94.1471 258.274 cv
94.1471 258.933 94.6813 259.468 95.3402 259.468 cv
95.9992 259.468 96.5334 258.933 96.5334 258.274 cv
96.5334 257.616 95.9992 257.081 95.3402 257.081 cv
93.4596 251.781 mo
92.8007 251.781 92.2665 252.315 92.2665 252.974 cv
92.2665 253.633 92.8007 254.168 93.4596 254.168 cv
94.1186 254.168 94.6527 253.633 94.6527 252.974 cv
94.6527 252.315 94.1186 251.781 93.4596 251.781 cv
91.8459 246.45 mo
91.1869 246.45 90.6527 246.984 90.6527 247.643 cv
90.6527 248.302 91.1869 248.836 91.8459 248.836 cv
92.5048 248.836 93.039 248.302 93.039 247.643 cv
93.039 246.984 92.5048 246.45 91.8459 246.45 cv
.298039 .356863 .403922 rgb
f
90.424 243.394 mo
89.9623 243.394 89.562 243.132 89.3636 242.749 cv
89.8798 242.152 90.4274 241.62 91.0008 241.157 cv
91.3683 241.36 91.6171 241.752 91.6171 242.201 cv
91.6171 242.86 91.0829 243.394 90.424 243.394 cv
.611765 .631373 .647059 rgb
f
91.8459 248.836 mo
91.1869 248.836 90.6527 248.302 90.6527 247.643 cv
90.6527 246.984 91.1869 246.45 91.8459 246.45 cv
92.5048 246.45 93.039 246.984 93.039 247.643 cv
93.039 248.302 92.5048 248.836 91.8459 248.836 cv
f
93.4596 254.168 mo
92.8007 254.168 92.2665 253.633 92.2665 252.974 cv
92.2665 252.315 92.8007 251.781 93.4596 251.781 cv
94.1186 251.781 94.6527 252.315 94.6527 252.974 cv
94.6527 253.633 94.1186 254.168 93.4596 254.168 cv
f
95.3402 259.468 mo
94.6813 259.468 94.1471 258.933 94.1471 258.274 cv
94.1471 257.616 94.6813 257.081 95.3402 257.081 cv
95.9992 257.081 96.5334 257.616 96.5334 258.274 cv
96.5334 258.933 95.9992 259.468 95.3402 259.468 cv
f
97.3646 264.653 mo
96.7057 264.653 96.1715 264.118 96.1715 263.459 cv
96.1715 262.801 96.7057 262.266 97.3646 262.266 cv
98.0235 262.266 98.5577 262.801 98.5577 263.459 cv
98.5577 264.118 98.0235 264.653 97.3646 264.653 cv
f
99.6246 269.772 mo
98.9657 269.772 98.4315 269.238 98.4315 268.579 cv
98.4315 267.92 98.9657 267.386 99.6246 267.386 cv
100.284 267.386 100.818 267.92 100.818 268.579 cv
100.818 269.238 100.284 269.772 99.6246 269.772 cv
f
102.103 274.772 mo
101.444 274.772 100.91 274.238 100.91 273.579 cv
100.91 272.92 101.444 272.386 102.103 272.386 cv
102.762 272.386 103.296 272.92 103.296 273.579 cv
103.296 274.238 102.762 274.772 102.103 274.772 cv
f
104.77 279.676 mo
104.112 279.676 103.577 279.142 103.577 278.483 cv
103.577 277.824 104.112 277.29 104.77 277.29 cv
105.429 277.29 105.964 277.824 105.964 278.483 cv
105.964 279.142 105.429 279.676 104.77 279.676 cv
f
107.636 284.469 mo
106.977 284.469 106.442 283.935 106.442 283.276 cv
106.442 282.617 106.977 282.083 107.636 282.083 cv
108.294 282.083 108.829 282.617 108.829 283.276 cv
108.829 283.935 108.294 284.469 107.636 284.469 cv
f
110.731 289.157 mo
110.072 289.157 109.538 288.622 109.538 287.963 cv
109.538 287.305 110.072 286.77 110.731 286.77 cv
111.39 286.77 111.924 287.305 111.924 287.963 cv
111.924 288.622 111.39 289.157 110.731 289.157 cv
f
113.969 293.71 mo
113.31 293.71 112.775 293.176 112.775 292.517 cv
112.775 291.858 113.31 291.324 113.969 291.324 cv
114.628 291.324 115.162 291.858 115.162 292.517 cv
115.162 293.176 114.628 293.71 113.969 293.71 cv
f
117.394 298.123 mo
116.735 298.123 116.201 297.589 116.201 296.93 cv
116.201 296.271 116.735 295.737 117.394 295.737 cv
118.053 295.737 118.587 296.271 118.587 296.93 cv
118.587 297.589 118.053 298.123 117.394 298.123 cv
f
121.017 302.41 mo
120.358 302.41 119.824 301.876 119.824 301.217 cv
119.824 300.558 120.358 300.024 121.017 300.024 cv
121.676 300.024 122.21 300.558 122.21 301.217 cv
122.21 301.876 121.676 302.41 121.017 302.41 cv
f
123.679 305.862 mo
123.598 305.701 123.553 305.519 123.553 305.327 cv
123.553 304.668 124.087 304.133 124.746 304.133 cv
124.916 304.133 125.078 304.169 125.224 304.233 cv
124.724 304.791 124.21 305.333 123.679 305.862 cv
f
66.6476 305.563 mo
59.5254 305.563 56.6151 300.516 60.1749 294.35 cv
88.7713 244.821 li
92.3295 238.658 98.1558 238.658 101.715 244.821 cv
130.313 294.35 li
133.871 300.516 130.959 305.563 123.839 305.563 cv
66.6476 305.563 li
cp
.117647 .180392 .25098 rgb
f
95.2429 243.465 mo
94.0236 243.465 92.697 244.555 91.6029 246.456 cv
63.0054 295.985 li
61.9086 297.887 61.6277 299.581 62.236 300.635 cv
62.8453 301.689 64.4529 302.293 66.6476 302.293 cv
123.839 302.293 li
126.032 302.293 127.641 301.689 128.249 300.635 cv
128.857 299.581 128.577 297.887 127.481 295.983 cv
98.8834 246.456 li
97.7882 244.555 96.4617 243.465 95.2429 243.465 cv
cp
123.839 308.828 mo
66.6476 308.828 li
62.0538 308.828 58.3847 307.035 56.575 303.902 cv
54.769 300.774 55.0489 296.695 57.3444 292.716 cv
85.9393 243.188 li
88.239 239.211 91.6271 236.93 95.2429 236.93 cv
98.857 236.93 102.246 239.211 104.547 243.188 cv
133.14 292.716 li
135.441 296.695 135.719 300.774 133.908 303.902 cv
132.102 307.035 128.43 308.828 123.839 308.828 cv
cp
.968627 .682353 .164706 rgb
f
106.918 276.288 mo
105.97 277.129 104.851 277.792 103.848 278.616 cv
103.537 278.876 103.101 278.551 103.27 278.253 cv
104.766 275.595 104.661 272.759 104.599 269.915 cv
103.967 270.946 103.235 271.916 102.321 272.818 cv
102.152 272.987 101.79 272.849 101.799 272.638 cv
101.931 269.413 102.077 266.111 101.14 262.947 cv
100.486 260.737 99.3655 258.424 99.3962 256.116 cv
99.3989 255.919 li
99.0935 256.608 98.7773 257.29 98.4282 257.964 cv
97.2707 260.18 95.9531 262.311 94.2273 264.269 cv
94.0368 264.483 93.5778 264.495 93.4913 264.189 cv
93.091 262.744 92.717 261.365 92.5983 259.924 cv
90.5969 263.56 88.1603 267.991 89.752 271.819 cv
89.8211 271.988 89.2994 272.25 88.6715 271.601 cv
87.6454 270.541 86.7261 269.438 85.8516 268.297 cv
84.9322 272.596 86.6088 276.861 85.9767 281.176 cv
85.9609 281.288 85.841 281.33 85.7369 281.307 cv
85.6361 281.335 85.5189 281.324 85.4297 281.25 cv
84.1733 280.249 83.0623 279.068 82.22 277.788 cv
81.5889 289.346 87.6771 294.365 92.3696 295.637 cv
92.6062 295.7 92.838 295.751 93.0683 295.8 cv
92.7034 295.398 92.3469 295.007 91.9941 294.661 cv
90.882 293.552 90.0915 292.266 89.0174 291.146 cv
89.6923 291.852 90.9496 292.198 91.9276 292.502 cv
92.0755 292.553 92.2286 292.435 92.2297 292.316 cv
92.2434 291.127 91.4977 290.198 91.004 289.108 cv
90.7848 288.62 90.7183 286.96 90.3655 286.641 cv
90.7938 287.027 91.2063 287.114 91.7707 287.308 cv
91.9608 287.371 92.199 287.211 92.1848 287.05 cv
92.114 286.366 92.1885 282.374 92.1885 282.374 cv
92.1885 282.374 93.1015 282.965 93.9903 283.504 cv
94.154 283.601 95.6099 277.573 95.6099 277.573 cv
95.6099 277.573 95.8148 282.332 96.3086 281.675 cv
96.4363 281.499 97.9614 279.419 98.0226 279.284 cv
97.9999 279.406 li
97.7365 281.07 97.9149 282.72 97.9851 284.389 cv
97.9904 284.503 98.1077 284.63 98.2635 284.619 cv
98.5148 284.6 98.8105 284.64 98.8105 284.64 cv
98.8105 284.64 97.6662 286.17 98.9605 286.791 cv
99.4918 287.044 100.084 286.78 100.575 286.622 cv
100.493 286.647 99.7178 288.586 99.4875 288.924 cv
99.1073 289.48 98.7693 290.01 98.4736 290.597 cv
98.3701 290.798 98.6865 290.912 98.8718 290.844 cv
99.2615 290.736 100.733 289.908 101.179 290.369 cv
100.439 291.188 100.117 292.114 99.8524 293.096 cv
99.6259 293.951 99.3962 294.75 98.8306 295.449 cv
99.2203 295.337 99.5984 295.217 99.9618 295.077 cv
103.492 293.721 105.531 291.019 106.576 288.324 cv
108.114 284.353 106.402 280.31 106.918 276.288 cv
cp
1 1 1 rgb
f
83.9204 297.439 mo
83.9204 299.754 li
107.643 299.754 li
107.643 297.439 li
83.9204 297.439 li
cp
.847059 .372549 .129412 rgb
f
241.61 389.837 mo
231.062 389.837 li
230.388 389.837 229.843 389.297 229.843 388.63 cv
229.843 386.896 li
234.463 386.335 238.838 384.982 242.83 382.978 cv
242.83 388.63 li
242.83 389.297 242.284 389.837 241.61 389.837 cv
184.823 389.837 mo
174.274 389.837 li
173.601 389.837 173.055 389.297 173.055 388.63 cv
173.055 378.596 li
172.42 378.371 171.976 378.155 171.746 377.956 cv
169.76 376.232 168.71 371.866 168.648 367.717 cv
168.644 367.431 168.755 367.156 168.956 366.952 cv
169.156 366.748 169.431 366.633 169.717 366.633 cv
170.232 366.633 li
170.23 366.442 170.223 366.257 170.223 366.06 cv
170.223 359.1 172.017 355.585 172.017 355.585 cv
172.017 355.585 172.364 355.427 173.088 355.17 cv
173.084 355.171 li
174.343 347.698 180.284 335.721 185.091 330.81 cv
185.091 330.81 186.405 330.324 189.322 329.788 cv
187.476 333.518 186.199 337.577 185.602 341.857 cv
185.292 342.072 185.09 342.431 185.09 342.836 cv
185.09 343.143 185.205 343.422 185.395 343.633 cv
185.278 344.875 185.218 346.133 185.218 347.406 cv
185.218 362.283 193.386 375.253 205.48 382.077 cv
198.078 381.996 191.443 381.552 186.042 380.955 cv
186.042 388.63 li
186.042 389.297 185.496 389.837 184.823 389.837 cv
173.457 355.042 mo
173.256 355.111 li
173.457 355.042 li
173.891 354.898 mo
173.642 354.98 li
173.891 354.898 li
175.142 354.514 mo
174.949 354.57 174.767 354.624 174.593 354.677 cv
174.767 354.624 174.949 354.57 175.142 354.514 cv
175.767 354.337 mo
175.586 354.387 175.414 354.436 175.247 354.484 cv
175.414 354.436 175.586 354.387 175.767 354.337 cv
176.182 354.225 mo
176.114 354.243 176.048 354.261 175.982 354.279 cv
176.048 354.261 176.114 354.243 176.182 354.225 cv
177.239 353.953 mo
177.178 353.968 177.118 353.983 177.058 353.998 cv
177.118 353.983 177.178 353.968 177.239 353.953 cv
178.217 353.719 mo
177.965 353.777 177.722 353.835 177.487 353.892 cv
177.722 353.835 177.965 353.777 178.217 353.719 cv
178.758 353.596 mo
178.606 353.63 178.458 353.663 178.313 353.696 cv
178.458 353.663 178.606 353.63 178.758 353.596 cv
181.231 353.088 mo
180.98 353.136 180.734 353.183 180.494 353.231 cv
180.734 353.183 180.98 353.136 181.231 353.088 cv
182.417 352.871 mo
182.125 352.923 181.839 352.974 181.56 353.026 cv
181.839 352.974 182.125 352.923 182.417 352.871 cv
183.873 352.626 mo
183.463 352.692 183.066 352.758 182.679 352.825 cv
183.066 352.758 183.463 352.692 183.873 352.626 cv
180.921 339.966 mo
180.262 339.966 179.727 340.5 179.727 341.159 cv
179.727 341.818 180.262 342.352 180.921 342.352 cv
181.58 342.352 182.114 341.818 182.114 341.159 cv
182.114 340.5 181.58 339.966 180.921 339.966 cv
.392157 .439216 .478431 rgb
f
180.921 342.352 mo
180.262 342.352 179.727 341.818 179.727 341.159 cv
179.727 340.5 180.262 339.966 180.921 339.966 cv
181.58 339.966 182.114 340.5 182.114 341.159 cv
182.114 341.818 181.58 342.352 180.921 342.352 cv
.639216 .654902 .666667 rgb
f
185.395 343.633 mo
185.205 343.422 185.09 343.143 185.09 342.836 cv
185.09 342.431 185.292 342.072 185.602 341.857 cv
185.52 342.444 185.451 343.038 185.395 343.633 cv
f
229.843 386.896 mo
229.843 380.955 li
223.85 381.618 216.337 382.091 207.943 382.091 cv
207.113 382.091 206.292 382.086 205.48 382.077 cv
193.386 375.253 185.218 362.283 185.218 347.406 cv
185.218 346.133 185.278 344.875 185.395 343.633 cv
185.613 343.876 185.93 344.03 186.283 344.03 cv
186.942 344.03 187.476 343.496 187.476 342.836 cv
187.476 342.178 186.942 341.643 186.283 341.643 cv
186.03 341.643 185.795 341.722 185.602 341.857 cv
186.199 337.577 187.476 333.518 189.322 329.788 cv
192.916 329.127 198.942 328.389 207.943 328.389 cv
224.25 328.389 230.794 330.81 230.794 330.81 cv
235.601 335.721 241.541 347.698 242.801 355.171 cv
242.801 355.171 li
243.522 355.427 243.868 355.585 243.868 355.585 cv
243.868 355.585 245.662 359.1 245.662 366.06 cv
245.662 366.257 245.655 366.442 245.652 366.633 cv
246.168 366.633 li
246.454 366.633 246.728 366.748 246.929 366.952 cv
247.13 367.156 247.241 367.431 247.237 367.717 cv
247.175 371.866 246.125 376.232 244.139 377.956 cv
243.909 378.155 243.465 378.371 242.83 378.596 cv
242.83 382.978 li
238.838 384.982 234.463 386.335 229.843 386.896 cv
241.647 354.787 mo
241.696 354.802 241.744 354.818 241.791 354.832 cv
241.744 354.818 241.696 354.802 241.647 354.787 cv
240.744 354.514 mo
240.936 354.57 241.116 354.623 241.288 354.676 cv
241.116 354.623 240.936 354.569 240.744 354.514 cv
239.425 354.151 mo
239.587 354.194 239.743 354.235 239.895 354.277 cv
239.743 354.235 239.587 354.194 239.425 354.151 cv
238.768 353.984 mo
238.906 354.018 239.041 354.052 239.173 354.086 cv
239.041 354.052 238.906 354.018 238.768 353.984 cv
236.039 353.363 mo
236.177 353.391 236.314 353.42 236.449 353.449 cv
236.314 353.42 236.177 353.391 236.039 353.363 cv
232.013 352.626 mo
232.409 352.69 232.794 352.754 233.169 352.819 cv
232.794 352.754 232.409 352.69 232.013 352.626 cv
229.443 352.248 mo
229.603 352.27 229.761 352.292 229.918 352.314 cv
229.761 352.292 229.603 352.27 229.443 352.248 cv
186.442 352.248 mo
186.282 352.27 186.124 352.292 185.967 352.314 cv
186.124 352.292 186.282 352.27 186.442 352.248 cv
227.99 352.061 mo
228.32 352.102 228.646 352.143 228.966 352.185 cv
228.646 352.143 228.32 352.102 227.99 352.061 cv
187.894 352.061 mo
187.724 352.082 187.554 352.103 187.387 352.124 cv
187.554 352.103 187.724 352.082 187.894 352.061 cv
226.147 351.847 mo
226.636 351.9 227.111 351.955 227.578 352.01 cv
227.111 351.955 226.636 351.9 226.147 351.847 cv
191.341 351.685 mo
190.81 351.736 190.288 351.788 189.78 351.842 cv
190.288 351.788 190.81 351.736 191.341 351.685 cv
224.543 351.684 mo
224.809 351.71 225.073 351.736 225.333 351.762 cv
225.073 351.736 224.809 351.71 224.543 351.684 cv
192.963 351.539 mo
192.56 351.573 192.164 351.609 191.773 351.645 cv
192.164 351.609 192.56 351.573 192.963 351.539 cv
221.194 351.405 mo
221.587 351.433 221.975 351.463 222.357 351.493 cv
221.975 351.463 221.587 351.433 221.194 351.405 cv
194.689 351.405 mo
194.493 351.419 194.298 351.433 194.105 351.448 cv
194.298 351.433 194.493 351.419 194.689 351.405 cv
196.62 351.276 mo
196.393 351.29 196.166 351.304 195.941 351.319 cv
196.166 351.304 196.393 351.29 196.62 351.276 cv
219.261 351.276 mo
219.413 351.285 219.564 351.295 219.715 351.304 cv
219.564 351.295 219.413 351.285 219.261 351.276 cv
216.954 351.152 mo
217.588 351.181 218.208 351.214 218.817 351.249 cv
218.208 351.214 217.588 351.181 216.954 351.152 cv
197.99 351.198 mo
197.68 351.214 197.373 351.231 197.069 351.249 cv
197.373 351.231 197.68 351.214 197.99 351.198 cv
200.854 351.074 mo
200.507 351.086 200.163 351.099 199.823 351.114 cv
200.163 351.099 200.507 351.086 200.854 351.074 cv
215.03 351.074 mo
215.291 351.083 215.551 351.093 215.808 351.103 cv
215.551 351.093 215.291 351.083 215.03 351.074 cv
212.991 351.013 mo
213.435 351.024 213.872 351.036 214.306 351.05 cv
213.872 351.036 213.435 351.024 212.991 351.013 cv
202.893 351.013 mo
202.457 351.023 202.027 351.036 201.601 351.049 cv
202.026 351.036 202.457 351.024 202.893 351.013 cv
210.8 350.971 mo
211.292 350.978 211.779 350.985 212.259 350.996 cv
211.779 350.985 211.292 350.978 210.8 350.971 cv
205.084 350.971 mo
204.838 350.974 204.594 350.978 204.351 350.982 cv
204.594 350.978 204.838 350.974 205.084 350.971 cv
207.942 350.949 mo
208.685 350.949 209.41 350.954 210.127 350.962 cv
209.41 350.954 208.685 350.949 207.943 350.949 cv
207.942 350.949 li
207.942 350.949 mo
207.2 350.949 206.474 350.954 205.758 350.962 cv
206.474 350.954 207.2 350.949 207.942 350.949 cv
225.544 347.189 mo
224.885 347.189 224.351 347.723 224.351 348.382 cv
224.351 349.041 224.885 349.575 225.544 349.575 cv
226.203 349.575 226.738 349.041 226.738 348.382 cv
226.738 347.723 226.203 347.189 225.544 347.189 cv
231.685 347.023 mo
231.026 347.023 230.492 347.557 230.492 348.216 cv
230.492 348.875 231.026 349.409 231.685 349.409 cv
232.344 349.409 232.878 348.875 232.878 348.216 cv
232.878 347.557 232.344 347.023 231.685 347.023 cv
219.326 347.023 mo
218.667 347.023 218.132 347.557 218.132 348.216 cv
218.132 348.875 218.667 349.409 219.326 349.409 cv
219.984 349.409 220.519 348.875 220.519 348.216 cv
220.519 347.557 219.984 347.023 219.326 347.023 cv
213.779 346.68 mo
213.12 346.68 212.586 347.215 212.586 347.873 cv
212.586 348.532 213.12 349.067 213.779 349.067 cv
214.438 349.067 214.972 348.532 214.972 347.873 cv
214.972 347.215 214.438 346.68 213.779 346.68 cv
237.686 346.558 mo
237.027 346.558 236.493 347.092 236.493 347.751 cv
236.493 348.41 237.027 348.944 237.686 348.944 cv
238.345 348.944 238.879 348.41 238.879 347.751 cv
238.879 347.092 238.345 346.558 237.686 346.558 cv
208.197 346.117 mo
207.538 346.117 207.004 346.651 207.004 347.31 cv
207.004 347.969 207.538 348.503 208.197 348.503 cv
208.856 348.503 209.39 347.969 209.39 347.31 cv
209.39 346.651 208.856 346.117 208.197 346.117 cv
202.625 345.341 mo
201.966 345.341 201.432 345.875 201.432 346.534 cv
201.432 347.193 201.966 347.727 202.625 347.727 cv
203.284 347.727 203.818 347.193 203.818 346.534 cv
203.818 345.875 203.284 345.341 202.625 345.341 cv
197.146 344.321 mo
196.487 344.321 195.953 344.855 195.953 345.514 cv
195.953 346.173 196.487 346.707 197.146 346.707 cv
197.805 346.707 198.339 346.173 198.339 345.514 cv
198.339 344.855 197.805 344.321 197.146 344.321 cv
191.65 343.098 mo
190.992 343.098 190.457 343.632 190.457 344.291 cv
190.457 344.95 190.992 345.484 191.65 345.484 cv
192.309 345.484 192.844 344.95 192.844 344.291 cv
192.844 343.632 192.309 343.098 191.65 343.098 cv
.298039 .356863 .403922 rgb
f
186.283 344.03 mo
185.93 344.03 185.613 343.876 185.395 343.633 cv
185.451 343.038 185.52 342.444 185.602 341.857 cv
185.795 341.722 186.03 341.643 186.283 341.643 cv
186.942 341.643 187.476 342.178 187.476 342.836 cv
187.476 343.496 186.942 344.03 186.283 344.03 cv
.611765 .631373 .647059 rgb
f
191.65 345.484 mo
190.992 345.484 190.457 344.95 190.457 344.291 cv
190.457 343.632 190.992 343.098 191.65 343.098 cv
192.309 343.098 192.844 343.632 192.844 344.291 cv
192.844 344.95 192.309 345.484 191.65 345.484 cv
f
197.146 346.707 mo
196.487 346.707 195.953 346.173 195.953 345.514 cv
195.953 344.855 196.487 344.321 197.146 344.321 cv
197.805 344.321 198.339 344.855 198.339 345.514 cv
198.339 346.173 197.805 346.707 197.146 346.707 cv
f
202.625 347.727 mo
201.966 347.727 201.432 347.193 201.432 346.534 cv
201.432 345.875 201.966 345.341 202.625 345.341 cv
203.284 345.341 203.818 345.875 203.818 346.534 cv
203.818 347.193 203.284 347.727 202.625 347.727 cv
f
208.197 348.503 mo
207.538 348.503 207.004 347.969 207.004 347.31 cv
207.004 346.651 207.538 346.117 208.197 346.117 cv
208.856 346.117 209.39 346.651 209.39 347.31 cv
209.39 347.969 208.856 348.503 208.197 348.503 cv
f
213.779 349.067 mo
213.12 349.067 212.586 348.532 212.586 347.873 cv
212.586 347.215 213.12 346.68 213.779 346.68 cv
214.438 346.68 214.972 347.215 214.972 347.873 cv
214.972 348.532 214.438 349.067 213.779 349.067 cv
f
219.326 349.409 mo
218.667 349.409 218.132 348.875 218.132 348.216 cv
218.132 347.557 218.667 347.023 219.326 347.023 cv
219.984 347.023 220.519 347.557 220.519 348.216 cv
220.519 348.875 219.984 349.409 219.326 349.409 cv
f
225.544 349.575 mo
224.885 349.575 224.351 349.041 224.351 348.382 cv
224.351 347.723 224.885 347.189 225.544 347.189 cv
226.203 347.189 226.738 347.723 226.738 348.382 cv
226.738 349.041 226.203 349.575 225.544 349.575 cv
f
231.685 349.409 mo
231.026 349.409 230.492 348.875 230.492 348.216 cv
230.492 347.557 231.026 347.023 231.685 347.023 cv
232.344 347.023 232.878 347.557 232.878 348.216 cv
232.878 348.875 232.344 349.409 231.685 349.409 cv
f
237.686 348.944 mo
237.027 348.944 236.493 348.41 236.493 347.751 cv
236.493 347.092 237.027 346.558 237.686 346.558 cv
238.345 346.558 238.879 347.092 238.879 347.751 cv
238.879 348.41 238.345 348.944 237.686 348.944 cv
f
295.749 386.245 mo
289.774 386.245 li
288.789 366.142 li
288.789 366.142 288.52 366.244 287.321 366.244 cv
286.122 366.244 285.854 366.142 285.854 366.142 cv
284.868 386.245 li
278.892 386.245 li
278.035 363.288 li
278.03 363.288 li
278.03 345.068 li
277.55 345.898 274.719 350.296 268.408 351.084 cv
267.272 351.226 265.992 351.315 264.581 351.428 cv
264.714 350.106 264.782 348.763 264.782 347.406 cv
264.782 347.294 264.781 347.183 264.78 347.072 cv
265.792 346.973 266.754 346.878 267.57 346.786 cv
274.003 346.055 273.69 342.954 276.215 339.829 cv
276.5 339.69 276.721 339.442 276.824 339.138 cv
277.146 338.803 277.509 338.469 277.925 338.141 cv
278.462 337.716 279.052 337.322 279.695 336.952 cv
279.847 337.436 280.299 337.787 280.834 337.787 cv
281.493 337.787 282.027 337.253 282.027 336.594 cv
282.027 336.334 281.944 336.094 281.803 335.898 cv
282.302 335.683 282.822 335.476 283.375 335.279 cv
284.488 333.773 285.463 332.896 285.92 331.665 cv
281.862 331.123 278.622 328.268 277.845 324.599 cv
277.027 324.586 276.369 323.812 276.369 322.857 cv
276.369 321.896 277.035 321.116 277.86 321.113 cv
277.908 320.897 277.969 320.686 278.034 320.477 cv
277.917 320.343 li
277.893 320.34 li
277.894 320.316 li
277.876 320.296 li
277.895 320.293 li
278.012 316.782 278.136 314.648 278.36 313.28 cv
282.333 313.259 286.359 312.309 290.118 310.332 cv
290.598 310.079 291.067 309.813 291.524 309.535 cv
293.22 309.843 294.712 310.336 295.371 311.007 cv
296.277 311.928 296.525 313.632 296.747 320.293 cv
296.765 320.296 li
296.748 320.316 li
296.749 320.34 li
296.725 320.343 li
296.607 320.477 li
296.672 320.687 296.732 320.897 296.781 321.113 cv
297.605 321.115 298.273 321.895 298.273 322.857 cv
298.273 323.813 297.613 324.587 296.795 324.599 cv
296.552 325.748 296.068 326.816 295.393 327.759 cv
294.955 327.898 294.626 328.282 294.568 328.751 cv
293.769 329.584 292.801 330.279 291.714 330.789 cv
291.501 330.591 291.215 330.47 290.901 330.47 cv
290.304 330.47 289.809 330.908 289.722 331.481 cv
289.388 331.56 289.047 331.622 288.701 331.668 cv
289.163 332.897 290.154 333.774 291.267 335.279 cv
302.075 339.124 302.536 346.336 302.536 363.288 cv
301.868 363.288 li
301.875 365.123 301.282 366.319 300.313 366.325 cv
300.311 366.325 300.31 366.325 300.308 366.325 cv
299.431 366.325 299.046 364.826 298.999 363.288 cv
298.253 363.288 li
298.253 347.52 297.2 346.086 296.612 345.068 cv
296.612 363.288 li
296.606 363.288 li
295.749 386.245 li
285.916 333.018 mo
285.257 333.018 284.722 333.552 284.722 334.211 cv
284.722 334.87 285.257 335.404 285.916 335.404 cv
286.575 335.404 287.109 334.87 287.109 334.211 cv
287.109 333.552 286.575 333.018 285.916 333.018 cv
.392157 .439216 .478431 rgb
f
276.215 339.829 mo
276.401 339.599 276.603 339.368 276.824 339.138 cv
276.721 339.442 276.5 339.69 276.215 339.829 cv
.639216 .654902 .666667 rgb
f
280.834 337.787 mo
280.299 337.787 279.847 337.436 279.695 336.952 cv
280.242 336.638 280.827 336.341 281.451 336.06 cv
281.652 335.963 li
281.652 335.964 li
281.702 335.942 281.753 335.92 281.803 335.898 cv
281.944 336.094 282.027 336.334 282.027 336.594 cv
282.027 337.253 281.493 337.787 280.834 337.787 cv
f
285.916 335.404 mo
285.257 335.404 284.722 334.87 284.722 334.211 cv
284.722 333.552 285.257 333.018 285.916 333.018 cv
286.575 333.018 287.109 333.552 287.109 334.211 cv
287.109 334.87 286.575 335.404 285.916 335.404 cv
f
289.722 331.481 mo
289.809 330.908 290.304 330.47 290.901 330.47 cv
291.215 330.47 291.501 330.591 291.714 330.789 cv
291.087 331.084 290.419 331.317 289.722 331.481 cv
f
294.568 328.751 mo
294.626 328.282 294.955 327.898 295.393 327.759 cv
295.143 328.108 294.868 328.439 294.568 328.751 cv
f
278.36 313.28 mo
278.561 312.053 278.842 311.442 279.27 311.007 cv
280.465 309.792 284.39 309.159 287.321 309.159 cv
288.634 309.159 290.147 309.286 291.524 309.535 cv
291.067 309.813 290.598 310.079 290.118 310.332 cv
286.359 312.309 282.333 313.259 278.36 313.28 cv
.298039 .356863 .403922 rgb
f
260.987 351.781 mo
260.458 347.532 li
261.816 347.363 263.348 347.213 264.78 347.072 cv
264.781 347.183 264.782 347.294 264.782 347.406 cv
264.782 348.763 264.714 350.106 264.581 351.428 cv
263.463 351.518 262.262 351.623 260.987 351.781 cv
f
255.341 356.499 mo
255.182 356.499 255.024 356.455 254.884 356.364 cv
253.012 355.149 250.161 352.754 250.05 352.642 cv
250.036 352.631 li
250.038 352.629 li
249.738 352.319 248.401 349.828 248.35 349.137 cv
248.347 349.098 li
248.211 349.095 248.077 349.094 247.945 349.094 cv
245.513 349.094 243.755 349.534 241.961 350.441 cv
241.457 349.553 li
243.545 348.462 245.005 347.955 248.252 347.792 cv
248.247 347.733 li
248.238 347.6 248.299 347.478 248.4 347.404 cv
248.529 347.453 248.67 347.479 248.816 347.479 cv
249.109 347.479 249.377 347.374 249.584 347.199 cv
252.15 346.849 li
253.612 347.337 li
253.813 347.407 253.866 347.545 253.866 347.545 cv
254.177 348.47 li
257.778 350.281 li
257.719 350.112 li
257.605 349.15 258.718 348.414 260.54 348.194 cv
260.895 351.041 li
260.611 351.068 260.329 351.082 260.055 351.082 cv
259.711 351.082 259.382 351.06 259.082 351.013 cv
258.571 352.03 li
258.884 351.407 li
259.307 351.62 li
259.529 351.179 li
260.352 351.593 li
259.288 353.709 li
258.465 353.295 li
258.687 352.854 li
258.264 352.641 li
258.047 353.073 li
258.038 353.128 li
257.647 354.404 256.891 355.398 255.9 356.286 cv
255.742 356.427 255.542 356.499 255.341 356.499 cv
251.256 351.335 mo
251.176 351.434 li
250.898 351.804 250.971 352.33 251.341 352.609 cv
254.912 355.305 li
255 355.372 255.104 355.405 255.208 355.405 cv
255.338 355.405 255.467 355.353 255.562 355.253 cv
255.658 355.128 li
255.319 354.446 254.52 353.028 253.363 352.196 cv
252.466 351.551 251.705 351.375 251.256 351.335 cv
252.551 350.482 mo
252.222 350.482 251.899 350.617 251.662 350.866 cv
252.087 350.941 252.775 351.133 253.524 351.63 cv
254.569 352.324 255.616 353.846 256.081 354.576 cv
256.274 354.279 256.443 353.966 256.58 353.636 cv
256.826 353.043 256.572 352.36 255.999 352.072 cv
253.093 350.611 li
252.919 350.524 252.734 350.482 252.551 350.482 cv
f
248.816 347.479 mo
248.67 347.479 248.529 347.453 248.4 347.404 cv
248.454 347.365 248.52 347.339 248.592 347.334 cv
249.584 347.199 li
249.377 347.374 249.109 347.479 248.816 347.479 cv
.611765 .631373 .647059 rgb
f
283.715 389.837 mo
281.265 389.837 li
281.265 388.994 li
281.265 388.994 280.344 389.819 277.644 389.819 cv
274.886 389.819 274.788 389.341 274.819 389.122 cv
275.022 387.69 278.9 388.823 279.868 386.249 cv
283.715 386.249 li
283.715 389.837 li
.392157 .439216 .478431 rgb
f
293.377 389.837 mo
290.926 389.837 li
290.926 386.249 li
294.773 386.249 li
295.741 388.823 299.619 387.69 299.822 389.122 cv
299.853 389.341 299.755 389.819 296.997 389.819 cv
294.297 389.819 293.377 388.994 293.377 388.994 cv
293.377 389.837 li
f
243.962 364.06 mo
243.962 357.1 242.168 353.585 242.168 353.585 cv
242.168 353.585 232.031 348.949 206.242 348.949 cv
180.454 348.949 170.317 353.585 170.317 353.585 cv
170.317 353.585 168.523 357.1 168.523 364.06 cv
168.523 371.02 170.317 374.535 170.317 374.535 cv
170.317 374.535 180.454 379.171 206.242 379.171 cv
232.031 379.171 242.168 374.535 242.168 374.535 cv
242.168 374.535 243.962 371.02 243.962 364.06 cv
cp
.847059 .372549 .129412 rgb
f
241.101 353.171 mo
239.841 345.698 233.901 333.721 229.094 328.81 cv
229.094 328.81 222.55 326.389 206.242 326.389 cv
189.935 326.389 183.391 328.81 183.391 328.81 cv
178.584 333.721 172.643 345.698 171.384 353.171 cv
174.58 352.035 185.199 348.949 206.242 348.949 cv
227.286 348.949 237.904 352.035 241.101 353.171 cv
cp
f
206.242 348.269 mo
224.663 348.269 235.191 350.566 239.815 351.926 cv
237.65 344.682 233.869 335.563 229.867 331.433 cv
229.867 331.433 222.385 329.012 206.242 329.012 cv
190.099 329.012 182.618 331.433 182.618 331.433 cv
178.616 335.563 174.835 344.682 172.669 351.926 cv
177.294 350.566 187.822 348.269 206.242 348.269 cv
cp
1 1 1 rgb
f
171.355 374.939 mo
171.355 386.63 li
171.355 387.297 171.901 387.837 172.574 387.837 cv
183.123 387.837 li
183.796 387.837 184.342 387.297 184.342 386.63 cv
184.342 377.816 li
177.286 376.834 173.134 375.573 171.355 374.939 cv
cp
.117647 .180392 .25098 rgb
f
241.13 374.939 mo
241.13 386.63 li
241.13 387.297 240.584 387.837 239.91 387.837 cv
229.362 387.837 li
228.688 387.837 228.143 387.297 228.143 386.63 cv
228.143 377.816 li
235.198 376.834 239.35 375.573 241.13 374.939 cv
cp
f
228.143 362.182 mo
227.155 360.305 236.125 354.367 238.613 354.513 cv
240.352 354.614 240.95 355.912 241.331 358.128 cv
241.713 360.345 241.633 362.176 240.275 362.705 cv
238.754 363.297 228.917 363.655 228.143 362.182 cv
cp
1 .788235 .0509804 rgb
f
184.342 362.182 mo
185.329 360.305 176.36 354.367 173.872 354.513 cv
172.133 354.614 171.535 355.912 171.153 358.128 cv
170.772 360.345 170.852 362.176 172.21 362.705 cv
173.731 363.297 183.567 363.655 184.342 362.182 cv
cp
f
245.537 365.717 mo
245.541 365.431 245.43 365.155 245.229 364.952 cv
245.028 364.748 244.754 364.633 244.468 364.633 cv
206.242 364.633 li
168.017 364.633 li
167.731 364.633 167.456 364.748 167.256 364.952 cv
167.055 365.155 166.944 365.431 166.948 365.717 cv
167.009 369.866 168.06 374.232 170.046 375.956 cv
171.851 377.522 186.663 380.091 206.242 380.091 cv
225.822 380.091 240.634 377.522 242.439 375.956 cv
244.425 374.232 245.475 369.866 245.537 365.717 cv
cp
.117647 .180392 .25098 rgb
f
221.7 359.146 mo
220.534 357.98 216.393 355.075 206.242 355.075 cv
196.092 355.075 191.951 357.98 190.785 359.146 cv
189.991 359.94 189.563 361.271 189.349 362.195 cv
189.291 362.443 189.35 362.704 189.509 362.903 cv
189.668 363.103 189.909 363.219 190.163 363.219 cv
206.242 363.219 li
222.321 363.219 li
222.576 363.219 222.817 363.103 222.975 362.903 cv
223.134 362.704 223.193 362.443 223.136 362.195 cv
222.922 361.271 222.494 359.94 221.7 359.146 cv
cp
1 1 1 rgb
f
190.163 362.6 mo
189.993 362.518 li
189.951 362.333 li
190.239 361.093 190.69 360.116 191.222 359.583 cv
191.872 358.934 195.648 355.694 206.242 355.694 cv
216.839 355.694 220.613 358.934 221.262 359.583 cv
221.794 360.115 222.245 361.091 222.534 362.335 cv
222.491 362.519 li
222.322 362.6 li
190.163 362.6 li
cp
.117647 .180392 .25098 rgb
f
192.82 375.166 mo
192.82 369.558 li
192.82 369.187 193.121 368.885 193.493 368.885 cv
218.992 368.885 li
219.364 368.885 219.665 369.186 219.665 369.558 cv
219.665 375.166 li
219.665 375.538 219.364 375.839 218.992 375.839 cv
193.493 375.839 li
193.121 375.839 192.82 375.538 192.82 375.166 cv
cp
f
218.723 375.22 mo
193.762 375.22 li
193.583 375.22 193.439 375.076 193.439 374.897 cv
193.439 369.827 li
193.439 369.648 193.583 369.504 193.762 369.504 cv
218.723 369.504 li
218.902 369.504 219.046 369.648 219.046 369.827 cv
219.046 374.897 li
219.046 375.076 218.902 375.22 218.723 375.22 cv
cp
1 1 1 rgb
f
249.522 348.817 mo
249.522 348.817 250.595 348.814 251.824 349.63 cv
253.226 350.561 254.632 352.984 254.632 352.984 cv
254.141 353.52 li
254.141 353.52 253.226 351.32 251.663 350.196 cv
250.217 349.156 249.121 349.335 249.121 349.335 cv
249.522 348.817 li
cp
.117647 .180392 .25098 rgb
f
256.987 350.854 mo
256.564 350.641 li
257.184 349.407 li
257.607 349.62 li
256.987 350.854 li
cp
f
257.588 351.709 mo
256.765 351.295 li
257.829 349.179 li
258.652 349.593 li
257.588 351.709 li
cp
f
246.593 345.789 mo
243.315 345.949 241.855 346.457 239.757 347.553 cv
240.261 348.441 li
242.163 347.48 244.022 347.042 246.688 347.098 cv
246.593 345.789 li
cp
1 1 1 rgb
f
253.862 353.253 mo
253.69 353.433 253.411 353.456 253.212 353.305 cv
249.641 350.609 li
249.271 350.33 249.197 349.804 249.476 349.434 cv
249.559 349.324 249.73 349.119 249.913 348.906 cv
250.28 348.479 250.889 348.358 251.392 348.611 cv
254.298 350.072 li
254.872 350.36 255.126 351.043 254.88 351.636 cv
254.632 352.232 254.307 352.786 253.862 353.253 cv
cp
257.413 348.953 mo
252.477 346.47 li
252.166 345.545 li
252.166 345.545 252.113 345.407 251.912 345.337 cv
250.45 344.849 li
246.892 345.334 li
246.686 345.349 246.532 345.528 246.547 345.733 cv
246.65 347.137 li
246.701 347.828 248.038 350.319 248.338 350.629 cv
248.336 350.631 li
248.35 350.642 li
248.461 350.754 251.312 353.149 253.184 354.364 cv
253.501 354.57 253.918 354.538 254.2 354.286 cv
255.19 353.398 255.947 352.404 256.338 351.128 cv
256.346 351.073 li
257.413 348.953 li
cp
.968627 .682353 .164706 rgb
f
289.567 333.279 mo
289.567 333.279 288.302 333.943 285.621 333.943 cv
282.939 333.943 281.675 333.279 281.675 333.279 cv
279.448 334.071 277.66 335.007 276.225 336.141 cv
271.655 339.752 273.469 343.922 265.87 344.785 cv
263.9 345.009 261.074 345.244 258.758 345.532 cv
259.287 349.781 li
262.172 349.423 264.671 349.338 266.708 349.084 cv
273.019 348.297 275.85 343.898 276.33 343.068 cv
276.33 361.288 li
285.621 361.288 li
294.912 361.288 li
294.912 343.068 li
295.5 344.086 296.553 345.52 296.553 361.288 cv
300.836 361.288 li
300.836 344.336 300.375 337.124 289.567 333.279 cv
cp
f
286.848 329.182 mo
285.61 329.182 li
284.371 329.182 li
284.011 330.687 282.928 331.582 281.675 333.279 cv
282.881 334.008 284.647 334.531 285.61 334.522 cv
286.572 334.531 288.36 334.008 289.567 333.279 cv
288.313 331.582 287.209 330.687 286.848 329.182 cv
cp
1 .87451 .72549 rgb
f
296.573 320.857 mo
296.573 319.896 295.905 319.115 295.081 319.113 cv
294.18 315.073 290.287 312.034 285.621 312.034 cv
280.956 312.034 277.061 315.073 276.16 319.113 cv
275.335 319.116 274.669 319.896 274.669 320.857 cv
274.669 321.812 275.327 322.586 276.145 322.599 cv
277.009 326.682 280.922 329.767 285.621 329.767 cv
290.321 329.767 294.232 326.682 295.095 322.599 cv
295.913 322.587 296.573 321.813 296.573 320.857 cv
cp
f
258.84 346.194 mo
257.018 346.414 255.905 347.15 256.019 348.112 cv
256.122 348.987 257.66 349.185 259.194 349.041 cv
258.84 346.194 li
cp
f
300.168 361.288 mo
300.175 363.123 299.582 364.319 298.613 364.325 cv
297.733 364.33 297.346 362.829 297.299 361.288 cv
300.168 361.288 li
cp
f
282.015 384.249 mo
278.168 384.249 li
277.2 386.823 273.322 385.69 273.119 387.122 cv
273.088 387.341 273.186 387.819 275.944 387.819 cv
278.644 387.819 279.565 386.994 279.565 386.994 cv
279.565 387.837 li
282.015 387.837 li
282.015 384.249 li
cp
.117647 .180392 .25098 rgb
f
289.226 384.249 mo
293.073 384.249 li
294.042 386.823 297.919 385.69 298.122 387.122 cv
298.153 387.341 298.055 387.819 295.297 387.819 cv
292.597 387.819 291.677 386.994 291.677 386.994 cv
291.677 387.837 li
289.226 387.837 li
289.226 384.249 li
cp
f
276.335 344.015 mo
276.335 361.288 li
277.192 384.245 li
283.168 384.245 li
284.154 364.142 li
284.154 364.142 284.422 364.244 285.621 364.244 cv
286.82 364.244 287.089 364.142 287.089 364.142 cv
288.074 384.245 li
294.049 384.245 li
294.906 361.288 li
294.906 344.015 li
276.335 344.015 li
cp
f
279.952 344.015 mo
279.952 333.963 li
279.475 334.172 279.023 334.391 278.593 334.62 cv
278.593 344.015 li
279.952 344.015 li
cp
f
291.267 344.015 mo
291.267 333.963 li
291.745 334.172 292.196 334.391 292.627 334.62 cv
292.627 344.015 li
291.267 344.015 li
cp
f
293.671 309.007 mo
292.476 307.792 288.551 307.159 285.621 307.159 cv
282.69 307.159 278.765 307.792 277.57 309.007 cv
276.662 309.93 276.416 311.638 276.193 318.34 cv
276.193 318.34 281.157 318.885 285.621 318.885 cv
290.084 318.885 295.049 318.34 295.049 318.34 cv
294.826 311.638 294.579 309.93 293.671 309.007 cv
cp
.968627 .682353 .164706 rgb
f
285.621 317.42 mo
280.419 317.42 276.176 318.296 276.176 318.296 cv
276.176 318.296 277.106 319.38 278.639 320.94 cv
279.542 321.858 281.237 320.69 285.62 320.69 cv
285.62 320.683 li
285.622 320.69 li
290.004 320.69 291.699 321.858 292.602 320.94 cv
294.136 319.38 295.065 318.296 295.065 318.296 cv
295.065 318.296 290.822 317.42 285.621 317.42 cv
cp
.117647 .180392 .25098 rgb
f
288.084 313.05 mo
287.615 311.462 285.741 308.581 285.621 308.581 cv
285.501 308.581 283.626 311.462 283.157 313.05 cv
282.672 314.692 284.176 316.109 285.621 316.109 cv
287.065 316.109 288.569 314.692 288.084 313.05 cv
cp
f
284.213 311.524 mo
283.935 312.073 283.697 312.611 283.567 313.05 cv
283.313 313.909 283.732 314.755 284.368 315.225 cv
283.801 314.019 283.744 312.944 284.213 311.524 cv
cp
1 1 1 rgb
f
97.0277 184.177 mo
82.463 184.177 69.6924 176.353 62.6966 164.688 cv
68.5932 173.339 77.8124 179.545 88.5186 181.466 cv
88.6679 181.955 89.1223 182.31 89.6598 182.31 cv
90.0697 182.31 90.4313 182.103 90.6461 181.789 cv
92.2666 181.99 93.918 182.093 95.5929 182.093 cv
117.564 182.093 135.375 164.282 135.375 142.311 cv
135.375 132.385 131.738 123.307 125.726 116.338 cv
132.719 123.544 137.028 133.366 137.028 144.176 cv
137.028 166.233 119.085 184.177 97.0277 184.177 cv
.392157 .439216 .478431 rgb
f
89.6598 182.31 mo
89.1223 182.31 88.6679 181.955 88.5186 181.466 cv
89.2212 181.592 89.9312 181.7 90.6461 181.789 cv
90.4313 182.103 90.0697 182.31 89.6598 182.31 cv
.639216 .654902 .666667 rgb
f
95.5929 182.093 mo
93.918 182.093 92.2666 181.99 90.6461 181.789 cv
90.7766 181.597 90.8529 181.366 90.8529 181.117 cv
90.8529 180.458 90.3188 179.924 89.6598 179.924 cv
89.0009 179.924 88.4667 180.458 88.4667 181.117 cv
88.4667 181.238 88.4848 181.356 88.5186 181.466 cv
77.8124 179.545 68.5932 173.339 62.6966 164.688 cv
59.0973 158.687 57.027 151.669 57.027 144.176 cv
57.027 122.12 74.9693 104.175 97.0277 104.175 cv
108.274 104.175 118.452 108.841 125.726 116.338 cv
131.738 123.307 135.375 132.385 135.375 142.311 cv
135.375 164.282 117.564 182.093 95.5929 182.093 cv
90.9229 174.474 mo
90.264 174.474 89.7298 175.008 89.7298 175.667 cv
89.7298 176.326 90.264 176.86 90.9229 176.86 cv
91.5819 176.86 92.1161 176.326 92.1161 175.667 cv
92.1161 175.008 91.5819 174.474 90.9229 174.474 cv
92.4598 169.104 mo
91.8009 169.104 91.2667 169.639 91.2667 170.298 cv
91.2667 170.956 91.8009 171.491 92.4598 171.491 cv
93.1187 171.491 93.6529 170.956 93.6529 170.298 cv
93.6529 169.639 93.1187 169.104 92.4598 169.104 cv
94.1629 163.775 mo
93.504 163.775 92.9698 164.309 92.9698 164.968 cv
92.9698 165.627 93.504 166.161 94.1629 166.161 cv
94.8219 166.161 95.356 165.627 95.356 164.968 cv
95.356 164.309 94.8219 163.775 94.1629 163.775 cv
96.0692 158.495 mo
95.4102 158.495 94.8761 159.029 94.8761 159.688 cv
94.8761 160.347 95.4102 160.881 96.0692 160.881 cv
96.7281 160.881 97.2623 160.347 97.2623 159.688 cv
97.2623 159.029 96.7281 158.495 96.0692 158.495 cv
98.2011 153.326 mo
97.5421 153.326 97.008 153.861 97.008 154.519 cv
97.008 155.178 97.5421 155.713 98.2011 155.713 cv
98.86 155.713 99.3942 155.178 99.3942 154.519 cv
99.3942 153.861 98.86 153.326 98.2011 153.326 cv
100.577 148.207 mo
99.9184 148.207 99.3842 148.741 99.3842 149.4 cv
99.3842 150.059 99.9184 150.593 100.577 150.593 cv
101.236 150.593 101.77 150.059 101.77 149.4 cv
101.77 148.741 101.236 148.207 100.577 148.207 cv
103.151 143.201 mo
102.492 143.201 101.958 143.736 101.958 144.394 cv
101.958 145.053 102.492 145.588 103.151 145.588 cv
103.81 145.588 104.344 145.053 104.344 144.394 cv
104.344 143.736 103.81 143.201 103.151 143.201 cv
105.895 138.334 mo
105.237 138.334 104.702 138.868 104.702 139.527 cv
104.702 140.186 105.237 140.72 105.895 140.72 cv
106.554 140.72 107.089 140.186 107.089 139.527 cv
107.089 138.868 106.554 138.334 105.895 138.334 cv
108.862 133.591 mo
108.203 133.591 107.668 134.125 107.668 134.784 cv
107.668 135.443 108.203 135.977 108.862 135.977 cv
109.521 135.977 110.055 135.443 110.055 134.784 cv
110.055 134.125 109.521 133.591 108.862 133.591 cv
111.998 128.963 mo
111.339 128.963 110.805 129.497 110.805 130.156 cv
110.805 130.815 111.339 131.349 111.998 131.349 cv
112.657 131.349 113.191 130.815 113.191 130.156 cv
113.191 129.497 112.657 128.963 111.998 128.963 cv
115.319 124.449 mo
114.66 124.449 114.126 124.984 114.126 125.643 cv
114.126 126.301 114.66 126.836 115.319 126.836 cv
115.978 126.836 116.512 126.301 116.512 125.643 cv
116.512 124.984 115.978 124.449 115.319 124.449 cv
118.818 120.072 mo
118.159 120.072 117.625 120.606 117.625 121.265 cv
117.625 121.924 118.159 122.458 118.818 122.458 cv
119.477 122.458 120.011 121.924 120.011 121.265 cv
120.011 120.606 119.477 120.072 118.818 120.072 cv
122.515 115.836 mo
121.857 115.836 121.322 116.37 121.322 117.029 cv
121.322 117.688 121.857 118.223 122.515 118.223 cv
123.174 118.223 123.709 117.688 123.709 117.029 cv
123.709 116.37 123.174 115.836 122.515 115.836 cv
.298039 .356863 .403922 rgb
f
122.515 118.223 mo
121.857 118.223 121.322 117.688 121.322 117.029 cv
121.322 116.37 121.857 115.836 122.515 115.836 cv
123.174 115.836 123.709 116.37 123.709 117.029 cv
123.709 117.688 123.174 118.223 122.515 118.223 cv
.611765 .631373 .647059 rgb
f
118.818 122.458 mo
118.159 122.458 117.625 121.924 117.625 121.265 cv
117.625 120.606 118.159 120.072 118.818 120.072 cv
119.477 120.072 120.011 120.606 120.011 121.265 cv
120.011 121.924 119.477 122.458 118.818 122.458 cv
f
115.319 126.836 mo
114.66 126.836 114.126 126.301 114.126 125.643 cv
114.126 124.984 114.66 124.449 115.319 124.449 cv
115.978 124.449 116.512 124.984 116.512 125.643 cv
116.512 126.301 115.978 126.836 115.319 126.836 cv
f
111.998 131.349 mo
111.339 131.349 110.805 130.815 110.805 130.156 cv
110.805 129.497 111.339 128.963 111.998 128.963 cv
112.657 128.963 113.191 129.497 113.191 130.156 cv
113.191 130.815 112.657 131.349 111.998 131.349 cv
f
108.862 135.977 mo
108.203 135.977 107.668 135.443 107.668 134.784 cv
107.668 134.125 108.203 133.591 108.862 133.591 cv
109.521 133.591 110.055 134.125 110.055 134.784 cv
110.055 135.443 109.521 135.977 108.862 135.977 cv
f
105.895 140.72 mo
105.237 140.72 104.702 140.186 104.702 139.527 cv
104.702 138.868 105.237 138.334 105.895 138.334 cv
106.554 138.334 107.089 138.868 107.089 139.527 cv
107.089 140.186 106.554 140.72 105.895 140.72 cv
f
103.151 145.588 mo
102.492 145.588 101.958 145.053 101.958 144.394 cv
101.958 143.736 102.492 143.201 103.151 143.201 cv
103.81 143.201 104.344 143.736 104.344 144.394 cv
104.344 145.053 103.81 145.588 103.151 145.588 cv
f
100.577 150.593 mo
99.9184 150.593 99.3842 150.059 99.3842 149.4 cv
99.3842 148.741 99.9184 148.207 100.577 148.207 cv
101.236 148.207 101.77 148.741 101.77 149.4 cv
101.77 150.059 101.236 150.593 100.577 150.593 cv
f
98.2011 155.713 mo
97.5421 155.713 97.008 155.178 97.008 154.519 cv
97.008 153.861 97.5421 153.326 98.2011 153.326 cv
98.86 153.326 99.3942 153.861 99.3942 154.519 cv
99.3942 155.178 98.86 155.713 98.2011 155.713 cv
f
96.0692 160.881 mo
95.4102 160.881 94.8761 160.347 94.8761 159.688 cv
94.8761 159.029 95.4102 158.495 96.0692 158.495 cv
96.7281 158.495 97.2623 159.029 97.2623 159.688 cv
97.2623 160.347 96.7281 160.881 96.0692 160.881 cv
f
94.1629 166.161 mo
93.504 166.161 92.9698 165.627 92.9698 164.968 cv
92.9698 164.309 93.504 163.775 94.1629 163.775 cv
94.8219 163.775 95.356 164.309 95.356 164.968 cv
95.356 165.627 94.8219 166.161 94.1629 166.161 cv
f
92.4598 171.491 mo
91.8009 171.491 91.2667 170.956 91.2667 170.298 cv
91.2667 169.639 91.8009 169.104 92.4598 169.104 cv
93.1187 169.104 93.6529 169.639 93.6529 170.298 cv
93.6529 170.956 93.1187 171.491 92.4598 171.491 cv
f
90.9229 176.86 mo
90.264 176.86 89.7298 176.326 89.7298 175.667 cv
89.7298 175.008 90.264 174.474 90.9229 174.474 cv
91.5819 174.474 92.1161 175.008 92.1161 175.667 cv
92.1161 176.326 91.5819 176.86 90.9229 176.86 cv
f
90.6461 181.789 mo
89.9312 181.7 89.2212 181.592 88.5186 181.466 cv
88.4848 181.356 88.4667 181.238 88.4667 181.117 cv
88.4667 180.458 89.0009 179.924 89.6598 179.924 cv
90.3188 179.924 90.8529 180.458 90.8529 181.117 cv
90.8529 181.366 90.7766 181.597 90.6461 181.789 cv
f
95.3277 109.445 mo
77.2788 109.445 62.5936 124.128 62.5936 142.176 cv
62.5936 160.227 77.2788 174.909 95.3277 174.909 cv
113.377 174.909 128.061 160.227 128.061 142.176 cv
128.061 124.128 113.377 109.445 95.3277 109.445 cv
cp
.968627 .682353 .164706 rgb
f
95.3277 174.909 mo
77.2788 174.909 62.5936 160.227 62.5936 142.176 cv
62.5936 124.128 77.2788 109.445 95.3277 109.445 cv
113.377 109.445 128.061 124.128 128.061 142.176 cv
128.061 160.227 113.377 174.909 95.3277 174.909 cv
cp
95.3277 102.175 mo
73.2693 102.175 55.327 120.12 55.327 142.176 cv
55.327 164.233 73.2693 182.177 95.3277 182.177 cv
117.385 182.177 135.328 164.233 135.328 142.176 cv
135.328 120.12 117.385 102.175 95.3277 102.175 cv
cp
.847059 .372549 .129412 rgb
f
74.5405 138.181 mo
74.3366 138.153 74.1407 138.057 73.9912 137.892 cv
72.4501 136.207 71.0388 134.81 69.6702 133.618 cv
69.289 133.284 69.2473 132.7 69.5809 132.318 cv
69.917 131.933 70.4988 131.894 70.8823 132.228 cv
72.303 133.465 73.763 134.914 75.3516 136.647 cv
75.6947 137.023 75.6692 137.606 75.2937 137.949 cv
75.0805 138.143 74.8047 138.219 74.5405 138.181 cv
cp
.117647 .180392 .25098 rgb
f
84.3298 129.52 mo
83.973 129.56 83.6125 129.384 83.426 129.05 cv
82.397 127.193 81.3738 125.352 80.3413 123.53 cv
80.0921 123.087 80.2487 122.524 80.6959 122.274 cv
81.1362 122.024 81.6994 122.181 81.9497 122.623 cv
82.981 124.451 84.0076 126.296 85.039 128.158 cv
85.2846 128.602 85.1271 129.162 84.6774 129.411 cv
84.5673 129.472 84.448 129.508 84.3298 129.52 cv
cp
f
116.116 138.181 mo
116.319 138.153 116.515 138.057 116.665 137.892 cv
118.205 136.207 119.617 134.81 120.986 133.618 cv
121.368 133.284 121.407 132.7 121.074 132.318 cv
120.739 131.933 120.155 131.894 119.772 132.228 cv
118.352 133.465 116.892 134.914 115.306 136.647 cv
114.961 137.023 114.986 137.606 115.363 137.949 cv
115.574 138.143 115.852 138.219 116.116 138.181 cv
cp
f
106.323 129.52 mo
106.682 129.56 107.044 129.384 107.228 129.05 cv
108.258 127.193 109.283 125.352 110.312 123.53 cv
110.564 123.087 110.407 122.524 109.962 122.274 cv
109.519 122.024 108.956 122.181 108.706 122.623 cv
107.674 124.451 106.648 126.296 105.616 128.158 cv
105.37 128.602 105.529 129.162 105.977 129.411 cv
106.088 129.472 106.206 129.508 106.323 129.52 cv
cp
f
95.3265 125.429 mo
94.8167 125.429 94.4053 125.016 94.4053 124.506 cv
94.4053 118.101 li
94.4053 117.591 94.8167 117.18 95.3289 117.18 cv
95.8352 117.18 96.249 117.591 96.249 118.101 cv
96.249 124.506 li
96.249 125.016 95.8352 125.429 95.3265 125.429 cv
cp
f
89.5072 158.714 mo
79.711 136.052 li
93.8167 156.316 li
89.5072 158.714 li
cp
f
89.8386 157.74 mo
92.812 156.085 li
83.083 142.103 li
89.8386 157.74 li
cp
94.2848 156.822 mo
94.1504 156.919 li
89.8456 159.318 li
89.6718 159.413 89.4712 159.432 89.2847 159.37 cv
89.1004 159.306 88.951 159.168 88.8745 158.99 cv
79.0736 136.327 li
78.9357 136.001 79.0643 135.622 79.3772 135.448 cv
79.6831 135.275 80.076 135.367 80.2788 135.658 cv
94.3833 155.921 li
94.4945 156.081 94.5316 156.281 94.4899 156.471 cv
94.4575 156.607 94.3856 156.729 94.2848 156.822 cv
cp
f
103.891 161.724 mo
103.891 166.452 100.058 170.289 95.3289 170.289 cv
90.5977 170.289 86.7644 166.452 86.7644 161.724 cv
86.7644 156.994 90.5977 153.158 95.3289 153.158 cv
100.058 153.158 103.891 156.994 103.891 161.724 cv
cp
f
76.77 144.577 mo
76.77 144.313 76.6704 144.088 76.4757 143.897 cv
76.2799 143.711 76.0446 143.617 75.7676 143.617 cv
75.4931 143.617 75.259 143.711 75.0666 143.897 cv
74.8743 144.088 74.777 144.313 74.777 144.577 cv
74.777 150.613 li
74.777 150.878 74.8743 151.104 75.0666 151.291 cv
75.259 151.479 75.4931 151.573 75.7676 151.573 cv
76.0446 151.573 76.2799 151.479 76.4757 151.291 cv
76.6704 151.104 76.77 150.878 76.77 150.613 cv
76.77 144.577 li
cp
78.5685 150.637 mo
78.5685 151.373 78.2972 151.996 77.7596 152.506 cv
77.2231 153.018 76.5766 153.274 75.8245 153.274 cv
75.0574 153.274 74.4096 153.018 73.873 152.503 cv
73.3378 151.989 73.0713 151.368 73.0713 150.637 cv
73.0713 144.613 li
73.0713 143.878 73.34 143.255 73.8777 142.741 cv
74.4177 142.226 75.0642 141.97 75.8245 141.97 cv
76.5892 141.97 77.2382 142.229 77.7688 142.745 cv
78.3008 143.262 78.5685 143.884 78.5685 144.613 cv
78.5685 150.637 li
cp
1 1 1 rgb
f
117.138 153.158 mo
117.138 144.657 li
115.661 144.657 li
115.661 143.496 li
116.077 143.446 116.471 143.296 116.848 143.04 cv
117.224 142.783 117.496 142.475 117.661 142.111 cv
118.87 142.111 li
118.87 153.158 li
117.138 153.158 li
cp
f
101.92 145.183 mo
101.739 145.183 101.559 145.141 101.391 145.052 cv
100.95 144.821 100.526 144.215 100.652 143.209 cv
100.931 140.967 99.6233 140.526 99.5665 140.507 cv
99.7507 139.894 li
99.8272 139.915 101.639 140.483 101.287 143.29 cv
101.203 143.969 101.439 144.352 101.69 144.486 cv
101.886 144.585 102.104 144.55 102.286 144.388 cv
102.738 143.986 102.952 142.862 102.196 140.917 cv
101.832 139.986 101.609 139.183 101.43 138.537 cv
101 136.994 100.818 136.504 99.8701 136.454 cv
99.9036 135.813 li
101.36 135.887 101.635 136.873 102.05 138.365 cv
102.223 138.996 102.441 139.783 102.795 140.685 cv
103.893 143.515 103.01 144.601 102.716 144.865 cv
102.481 145.076 102.2 145.183 101.92 145.183 cv
cp
.117647 .180392 .25098 rgb
f
102.199 137.323 mo
102.059 137.273 li
100.533 136.074 li
98.2664 136.074 li
98.14 136.074 98.0415 135.972 98.0415 135.848 cv
98.0415 135.721 98.14 135.622 98.2664 135.622 cv
100.61 135.622 li
100.752 135.668 li
102.34 136.919 li
102.438 136.995 102.455 137.137 102.376 137.235 cv
102.199 137.323 li
cp
f
100.505 136.903 mo
99.6186 136.903 99.2768 135.937 99.2641 135.896 cv
99.3579 135.703 li
99.5503 135.798 li
99.5561 135.811 99.8377 136.602 100.506 136.602 cv
100.51 136.602 li
101.297 136.597 101.795 136.602 101.798 136.602 cv
101.949 136.756 li
101.797 136.903 li
101.795 136.903 li
101.79 136.903 101.297 136.899 100.512 136.903 cv
100.505 136.903 li
cp
f
100.119 136.775 mo
100.022 136.718 li
100.062 136.563 li
100.181 136.496 100.476 136.27 100.456 136.048 cv
100.557 135.923 li
100.681 136.026 li
100.721 136.438 100.2 136.746 100.176 136.757 cv
100.119 136.775 li
cp
f
100.234 145.004 mo
100.234 145.303 99.9882 145.548 99.687 145.548 cv
91.6822 145.548 li
91.3844 145.548 91.1375 145.303 91.1375 145.004 cv
91.1375 133.697 li
91.1375 133.396 91.3844 133.151 91.6822 133.151 cv
99.687 133.151 li
99.9882 133.151 100.234 133.396 100.234 133.697 cv
100.234 145.004 li
cp
f
99.1795 138.121 mo
99.1795 138.422 98.9339 138.667 98.6336 138.667 cv
92.7355 138.667 li
92.4354 138.667 92.1898 138.422 92.1898 138.121 cv
92.1898 134.82 li
92.1898 134.522 92.4354 134.275 92.7355 134.275 cv
98.6336 134.275 li
98.9339 134.275 99.1795 134.522 99.1795 134.82 cv
99.1795 138.121 li
cp
.968627 .682353 .164706 rgb
f
190.868 400.779 mo
197.185 400.779 li
197.185 402.365 li
192.892 402.365 li
192.892 411.102 li
196.952 411.102 li
196.952 412.728 li
192.892 412.728 li
192.892 424.842 li
190.868 424.842 li
190.868 400.779 li
cp
1 1 1 rgb
f
206.536 400.779 mo
208.573 400.779 li
208.573 418.662 li
208.573 420.923 208.286 422.565 207.712 423.591 cv
207.138 424.616 206.021 425.129 204.362 425.129 cv
202.703 425.129 201.58 424.614 200.992 423.584 cv
200.404 422.554 200.11 420.913 200.11 418.662 cv
200.11 400.779 li
202.147 400.779 li
202.147 418.594 li
202.147 420.262 202.22 421.374 202.366 421.93 cv
202.64 422.941 203.277 423.447 204.28 423.447 cv
205.101 423.447 205.682 423.213 206.023 422.743 cv
206.365 422.273 206.536 420.896 206.536 418.607 cv
206.536 400.779 li
cp
f
212.757 400.779 mo
219.114 400.779 li
219.114 402.365 li
214.794 402.365 li
214.794 411.772 li
218.854 411.772 li
218.854 413.426 li
214.794 413.426 li
214.794 423.228 li
219.073 423.228 li
219.073 424.842 li
212.757 424.842 li
212.757 400.779 li
cp
f
222.45 400.779 mo
224.487 400.779 li
224.487 423.228 li
228.753 423.228 li
228.753 424.842 li
222.45 424.842 li
222.45 400.779 li
cp
f
231.433 400.779 mo
233.47 400.779 li
233.47 424.842 li
231.433 424.842 li
231.433 400.779 li
cp
f
245.2 400.779 mo
246.977 400.779 li
246.977 424.842 li
245.392 424.842 li
239.854 406.713 li
239.991 413.221 li
239.991 424.842 li
238.077 424.842 li
238.077 400.779 li
239.499 400.779 li
245.405 419.387 li
245.2 411.102 li
245.2 400.779 li
cp
f
250.997 407.82 mo
250.997 405.332 251.243 403.601 251.735 402.625 cv
252.446 401.194 253.617 400.478 255.249 400.478 cv
256.297 400.478 257.1 400.684 257.655 401.094 cv
258.211 401.504 258.571 401.95 258.735 402.434 cv
259.045 403.336 259.229 404.195 259.289 405.011 cv
259.349 405.826 259.378 406.754 259.378 407.793 cv
259.378 409.803 li
257.3 409.803 li
257.3 406.084 li
257.3 404.717 257.163 403.719 256.89 403.09 cv
256.616 402.461 256.071 402.147 255.256 402.147 cv
254.44 402.147 253.866 402.555 253.533 403.37 cv
253.2 404.185 253.034 405.597 253.034 407.602 cv
253.034 417.418 li
253.034 419.688 253.18 421.26 253.472 422.135 cv
253.764 423.01 254.338 423.447 255.194 423.447 cv
256.051 423.447 256.625 423.005 256.917 422.121 cv
257.209 421.237 257.354 419.679 257.354 417.445 cv
257.354 414.41 li
255.29 414.41 li
255.29 412.674 li
259.378 412.674 li
259.378 424.842 li
258.038 424.842 li
257.819 423.447 li
257.482 424.013 257.086 424.432 256.63 424.705 cv
256.174 424.978 255.586 425.115 254.866 425.115 cv
253.518 425.115 252.535 424.525 251.92 423.345 cv
251.305 422.164 250.997 420.239 250.997 417.568 cv
250.997 407.82 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.2.1
%%Title: (1710.sm003.022.TS.m004.c5.Fuel pump.eps)
%%CreationDate: 10/12/2017 9:11 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6Bj3&YdQdZBT'Mj6!:GYNm>JKY.uK49qcZ7ia=9i,T76>1lq^%#Q3AbWgtaR7baEMjIRHUo6tSnXjAr=^n]n@EY.(J%c6#,3
%`YT7U`eT&3s8HYRor*>=pV3LpG"TZ<hB(a(SW_ju-T]LIYJ9*jr6j<5;lpDABYHRAg$JY)M`8%A".k?\`0YSZWM_hkQ8\5(@>9=1
%$[MNI%o33.r(M)*-.;oDY7Cg["Rmc"?67,N,#L&lZgi"6=6ofN:E.eFmABrI`\N^n3j3`bis/u#j(%&o#5m[Xl4n0g*#N8`*%L_C
%#l'KMd!+>8UedSFTHKQu@E^sU2cd0alVE>Us#XcOTC=Z"j*cMV:+hmO1,snO6;,5BSG<.H<WF<_6qF[m6#Un8g-@#c`Go?hoS&8(
%csJ>5Vuo@'P1VGns7/KYP^F[5hcL&sR$:>llbD!ChfjH<\lRC/AmNE&K7*VnW&(bgR.04AWV<RLo`5oS@&+^kE7uc,9i08`4PeLX
%`DSa[InbfPeuS'<BSi;B&8P^pV_H\?B>[bNqk[elA'I?c]6_*9\L)o_=AeQZ4tb(K556Q&<)0[_8bB9h<>_]/P9iDR:Kr3XXI1%b
%_=M!H>&Wk_'W=ufA'NSMfW1@0`[Psm`V>4m%P-%9ebX%g$>L(UHJ=UQj^&Rt<&81(Vg0gSeLi41/[U!L^W)su\"W1J4&tlRk6q(p
%=:Dg=/d-DZlbEVq2DY:#J'O#1Pa>Wr#X9C(3l>j4?0V:]59$kJVl9KuosX9EIe8b0"254rBt_@OSR)E4B$.^IFQ'H)mfk*mbr>8\
%WA_oM7/np!YP$>:dt@?qp73#Wi!XQkLZ'cUZk@$\hea8b%&$^JQN$A)q.fl[bOaXd5^8'8JYq/9l-2ti@VjD:iL"CqD67Fic)RVt
%i"li;eR=;fqV]p<:MAHf0FQk!Y*=bGe5)ZndKVRJrd)33\%*Gb*Q_.t"7sAaTf&>4C/=0Hl6TfM2sf.DKheO[F8t0B]-R53ne44O
%;2p.`CS/'FIE"o;#t>:*s(4AL_kl$^I8gjW3)?AQL.RZrd-3c/ggALjJ(MIdAa;c\NA:I6<U;R.rKb^!7WRGAlD:ALs4&4TSpGat
%7"kHY7dcmb4.5S;<r0F$_.p%#gCP\+o#(;hGPYpLe]!'eQ`k+/SQNt-bW@Ap(DtcfE@V`l323[:nRMRp&;H8I`[BO7BAX2H]04E1
%61@0(-gN(;-+)O4#sUk+)h55`D>5gg#3aTq_gr;XC^UMY]q.,S;l\B;jdt<U'V')'!tO&a&cWaH6FGdm%@1F'"2=.b0PsnI7)*H\
%Th/85lda_I'=tX'1<;]^Mf<I/ebQmb*n3;cA(#dl11!rUj["l5hkrerKL8`42Hcd^kpn#mpRn"6HBp)H1X0WFrqJYl@[WQbZWkmb
%fZC/Cb8takU+L9rc^IWL%!tE6*8;cfZ7V$5-<e<!r[eJb48D/__MQD"oEcOMj^(!?Mu)0h?^MEQ.ot0rHFg#h&#!1?prj?Hmo#18
%XBBo&3\LrLh`TF+:&J9X@J?4l<_r/pRpJDkMpS6*q+PDo/"%aq>'aV?e"C7Ng@@%).J<CI%FXA7Om9P^(Zl$feED#ISd%cQ#@/=t
%mntRk)>6]!TeTd0V2@Ccd'r`cP(WF!<p$*fr(U(Ni,Q%&gI]*<M_%c:),t72at6N%74Qpb0U3:eWEc9t6+GZ3ldYfiA8X#_3=k]l
%F.19tk`1R+DNW*oEk+Uk\&d\1mCAbVZZ8'%lHDgP(ZKm/2Wmekg!=d"qJU[9?dm/gh\SpeSmoqCTUaM]X-;A9T$d\/r4?^TfGoA&
%g]*=Sju:9\,YS.t;8Ak`m.]gL48sM2c$%mtWDr`ji!])<Z)N$<#\>Z!<I)#/kH^GJWr.idPrB4307EehFHsE'j\6/;EAq6]*8:2$
%p3GNS)E!"%^!$qSFPkWkE)6-%n?\"?8,q[ZDb#<0X(WeB?dcSeOc0/#pk*KgV=RMJcmXZDXdAmZgM,tj0<K-iO`+1F]7,T3]0FZ>
%da*2L:(rX!bJ=.,69=I)NB]S)n`Mj2+aVSRHWpH?0h/<ED\'/1B"5;K4u)V?=3[1R_d!C/;^S#mQ%;B^p5`oE00.@#WuSJ.!N)fU
%RIC)XY<JnmoRW>d[(5`/c2)r1Vu8o!^dJ%Ti'$:T7,OhnLQJP+R@Z#Of\+j7Z["Hq%`3%k,qmQEnVt7uYm'(cDY[ES>GkU`R$S.C
%eU(::/NK0FNq\+sB@b,\.`Gk`cXN6eL[)*.BpXmY\s`)&c%!d%NKE@tVIk<.;kh`T`d>;rVhaBTT>$Ac>fSAUITUd^@HquQde^^q
%#LiF+>[\-Jm<`$I54mhK/]&BCB7I>hptOfQ:9Rm>Rftq`Znn)(r(&d?2]_[]frhW"?8L0D(=)6<W<j*aX`Mt=6U,!$XJ]!F1[_BX
%[&SE9i,cO=G&]3bh@@PP)!'lP@(_7H^2nKP^??jiS!Ut?PL#irJ]C-;bfddXk8+hWWf#KeL/e(eho_[SJ!1Kd.\uP+PfPd*&+Q=8
%1u@ME(,\3*TI">V]<+$`HBYua_omA[fH]:Mhkc*>Vs3jnJ)m(hRq04iD/(@;?iP/HFm!edBkbB._t)tqA3*-iP8SEtn2Tm!nr8'.
%>otFE9g3kp&M1eeG42b$g3RIfo+Fn>D[$$\8^+Vmo5[NE/hd4n0KCgGY0Kt$RJC1XTgjM-p6:HTD*!r.Zfu<C<V-);<;^RJUmFQ`
%>j5]oI?tj8SHPpUFj\@n3kdPuK0g(4[oJHDOL=*p@-r>OK]f%[(%nRScY([SQR^7+>Lu"(nh4_%'#%l*K16@8G:DVs0VH%=<VRG/
%@WEQ2dsm^I>4Zt*Q\U;$0u?3AH&O'Yb3r6M6d/WrF]r)U+@>d-HF,bN05eC$)RbB-m&+k]3f<]:1CL<jDg;t@lgL"p#@,JRqGB=O
%Pf6C^R7Ll$[&SD>^0'_iRAK`4+2/EM#JY3'bB7E<[hkn5PP1_qo%GlaoIT^1bf]G8W@DM001tIVm7$g_IG@2W5::eT]X4f[?BiE8
%P^d/L=mSSFZ!=4!U\CLes+7p4T%s4EO1&A`iOhS.MnLNK!ROO,74J22]dTI5bfohXDqKt'&$%PY\>R>F>u&ci^U#QUqsljF41l=d
%0n7eRbYL\*X\sPE"@)2N_H>qH8T)%`q28mAk&L=qOa$d%NOKYKl2ea$jeePdFfa'J1:-Ice+be7iR\ioD%?K4LN^8uCC@nCGtIZ/
%=bLSjg!J+X$a2J;?>U:V/\KdO?>U:U/\KdWGdTuA[d\%']GeI-o^WIWgTtK)%jq(dXt.iK!oTdl:#Crk75sdFJjhV%F<akVq00JB
%#b4>dreK@S276dEJ+;d=n$tT5nVJ<q.N6=AoX%hbU7G6_f@*rp:N-9#\'%uX*uj/U+"P4CN">nWi%t9i!^HI/cmDcDb9\?j>AClD
%WulH$9>?C/]M)@=Y&8K`\'')ohZ!HG]WN9V?!SBp4`r'.p:F:n1j1HgY5,$M^A6o[`JlPNRE>D^s$1>o4Zch1]pa:cp?qs^QS3Zc
%S:BQWrqTZ6RJF2ZTD!e\>nJT0>2;pqU:KlhLH"#7NEc#<#j,[8HbueY3VENGLR=M(!EuZjW3u8K(RI%h^>LAEPNP5u`b51$BK_I@
%gSRD%kjY"3/fiTtf&<rh=dKW8Cpt]D*j"n&(]6rak5X`Oaa%-IR*p-'9:[\1qJ@h8J*2=[pFj7TDmB:'.rG)PXoFP&`YDmAM0Q,h
%`L?7)c1eD4%"?KjmuMjsa(!;;CU*$6=S)J]P+KX]mpaOc[O1&OCVG]aheDM'W)SLX?GA3Rh8R8HB)Q/A!b$B2lQt==nepmUZek^F
%2n59J@eliZS"8Fa/(1M#CBG[bQ1/ru%n_gFn82=<LE,*Jbs\H=0kT0uHPh*=L:&gBR9)?+U@pQ!c.[.+ULqT+%N;>?FM/[qpSgY*
%1Tje@Ol,GpVETh.oQ$bVe(UFs(<kmig#AjBMlF&%eCe<rCqRJEKHZ9LZc2jq@fFU;:oehCF4:,i[t]O]?3oeq'8uFng6q"f*PDd:
%4O+./[,3u?PH9sY,E"2D>PG!?NU/$.qVo&%pAM.#!nYis=^08+`OsSlcPo0Up62CX]X0l/hkg>969sICZ=WrrDc>$#fO@E6`GEut
%,E%DFn"4hZVcet8(NU@HbeG\U?5=2-Mi!e>`63og@kmMZR!;b-]IYC94SG]qY_'NT5[$i(9drWi9R,]G#3i$+1&l7F9`3*`^8\K.
%QSY!"IG';Jh-dSX"b,f,'@$@rVq"#&O./X@i8nj/=heI`bM<A\4!nQ,LKVB%ibs4nb$o>fLZ4T<!;YFQjPgrPfbu"M[kQ(H#l,-O
%@IbHBs6Bm0H!G9[_I_%dI4fDEgA:9tp8'd_I48OPb+7Gil<!GuUM'.:qpaV)rqFIRJ(pt#mi4[Vr]#8&;X*KL'YgQ44]]k`1cZ(b
%_(9qX%4`TjAK<rRjBObD1$bEI?MaR[kq`:Y*8l<d(@tG)dj5+&<\ls^3dQp^rO`PujdFZ@/[VC%gGrdXIb35l$=;6X]jCE>,L*%]
%/nIANkWp(>+k&A>9`L,%!,km!,r5D<^sJLipku>;T#^%e>0LL#6W1I^a-agGpd`Y?-pM)\_i#"_H&T^)`iM4ZH)]?54N?/Xb$lE%
%*p,3V*GHj4BEQN.%`G!2T2g2@BqR?03d!+=09#'@g;@P&:$6ZjKDM85g!#[2o0g/V^$4cr#oE8Y.E@*)g_!K7qKf`N^CU!\a\)n&
%6N:?&H+=rm4`$ZVKDj%nNR>]%V,YRS,gb?-Co+mkUYO)EaA7$W5O+u:`K`NW.Pq6/mY!a9?tRdU&lj%f:Q*2/47dULNgC#bES8Wm
%!QOk?[c8gNXn4Y+0;B.'qn=mtEGa([3:3FVL:uTN$2o4B-Nt<qT7!BVpE/SjPU=Vr<:+d_]G;0W?KN_deqPhRlHIA)0/'=V[X697
%4M7#<Rf1K;:*B,ufhqNodEL$H;HUA0:=u#3jTO`/Xs\JHSMPK5$.urjScsi:N)(8#gt2n:aQ<Ek?F.`8(>7IeRp0EEMem9nc!`Nn
%+Ys&]g"^%`fY$<e*j/P2dr`lfArCbKOj5Q,\OAQg8E^!.l(%OTdQ(+gbXji3@M]@,S0W45WbV6+\slHm>jZ63L;BLRcZt>?(Y:Bh
%s#H"Pn\jW"=3k70q>ROID/lbt/GG^SrKohB?AWUe.mM("rA>C%I*Z>F'*:2SrQ..?VH.G"Hj8*bC8Ldbf8cc^ci2j(e&s;M8bZNX
%cJr]7kJf*#e7W+!;&UD1>kXolm@K]a,j.;>duX))ZQ:.Za[M8ITB4hiqgEa]?R@inS]/K1K`82Wd7S`!Uj7l8>i^eOiLah'e+EZY
%dH(%jVmG;Uo<%VXYIlise*$nkV4WOt9?bOPFP?\Ep??q\>WMNA'/Q_\iQ8`Y#oC"i0ko3."4Hi@iX9,-l%XHo_gqGn]f#Gh$><@e
%QTgRfbF\>QI.OiX6.(.&plqin8!*DP]"I][$:6jRf(?[t)9knKp>\S0[ts5`EKGs\`.RNd3aV*4DPsU`MM/tkRGgu`&pB.'Du>`C
%%Z2#Vd39q6pVfOGZObB):pelJ4QCMW5;R&F8unSpqg-gUJbQ^qg%PPOY<JnmFALMoc]pG&ed"4;rb70KO068cT[NW%1)sI.,b![;
%U%'"[9*]XKlf#050eOK"g"*uto4iZJn+r`]Ga\$:EQWN;0gI>qaFA;NRIpU/Mdp'%OL*?#Apo4%hSoM;A)f\s+>7%Z33,?kcg,99
%p7B*'CCuIdI-0`)T:^KWl]6G4gViDqjtVG_O`,oFo8AH/)R/gPf>Lqhn3_H3s2FE'H0dAhO"pZ^oZ9QLCJ6p<nUD>54SZX9nIjnB
%cfnMZD789=:VGiLLRs4sOX'8KhiVpXPE0(*4Cf9bIn<,n-esmT1T/U^pl^L6V;KV8g>S+I@Y`G$=A+@_m0;BLc\gl()9hh%!nPO&
%C$.7AVL+D['9[FcKr4GMo?rQZ5+oo1\ZP)/FM7F4VL6,*@F&*d&%&&I1X*i),j4d';F)#2p,Z4:UAebCOrh&)QZMC\ISqBub<Er?
%e!o%LU7$FR1LkpK1Q-bKjq*^8i0!1h:M]\T?J_J3K5H)&:$dd@O7*@KNGA;u@J"Zp_7V%1o0)b4[_0SJc+g0Ec!uJaD>0NdFujPG
%/H7%'VL/]uC+R7X0<'-JIMid77"eml3pdo++kOD\9K]IZlYZKbs8M2_97Bfuhf?sbr-M2q/cu0ob+59pMt_u)RdX3kCK8(247AG#
%`^rDkN*d6%ZWXIM"1h'-k]E9JnF*S\qr$Z)J1k^G"A62Cq&<<16pB,Y1C4.oRgmQ's"b)Z9E"\Pj]@H!@_G&KDZoMrIlqFhIW(Eg
%fI8a#TKQuHet/Q!S3\qSI5YGNFdos:`;%XJ+)=L\rjgPj\V,ILOt'*E,_KMs(-1CWYDBIi+(S[m728"j]Zc4gYT,/c"Q;a7p"dWL
%NO?snp(r0>L/2`<r=7u[SbaD!(gm*RnDbg<&Lb0u!g6jKfSo(gXJ17o<@?NPV`".`5W=qN'i>oQA2ol'UIkkh4tmts_$?66-,Ggf
%j5CWBmgj_T)B<RK9&0E&p2p?(huDb0n2Kc+A!]2]eRa<2X1H;N2G!hfQ3,?^r0[N7.X%9%lMmWM`!H3B$)Z(k:2/@4N$>51TUi0u
%Cg-nJ-N*-Inc5?&_[h4qHuoBuH[PXef_e17Ho;D7^3hr"YJ+hS[JMVlBt\t+iYW0Dpqt%?fTrE'r]9eNC-uIr`CeBMWM*,#0oAM2
%O`&EsK#N$Thr6P>=!l9\S&suK1STj67;;>-Z;LPWNUgYV[//e,'QooKo$fJ.eF^4/K^#&Ec>VRq!n,@`K1A't_u?=XRK<0W[l2X)
%^4oK%NhOf1]slL@U>P#ZDijgnjnW%b\R5/\#28ekGk-<i?MZ[">S%e1p8+oL^X1WfX+,s;eB<@)6T7g0!@BQ]DZ]oebsG`9S%']2
%#k2V!<19o7`6HCnkqf%E31>)io9DMYc2`HRXBld7pZg;NPFk71nV:^'INXZuR-u?iHCg)r!lhX9OJAW_Znb$MIt9<=s&k`NZ8k)-
%WQe;im]IJOW4l3D?h7Q<rINh+s%2@GI$]/odi@)r2+J]I*tGm"_5'R@\RHGBp"@eS&9eSq^2t#l\_bna^0FJ&lN85o1btqN5'ei^
%[AuZsWr$h-m]^Ij+E@O]fFOrFXZ%YOZsMEUmN)%A^7o*tp/=#MFJIS879Af,M#DX8f[M>*3/YfXQb^4:%hG-+WkE]raT'c'9%L?3
%"XHt+`Qq+Yi2t`CBHls\Hn")L'UP,:Q$A"lM62(rB^O]aIbld[ldulNPLOdE2r.Q^rttN/jn_4mesl?KYL/(?DsDWd^#V'$lp^6l
%_e,gF2)"XjYhB&LQ'-n1SM'lBqo;?gE^kMT`3fB!Y7@[<)sCZTS]mO)*dMiaiYefIQFlgo8]=>'R9cq"*\F=eoc'Zneu\U9mFL`L
%XF;[eAO(D1SDG:0pgV-,a6o$&<,/d%V+(\NE4+;;\r^CU-`?_.-FlG@2uO;Vo*[9QlAradmXpl^:'NOV21<aYCNPf-e_.L"4K*"b
%7dZF)dXq!hCqfuh2!]#72h6YT!NAJLC@+=C#H$$&gMX61Qj_A!@#\884`!$Y<dY?c6hS="T2k[-R%2ct8(mqacZVoa':i9u&:?Tl
%gXMn-hTI0M[.NejbZ(i\O2gAoHC]d22[EAa2B=D"HSO$Sa8*%;DgM#-?7PjC_ep8OC>X5fDhdbPs/,P%]t.K^j2Mo>2OH0OaH@rk
%+p7k?$r)!d+;,CX334<^DBdfZ!0tdMN6''I$f!-[a2`bQpp7<5R!cg7<)pM(gg$GmQXVT0r16RB3RY9Tohn0W^tH?d=_cO"i:LtD
%jU^jW<R@j4hI,RqHDL.dIY5'=Se@QW7a?gN)4,fLCH9:mA`3Q#(:IA9KikqLZ`<I*H(g;1Jqi>JDu4"WJM5F"klE;drNXl:Q1a\Q
%"o,OP3Wo-F`1L1"50Nc;a(2H++`FJg2Ve&ZR.#K]oqc\S09<Btpg](BX^"A?Ko[)pb1D[d)*L)>F`]@[<)uDlmDSDHDk1@)<2eAa
%>(`bR[n[#HIDV_3LnZpK%#r^/)te(\)HgPof.J\@Hf3NYGL5[A*O;R19sk9I@@4pJe(%bZ"Mf`Dj%_>XY&o&UF.6_(c\a1&#;$D^
%dRa!)J@o*'28Vd%[5sRFGhCWA!K]UkWZ6B(*dao`obr7+b"1G[LVhA1ERDB6cTeEa[$a\55XiU5WR;kF_e"H:W=HPg53@da-68?j
%HpQL=[pTbb[_5>]/PkGB9Z&rV+&s`u4XSud'a[9?\Q7(NMIGqjg&P#sl:2H=YkffFC]96'_np&>obR2#E"h4KcbtHr'5m>Kj_Nis
%-&9>n@I[9Y%=34SK2r2*\*PXEng/VoI.][;DYSV6Q$SFV;&Zk#k>X)"IDN!p*giP;DNo%?*=suhJkb`'A\DHS[QdCD5'1[2F8k2m
%SqOCJWAc38<l8;<%7`;'@CO9U@@,-]?F]*SO$=m=FkT[Z"3_h#dK<).n,ilZ;WB:e?9-g*i;fp,0VXS*<Zm3uFaANuakMS]AB3m=
%8_eR,eaV0Bcm5n4*a.W(13.ukju/@k[gAMs9AO4Ef,*kt+=aer?aaMg)F-&oB:5B-#o2%@\fT((&q6YW)6NNhAf>$fAL-U%VP,X^
%0Hi7-pOnRSm>'GB<Q!>U$d2Q(K5e@]TtM[JIouWs\d"pIYL7-7fc`U3%/_jYE>k[/Y^dVu4A\+,JHt2k,cBo;32Rt!"TPjc0nubs
%\2K2He?eiES-H=(U=SX[;<q$b`B"3T<atSR9p<_-5H2gQMm]Ne)Y+toFWeV(gZq$$94-?Z>:Ech;#<"?VFX@^?^=LdBZL3HN67[W
%HD>t8)#%T>$&MY..HI(u(b:4[IQe?sl9$.EJrHJn%_9<He(SYc5)T<[QA!CQEr04se"@\h99X&EhJ)$/<%ljY/Ln7,/=QR5995ql
%R3*jRk%k9J%Ha#E(Pk0/no,41s!qGF-q[k>,bVpj.l(Pp$jIeR/l:P$`<6N(&0On=?PdL@;H%>U]]KK6D_0e/58rI2EbmAh_sW9h
%AjURT:9"go#g"@-8&\NL"SCU[#F!tFO4pZsBc)EbY\fjlb__r!!3$CPhi.cl?_jlha'a]K#PCCSj6Sj>&c4b[>SNa.O^.hq]p[>r
%(#>ao3`9#E%q=[s74.ih/1f*.`,P]5k&/I$'q)Wn2lA>;:?,jKV3lGHR3qOUgLPKQ4DX#s.p0c<[I>G'lQkUDPVK#KI;R3n`Eb'@
%Ee+FU#tnRR'Ko?DD$IJKnugYP>'`O/Q14,GmJ5rSjB/)^S.\P`;kfV].8b7^MlDLs<eh]tM_Ph"%1QB)^2@S/m5OucfGrC,Wn>Cg
%h#B/(<,X^ar;h$3TfmR']e%WMpi,O\h7`$;a,tYfY1C&A)"X[s/t"WP$hiXVG@6fbh4BZh7GkZGPH,_I._VqC,5Z%bDKM!fhmTl@
%m<IHm8M$LTA/$a)Ft&V2+038pq:\2TpL\>,U>9]-o5!N_GdM\IWpNd?ro:A8CL]M)f>@J$l09ZC/al*2%eibQK:VAhqJ!;q/BR,j
%GH.aMK!<HQrT%1g]#Ca=,L>>nkjDK\+75\>gJCR#P4eQ#WoHCXH?>:/mL"8(;;^+]-,\^7l<%3Bnf8Dm-e#+Xo)7Miq=YL=mR(3`
%<[ZXWQ8#6@pSHt[3[q/c`8@$L2c*2R_Aj@VjL-85(&@^ciA"A(KWdTnQ)<;]MXECN:XP_^\.q\TXU`f!LZJjW6gU(eI5rAr.o/*E
%]GYSCmSr2R6)#^`ZS%0KXsH_Wp-$!6Y^U(9!hoLJkN[*n5-;LG1ZaQ[*`Ciq@enAkgCW@F.hA<jokbpU8sR>QNC6KcM<r5_q6aW.
%D!Nqq9rq]u'DcZhs8$uN(+GNU#(EQW;jD1D.%4_U27ZdqH/5Ga+.)$4eV!Nk0DIMcAb0^+W'DID3NhmKN"igOMT4AHoi?&#1pS^B
%*r"s*]\Td\Z!Jls"rfY*c*EQrmU(V.jE4bBiL0734gD+T-*sLr)keiHhNW(56\i;?C,D(+?+rmIW?ND,8S0$>jaB/:Gn07KQQLC\
%ipmcA]AHouQ1h'!AZV1&ksi6tUT*tINIV]u)sDE)bHOdcVo`dmG:i1mhY45k$%I1H>R1WM_\AFm!r3Ja:[aaEG&L8+#(9r2okJI+
%m^N\4i*.P<^Rs6>OpBN#PL7Y3DP[2Rp.T5MQ5KCfa$m$GTSaiG,!7k0YT%qU8>Q[s'E.I^$Scj'miMh`^%>?_'p<LOA7bZ!4f)lY
%.rhP5Fg6:XI+aPqC8F3I[o,8H'f[8(5YQX<>D@pUpSlp!K;!-.U[bp!lZ9u&VDQ3(,HK8\3lsuX<@0$r^02Yh^Dsd=C'cmf0rYsI
%GT@T<O42K_YBD5YSDG6I>#N:b:P'M?g^;%_lLUr3h5\r$[nL@40!^(<,/LtO7QT45j34d<"90>rFbA)U<:!!tKu$ZgE'+tt>B?Su
%.FVM/J(sQ><^<;N*j3OQ9f9R_p%67-2ist0QhRI'Zb)XTHbD"#cg=/;8IUO0k/\U`?B/1:k&s+qC$`,QiFM(Fek@`)e>e[]Dk4hl
%TAuj67-.NZfTTc)SLCu8LaW.o*Y.4)C%'&M/e,+5p[P#qo%o06:^kF=T-k-gX#cJfZ&?n^B.>u%ST/pFkt:GZCN.p3.]R5;,+OYF
%,a.D9.Z&Jd/eQ\QHH:)Wjiij^=%(qKCI+T,$t(;A%IP7o+'YRB+2OlFnEXh4o5O1sDT21Ma3!`FhF?4,:g$#G@YN9+20rQLB^(b%
%E=9bP#+<u9D38^NX)l:Wf;+sAW;*'T.Q-)7X:e&oBkiBl?@,f#K!3s6O'OZURl&rTFp+se?'$^TS)N#A?+pce:`eF:G_m3s[IZf[
%]th46ONk1D-+<g>)A4[Ol'Hq87MGk.gt&07M8bTaXX8Q$%G/Zg4h_6?l<u'J<@I6c+YR`+Mr1Z?p\,r)r#3as7GEZFrM#7nq2qJ7
%4?5D/V0>jIJG`$HWG]-RqSHrg2;UH-_H:.U:.LS7KDMGV]e43G\YIVH[eP4bj4F2Z.5%jqS6uj@fdM='LR-6R0m[j&JDJpM*8&n-
%']XY`+=.kRNMD8&O=/.O.A,]SnCKho\6VE&Z+.V"[Mqi^@OQND^"dg18@"-p)X.i*g1A6clHE[I'S?S#GslN>p['=PKET99&XeFd
%W!tG<)8`&DL<_1_)Q80gKQ)!i+Zr5rKL1/f.f!fs%9_iL"sjdKn5l@*JR_E,(o9"sfrddsCa8"t8aTu1Bl0@Yh#F[/4]fWo9gCEX
%Q!le.p2ZN67>Rqu(>0pY3F<(C]BDUP#Um\uU&,oh]J$>)&=S!PoeK-^^7$Y@_rfpOD'3iLf#qb\UFk*Ik#6Wo)7ktPA6EHhd2Ikf
%5I0TGQ\Amb1[^69C7AeTc/ZSk:;V:Br&R`U<B!YXUtUg/CA4:=98Lt4Yn+E>`"k(?]+Lg;RbFQo/I>dfk,*h,ZI'5a@hV+3g<B:U
%nqKOm]8o_=(eL9c7bb=D+AuN<$6(rPT8Y8(Fd8fhE!>%m)fH4>C9/GfXAht<i&p7aN$#=Aogq4cA_@8%F1?Pk!bN$',V!7@?EERl
%?Nu5/BS=M'K;n1k,AV*'X\^_V'e,*=;)B:OBZqESTE[mI+I0UE.O6huEG6G&_SF'el'<="c_b3"A*'(g$#Z#[,^k2PPg2!.Va=T&
%+aJ+t0$qSU?hDu^4+A!g%l17d0Y>$WrjA/SWiKDUkI:p[l'YC8k+V8c4&<e9,dK/"Y*R6hOJZK/k15fT5ibK#l7s\N*a^7TH^h2\
%0o1ZV:RTkWblu,6VJK>7NPkb+hD8ZYX;$G`r%W#c(?)GqMm)^Z&oq*R"`fggX!dik=h3bZ\*LR0#cUbk#pU;M\YY(bZ_^Gr,q+Mn
%QCN\ear-'2D<sBUI(OYqeDI(h8>W^tL!Y%-"gdR1b49,SK@5IDYfViCo?AY<'fK`hgWrJSUeQ3q?p@d'"V-J(0)5BH#iO"['=Hb(
%@_9@h[q"!UgJk=TV#d\_S9D2LoP&D1jGlbG5cOZ:c8&pi[VrTO8s7M@NjX;1\NBa4GLXRL_atBo\H+"Vg<`V.TMde;IXTmNPD=@&
%"g[h9a)HgNkpYEsJ)G;lLG<":at!2Z,$DG`*eN!=-b2K&ATUA(cJjqY)G]XEGHLC<s,tjW:RfPl<."D_Xf<tlC')"O/)(Sl>fn,.
%060q:k,ri=:';!o<auqYq<N,X:ptglg3dOmOW22INldk,]1s\93]Y%42m@04[7C6lE<#Fh`G/aU@Aq388\B$]KYTfREB<OucH88i
%)r.%Bq8&XV@!9\p-A,gN)&iG0R2<]8n:T0hlCuN'lAY/Lh=*l&i*(K:8gqd.aN<6NUmO$SS,%=\Ioq/P]%QChd4;t(l@DpOhStZ+
%Z/J^(&*VIPCAf<TC%VO4//7]W!KTQ3p!RE0dE'jaR$q"7`9'sn1<dGN$<Pq%Pd&VIdZ76H`&S1X^3Xn$"6\.%kt^?HG/N%0"fiTk
%gcTaihDGW8F\cU/.CPNn$@7/12l7k:DHt-bSIX_LO`XL6kCWST:RgAq4j4+,I'Zd2Nb;^6`2$KoqpP!g)87YWU-!"+%=?;K85&2j
%_OO>R-5c$^GO!<;gITgLl+4T7e":!pUjZ1Q_rRER:2fho*;R-il[0e02-2bX-H+5cr&pGEZC_JA8el(HF'9YD-u!8g?&A")][nBn
%ULH*lF.9%0)?/A]n^Si/6fTT/]6,JA&a%SfDNZaoONnA/:l"e-Uu"8\Or-Pic3haNEQOE]l&nuZI,3!^@,sCO8\HhFVduWc`!PGQ
%<p+QA';Mgf<%6E-N'pP*Ch@gt!T$g^P5F!Hf<IY#MZ$B]NJkQ`&ab;%@4ZW5rNoLQ<[pr32k*o.<7GE::OCjCDR,`C[QIlm?QuoF
%d8IORpD28#eK93(.-]"f=C8t5;X@H%m*YKlM*X"/S5ra;&#D3GC1-*][[><Y%M*p-7A8$onRd]Y5bi&K9D^g6GL8r_A]L&lkt'V1
%WN9?H2F"#^,Wk+.nU6qg5*TU-qt5%tQQ!+q;Ie`]AQ`HOXnR-`kPV&G.ZJU0@r7((DX<X++/&3N:Lf`FkkfT,=md[&H`-i+:3op(
%%]%js`*)*r^^_;0CV5dRl_TAIVKA5a$THjKXS/9Qr@jTm([6q>K<0CkQl_UqZ<<;uBPo1qjCBQ;8QM1M"F6ma:-an?hfMs<i?30A
%kT+Jd&%dCXeJE&_];af`IFfL*)mUoH[?Z.9AU,j<)?q9^cYnFKRC4(ol/<abN,NT!0fu:!rZP;jXSH-rjre1*c'ji"B%tBF0%p*t
%pdltr>#$GS:CoTW1H7I`:2Ue7H^`?D=)GlRKp\rJ<`S*9h?#Rpbbl^G/ngVF"[_UYJfV9cSlW?bBLI(=]=:NKDml(A%s[=.`qnUQ
%0&/$a*UPusl^i2Uj$+?HNUS/AVNElkoH_t\4.m;Ti:qPU';V;*a=fmbEN_DcG$)_5Q4D^3#-j@R[S2stGB-_ZQ<WX?CW-BdgAn.$
%hP`KlfPns'f:#6Q=aTPRE505qc<ITK*]K;%c2+H/II6F!A'O][R6r!/1tVqM6#c!<Z2L%P3SE4H@Q<d"+%iH`b!p\)G.D/6lHKMA
%"GL],0-/f.9<2>QRF.J(A$2bu$\3Ak0%$qYP:)bESELmU8\83Egg)t`$soUdgVpOLF,P`7pBi!?3Trd,/+gjaL#U9oD?Pn$<%c8<
%f()maF^tg)ZpQ+PO_Meag>gk,3gi(SVcUJ3pmE)7)Wg#RK$u0nkQj@4E>Ma`N61nW6k'&97<_,X^rOD:e_20A1-Yh?MBD;'bDhmn
%&\gqToSZN/;qOro1&\5$;@1^&6[,.=PL%7Z5c*rn%sIo]N/@4!XA_4<Uf4=t\h%RoG#J*H#I*CY+34cjeea\&nqW9]X+sIX1n)FG
%+s(:D:XB6=.jR;%9:[>_QD1;!n9Jl;C:sGl<[YQufTI@<&lp1)Lc3ADAOKTmfB,,cFF6OC9$^KWE9YHpP*>'i[krCZn!5KgNKZ_p
%Y%c<p0-6JMLLr)ElrK'uP*;33n^`lo7KlW9U[GbM4e;+t'Q_1\C3&Cp4;Z0OYIO*'7dMEWXa2)/Z$6XECeEsDdoH)4W8N&9(FQd,
%Vrd:9a)u8')N*8%/u=GrUX0.T_V3758pef6`EU/9C<X+j)ASGUSD?MSf;X/u,M]4-32S290U3HQaJ7"(#fe`6p)m)"l!&*)2SD$8
%l>^5LLK"NlE[l2Z,cqLZghAauN5*'fU<-+)@ZW_/fLY%KC;sA$MD_dWM3q1n[>`umqA>Q#5DX*]*sK,cK\K]`A*_m,?#76jQs"1/
%Zu\DP%[bJXiU07GYdAtcV,Z)-HS,fWYKpG]>8hF`c/6tZC/9mhUB1(5_\0"DirR/WgPo`TXh-+n:'Q(0QY(Ks>tk3BWsU`4hir>V
%K6^^!$BE[H+)(6W,R@RI=C:Nqm*3Xq9KDGME$#,aH5Z*.g(2sk,u9PnhNRg(o9*$d7Rlks^p%,/JgYj!Q?J/KCL/+'B3!$eNfMO@
%K;VO,\ulk).s_im0;c(\nqJ-Cf$R;gJHE:j&+>e#A#`Xeh'B&\>(+>QfhTc^?hV9P\1Fsi;PZ?mpB*$Z->F('n**q,g>+dV%m044
%6qM];e]VJPTf&"&p$IpTbGY!^I3k)_V_e]O*r:=LNFS4h;aTFhS2E;P*m?<AmTqNY*c7g=_\cP5]RV\H4d8XLA#D#T('="qA2e%R
%/L)gIi9^$P6J:$#@X(A+l,?P*%&@m89rbjiXAZ4M,Ub45Q8[!3't`gC?`!_q5_Dh5dEM.Rh/$il.IMt(\X#%J9C)hWnRET![f='e
%S1NO^QdG-nNt1Vb]!'%\g>1s+le<.bc7JC73tJ0SV;B2=!<bdqi36#6j$Y5@8sR$@(gsDuQ*,/hD<S9,>No.2"1%6NbH9j1^V\>Y
%(rT]\\pgj$a9[o7c,r*mb\^g*C$E&&C-,S_49`hpdt\UoVWX!j33-:D*/;)OZ'5'8i\U\k;Qu`B%@<ZOo-:uBnls.soZPhYcDWWZ
%UI(t:16fBg]dBbeoK'.K.k[N4#$pIIep6_&j-Gi!jAZ"pfsUJ>\:U8]mJ><eJLfEfJCsWR]mdJ[5&/br'4aou/)fQ/E*8upD@T]F
%V;bODCeM:s%SXC?["c!gJq;^[CQA<aN^fU-_cS'*^HcC7L.$DNUr>AL4mbdQE8``bO_Eh?.PA1d"ZH0UIH#3P+Q&,q>MR#:jN>g]
%largr.nWO4f+,,mB<+t`^SY=1dW)rM'gd-=>fn.GDqE]SD+1S`oK_%R]_EVp-L1ScFmM''c-gs%=UDLXO>$GDRk1?DXX-LBY)7uo
%h7Cc"s)6fJ+R%[FQR%p?\@*98m`:<KO1D-"D^V-`@I_7kfMe;Cs*3Q_DJmZEdk@ViG,J=*F]s*so6]6%F`@8+p;[S$A7419K@_3P
%#<CfU")_MjFdhtV%oQO3=SIV^Ra!#/NSWjXAKpej25,/P.n/as<mls4MTkh0*5MNq(56).Fc&\34OE5tWh+4$UD_r#DUDXSR!>Kf
%NuUjm</O>^8dkQ^SJ1-_W*&N3'1FN6/ueG4)hf20PY^W0^-PKfR7DFKI=6WgebB#Ke(_UNp)@%bf(NN8"itacD.1WWBmop,fbeM\
%AJ4]Boa,.'[r4Cl@f38_oQ?j-q`8SdDDVkJL;C6se_@fagN_"623BI4'PoR=K1`jD#8reK?_)!sf6g<;GjZC)UnW"Dcu+i$OSX3_
%3s_?j-cqKLLRD#F=WU[a#Z>jrN^39ODqJsc?0gHFg8<DIJ9.\kmnPio?r]f;](q=l]WUS8H`1rEigmZ/Z+sGJUDJQ1,mCi,,OQQK
%qLk.j\eJ8r5323i"9Pi]H%+Xlj31C+[_InH5L@4)pM:F*4D!MMD0e_IW@'j.\'),tr^\?=f5Q.<2SR?hiLG$ImtLT&>bYNojBQjH
%`!49OH`,J7q&W:q-<[AL%6j6lWbBggotc&@TBJ3/@[sW:hAhM1m1T0rY_m3eqRTm[18n>ViBA-B5AEP'4OYB&G3lQ?doD/ZCj6gc
%A#3M0W"$&d0>0;jGL4rYQ>/Q^U]"@pCis)5qXnM)7f&$H/3QUNWRaJ8>peaa1M*NAHDUW&q+pJR$%;2Egr:8uh%T\=`t^GM#tfOU
%Z1!`/:8Q=HPDGk--nfcP:9<pq*M`,#fs$0ZdDe@3M`2R&h<=lS,Os]*?kA*DKG\8-+%&262X)8!lP]<m,/:&]VX#`R#>MPDi>L&u
%chV-OCtq[9(,*2cPPs^%0/%MGW]uH$G#V]BEf;hnf.,:)X^YM82nan?AnNPh=$q:iH6AM"Q71+(5^Y_\U.uq#.Jm]9Q6-mIC-1h!
%-+4tX6,L[9ab7#%pq*\P`(SaGBu>9Clm0b`#&-2JABd,_C5eq[\[=*:V"suge54C1a'\agqtkb]qts!EUp\b0?9DRT?-`#'1V^\K
%_t_i:UW_lHH$#_1e#/7V.d)#n)OUm+o?TZ"rkN<tn)%AWo(tA+QZ*gHbbi\cFT)Nappk),,/_9QPobB+`8mh2'0`L(^ctK7@6CP3
%)A91&O?eb25J7<[_tlFiRX-PsNq$n<I#[_ij8crd)oRI-dLL^XOfpM$K($R3N?r,L)cLcq(&/Kq_ll$9H+4oUD8DQ5Uft>l>]$#$
%n7h1s+&=3JrPCIA-)-:=n7AO/+$qOS24`*@n+cP_^P5XiqsPL!6%aYd1!\=,4n@.M7KqHjZ/lOm':#K/5G`_+>>#\=bYiaG3K/[f
%m(k"jh[\aWL%kR]3YgQ5^tp#+WT)(G"'NE5SdbF-@PqUjSkQ%J%0U1arYh-In>BN3j^Epi]k/qtr,]!PdYj,[bI$tq<h7%dp`ED]
%=G9fkZO/W1pBF1e]$^]H/2*^!K.dAG`rSC/<S($<!H6I>ih[ZsU@T2r-$/;V/<`O:^W7KFr8UqI4cJ:S?cF_A#A`kZp9Hq/g'Cd;
%T7b8a`a3D^F1Z]7J!=:"NLfW@o_kp6Vco>&p)Mg+Ei)N,?>JK-L$CA*S'INsdRabk+Wg"R;l<b6[q!Lq<&T.OnLMN*T7:`;N_fSh
%rBX5f-EiGRbgRcd1;<6LDE[ECEKNsjh,i$EZAPo8;@*\Nl[c_fOlnQakoZIoMTjX*G&k&sJbja%`^B%1"!0^4-]?O&-6I/`X$tXn
%5P5=Eb0n6`Pb%3[nj@mY(f,.:_\h,9iAniN2:qfJ-f_,&qkFmAf'&a%1&pKF%^7,Vnoh"o?Rd/2q>JDS!?,l0iV+E6%oC\#Zbcd5
%:J:]&g$QD$F%>%3NSUO=+>J63`Y3f*:2b4gk"k4ge-nhDJZ=;dKs6^:fDJ9W:HSR;XlPn"KaS[pX"s>,[CpY:ETCKa@1N5T#L*L'
%+I2Ej2btW+J+-nrmbbU)^@m=';fDYS0bj+q=6k3^VNnd_Z[H!No?2b$5<lfDr8QGuZ!Z3gIeLtO9@'e0:O0^D(68;S=8li^UdX(t
%k20CTOo>1Sa63GSlb0;_g1H!:ps*L"T6OIenYara/,jYY4mG78m6:A&kM9_L8SAt4B=68+s4K[li6SMs)?3,[<qkc5Vh4r+\\7Q@
%&)W]N\"0Xcs8HR?fB)pk[o]m8q4d]KIk?I\ro3T^hI""aY4sO/rN*cbd0BTi)KXtXmG,DP46PQis*O"mh*9QONgBS\D7Ht.NLqi*
%`L#2B2JT^&9>SOIZP;].^+M.<>%EJ&:KpZ>P5)J,]VM("D_+>#g5eo(le:c)[!28YPc.mMQdX2-_G]MFdp1$Z*h=sTQVW=3bN;6?
%l"Y0C=Lr!md:98g[.KOU^FU+(:in"HiKib1^nA*jI9Ppu'O5<X)Q[:;b=hZfb4;!?:g4FZM`8hQ]QCO)nor6^\Aec?Q'U!.hL1A_
%QD9dbpWL[bj7DB-4Hj*shDFqlF,q-SEoCjg[!]>&=C6MT]1^=N:?sLteU20.NB;E<@[>c8M;!!"/QQ.[3^9REXD]Db/&CDdg'SKR
%H!:mZ=0351n`>11s.nsf8L3!^Pp8I.=ud&KLb"frrOnJcnBU"8j7[V57GCso=K.g^e5dKkrS^@mE#;pS7tu8-@s.24/@uf?Y!9(p
%B3KX^)T76.]4YpVX)Y#"?TkJre5f@@p&_:?3?2><>8l;"4uXGLX6$h%[/0LeRTo/[9!'t#=VKB;)s*!cn62m)-HJiB[@J<7YSO@]
%E7oX+:qAhn42#L<f*Z:tHY`?lLW)-1W=*KA?$oai-Z?k;_bf9'IB@u4=qBlP\*Lp(;g:HG&U@WBT6,bZb^$q8SpT6W=MLhRFP!.?
%[F=f+F;J2#AMZ"*K1>J5^#AheSpqti;/\B=<SH-YHW(+fWH@3EitQn%7\QA[gN\+q8fQmPDK_cmB;CMQr+%7\*nO&9m6iWEOL*X=
%^qk(V*&r=Ap&hjEUE$d,:>>tY48tF/ID:<O"Q#W*\@J&U%rR-R*gSa]Vr[a;_3**s4Q9H7c&8ui[X$KPT/V[&m;]I0IsT`eFC$#?
%JO&lWa=3[H@,u"#(ehY!Q/L=rZ5L;8^$Q!2V>b6!m8OAs#>:C='XP4;Z5hc]d[@GDh,*9C/(IGI\'@YFjfQ.m*5>L"j\oBc@cJfB
%e1NREU"0*L8DXZl6F!lkS'Xa5dKs3;O*p0an`D[X#[c.L_s0Au%`TSc_pV_n)33:Z=A8MNHK-?"S_[QXCF<1RiT>-l\\3+/mr!n5
%08nRWH!/ot%$.!hcZ]TkpANP3o/8EqEVhon>\#`N@_3%u[G5."6nQY'%s#k;FZ"H^'JF]nBg]`'C1[R7Am+gYYg)Ut"#W!30rOA<
%8*8GJS*7*DUYI`9qHf5&gtm@=g[Cr,ge$N$Nk=*U+*(pU06?U8j`NbKbdVjh#e]^7nb%dcamim?8R72DDqV-7/DZiV[U<NjO9c2?
%]CMD0Hl$$#DDtW$Jpt2W(]+&%?OShN#GQMh08YI@`2\'iI3&qmTdh;$Df*YFk%=NV;V9SG.37<k981ReMc=M11o5EhDGAu8'I6fj
%PfYAZ_rm4fq0JZKaQ6`@;soulYW4k];0J"\]#mSg/h$JkOY`h_&q*]Fc_I#QkpJJK^38=402f2`oi5@MT!.Kum;1AB/p;Ed97Che
%#DYBbHEFeX0C1!YR)mEAZP*o`LZq>b\_`A]P#'b%q;uob1=2DX?"RSLgl3Z;lFXT1.C6'(O+H-]b5LX4khn(u\%c&Um%%judb`1?
%b/mua=QK4c%SqEJHcb9rrn5D*B)gul'Uume\)(CP#_`nNKDi.5e%p;gRlf!F>KMM(=&YmKkD.g>R*;a(o,Fb0BXu[W`r+.YN>Si^
%e75KK>r?e(]rAs,f!S\/ICJ_^="f<1pdph:`Ll1GbOKJR'ZB+JnC].\LiM,H7"-gL:/m++f?'<4@6#d/TCnDgkM^CNl)#4hG$e&:
%WU7+lH7H(6##\N`r`H27ft'h[hn8X2OmSU+51:HPl/MN3J*>brllCs,jnUSD35]28T2nU_L[W&Emtah:&kC&KYAnYg9C3h/2Oi7@
%<oIRR'+4s"105!_7-73,ll?=cgtD53^)T8\(MZad[;13jAE3T]J$O:uI!l'qX:!7Z50.Ui]t<Xf$\q7<ZMF1GB!um]n9,^XrR[tE
%om#K'E)l'rhr57J=\u9Pc=0]:iTs$=5!*QI4snUnVs29JnsSI^+-qXckO5CiHB,%?bIPj5j"U3_GTL,bT.7_d-/D_83*/%>TpUa1
%:^UHFD!.2/"9)$/]N2HO/mDsia8'S#m4*UqI9FcYT*Mq2s3bD]TG.lZ$b;gfo0RRr.:-kWY*Z?O%jsG?p\F$l<NcsJ>`6pTm.G(0
%s7En.Q?p.L`:F$EEtbTTY&<ZmeYSaAANt;f*Bh*lSd.1u\(/K4kq;bB,2X]=Y)7F!&"I\/fBSXuSQbaF^9G#o\Sn;Gfa"t6hg@EB
%X3V=<kMlJN@'AX@9WZh6+!6Esr?qVD(lrSu7F$(6:KJA.lr0h/Pb/+R>(/[0hcHE8o&eIqq!'@%P1a7)QdT_&p_j]!_q.;GD7i%s
%$qf5GVYI)17'CO9qe.Uc%5YPQ@cT;2.peRGF2d!JnZns\%Iea9.Gnb[8tD0)<gL1oDrllidjqo1*s0#mb_UR_mlmm5'9UHFJ+R'I
%SDW*3.ud/cYOW[*WLi;)?E0!6a'[j[g6#QV]6.Cp2L<'Jn/-u20<TI>lKto/#,Z<:Y*=4T56b>1h.gQ*Trp8rNU(+KDY2ht>&uWF
%Teu4mXPR-lD=+g,]D5LnR7eX2f/M4PG&!RrCmVSu^!;o`*d!F'pmY$\\A-e[R.KEW0)tLrm0*C.:s?QB\hCeTA@/2)T+C8$B_^i'
%pTc4ip&h?1e\1N8QJ#0Z^QB$BEiBl*Nk?TZ(#Q<SpW*2uH;c>^`&1kJbF3@k`IDILa)[&u]M[9.,+:+_pHKUMg;aDFff$sRA%f]K
%n$fmN,U(o#W*b)/d"Q`GngjUo-PZ1Vhht-6d!PZeJ,_=3h?+`5)-%Fe+5R@NX5mj+S0B`L"2i28H$uhd?LJ:%<>:H0aZG&RNg7i_
%#,;g$QP]W.7(\cTJ\5SDMbc=)aF=UJpe^LR2gian?NcXBq-*Hbp&C(ZHq_;[R$Td[j0@qYE?$'4":jPT,rVjIWoAPb#_FHBLaYot
%$PL<a-e;?S*d(:J'mqho0e@8NEcVRF+n@$'k#>K,&b9@aB,-jSNB!aqW%FUYc-g$"e^AP/B-nH9Me$@TK*#.8/4cdS(m>=8XNXTk
%RR@1%&Q5:Tn^7[g8Xs<odmDS=c`s4*AuC@u;3ZKN\L(k@7-6q`70k6(<8PU>J`q,ge.g8<B<*bamrT=F<"Bc+=TRiR"\Vt"'C$1e
%b\_ugYTO#l>aRIMhgn$b]:I<I7,!jB%!8orSQ2TpRH@I[??Qnfi(dgJk!gRjW=E[$kA[bL(fb]N>:Nrq.?X`L$#3Q$D.BRiN=mI-
%`(0kW$mW>+W+ciC[B+):8sj0)e!qaHBMKaa1`WQ$'/FFAYe9<H">^A&9Fa,hU<@[U><mt7Xi?aB;d*.lBMn88]V.R`;]%o+DNk5`
%Tl#oU/!3<@5dO9(UB.Th+e8pBI9&)PYR(JH(P]4R3sROa26Gl2cp3"92gj(;YIKHI+gW@Eq.rB$2hTkP[StmYnmG8_#p:4g6B-i7
%4W$2X$Jh'$PMlX4TN)80S!=[_V'+6W]YH!L65V.^ai03*8>4Ub@Xqo)R[r+r9jV:rOVlYLW!Sm31ki:#*"?_%A#`:<9Q?d]RBXP"
%17!IZXg*iLTPTus3(#`W<<H-%e!^\\87t8d@Zmh6/j^Cc=\a+EF!.eoCM^IW7^@bYK:S`k7G]l"=fqprK:jZd6V&_?Z5_8:8rF%?
%/1RZ.<?aIP@[L.iMn2_Rj:(8U<Fui+^ad9!Cm`2?a@<8Y*QDKU%)rN<j]p#CLm2Z*KnY+7jNT#_EYI[-9UG"""M[hi>>L;12l6?F
%M<7a0Jk5"G.eFZL2U#g/$H2!:OqU^.R2Lf)'5%H5bSe9cOK"G>Yc<TmHke0Zb\Y3Ie24fI1(`I?-sj1\4]@[167o-H<4=$@:$9sJ
%i&7b'PfDc2)H2BP!hD%r6SotpJmh=k<I%mnU-K\b["+fQ1'ND?7A1hs0p.f.KFg'lZKbmh6_muY=UTpKLkX?=AqqTKbIbnSTp!e'
%/-0TS7h(sDR(cL&FAg,sMdfd7i;tMqm6TlI=O]W:$p(Vj8EdW^'#p'#'kA44)3pn'@S%4_3/4r1fn`e0BbDA<(<H;"?BQ9TZ+!Z/
%M3%rod;1:9.?i;LSl8g5@N$L!@Ff*$i:TN0U('aV.+B@IR2J=Ha0>goMpVE!3aSKl;_:IX;+Zl1$(Qp?".=k3:Kf.Oq4h[eCG5i$
%.Uc69'PSa;6X!,>S'FmHju'%#FLID]-9ras(.d`+ME(;i[U^Y?7M3L>K-1RI82PqCajJ97TnOnXTpEY*RM6(HWBs=84N`@h_+ht$
%nOZZ"\2b++We9$Rg"^BQ``/MWQkM7u&I([h%%<ir^fVfmN12#*!#CI/nLDR("EC([M'ERB,IU;t'SCH1'm&#91a<8i\m,mmcSFtm
%_n-1o&kZV=ll:g6QUX[M*Hnk0A,8r7d>8a&!%rpJA#',(SnF%Q&j?[99;;cl.M3L=O]?LO/r8U`haa@OZHK76BX*2W>l\00@L],D
%aFZmWW1[!CA/'2h3=oICNLI`;b\Ra.<1VI)'@S%bRkr&D!E(r.9[Ef?,Y"M)Pa=<5;?:PTUI5n$aePu*KjoDG30.O(Xj0G'8c\E%
%Uac*<?&&\`)+K`nN#[X+O[`'m*+lV\A"$/,bDFm_PV/%[QfZ%f.;!r1_TS*5UBkibX$oQkZ-,uUpb5i/S!SbZ&*'q<;=)).ak5^R
%E_V?P$U.VMh1X^B=iJA)7d*`ed$Du9Aa;%Im$-Y&R/.)M5&d<!nmnc9n=1W4/BK`+&>WX4!NBUkU`bKUXHAo;ah3>tXMmp7+,U.`
%<NZW?UTe,-d7)*-R>@cI\PWo</;79u3SZ/3`jMAcSeH/gW$dTQh1UF%:1fKR,9ETpPsu?p";)Xd#PeS8Hl@U6,8ome"j3@nUR:S]
%aVa1kSPh&<AB:LDZKNKcZAc50F/'>Z:^=@]Z^Eg'N9NC"2('_<4O3qiaFW@pQBR;RG<f:Ia?sf:!pM'4WAkD^6]_UYq&tHL+?\eK
%%Q?*nP?a;$eV)#=0[ctaRh0rkcJ_^GCkOFj#&W<=?FC2NW_R9PM0TYnR56:CKpkI7d$RYqOpa[22/EDW`4-A=_$O2<Zartu_tcrp
%)95)<_XYSoe:L;I.&s8]9uoY7aO8:G`%KOD/_M+E[K>KH:2.k-M%D%g-'$$3cf45Tfup'(W00E@#RNVG]nR72f0_n<qBs0)/ekX"
%RN(lT)1+#:X9k"ZiNpCX/jec_/=A9"\^?43We9$b3S\Es`jD;^T$kPfLu[t.g_f%V9NVll\s@n&Os3^Nc`tKk(-jF0V&9#*&C=XD
%T*pp'JrF<^j+u%Yk]0CR4Ne\-Fu1B9>`rARltFHhf0O6S*Hnk0A,8r7d>8_Q$h5i:L(+?=B%]j2EQo#K4UM?G*u8"BkV2dgG9IMJ
%Rr7&A.Qhl;MAsj3M*ALM"!LI'M)CkO;kY(kOkJ\^6Va<bC'j&WZS`RuF\6.=9SQYSjth,BSHUob*/_N>'T*IJO<=ZKA,V::"D=Ed
%6:GraN++0'lXj,,U9hW>?'U[Wc:'/@XH;@Lk<O."%VcC8Yd;jsds"EB:<\Nefs;q8;cSd*N@?jldm9B'Tk30K,g(Z=%#-8hU9\Bd
%F[-^pE.$#A`A1[8/:[r0MR9(?+c'qk0UiRKXV"+XgaIt.eV+pi=kmfs`q5eLO;$(dC]\,XL+5L00NTk,A2o;FH#*RBNIqLiE<;+b
%cP"KF$O9YJ*%U$$2Ces/FT`ddU5=s:TcflXTu`lL):JS@Q&X-:g7U$bc,pfN<6$GI3&(_kMIn-88JR]+@6mEuTLkLV#IUJNU`+6V
%K]#0NcS]7-5d2/0j)OiZY"TU_S?bhaA-a<!$;6RK;CZ)kFBI4P;^)C6Jl/UGne'EL1u+mCLVkE51(U3J4'.A,L'*8YJY>=s=Ibd5
%f'fR+\?oqZH3])=<+&ZI`J0"_./KmZ%%q,:TTV;qRn/:TRMa!*@j?)02J@qX1U;]UeSRq=9hK:_O@LF/8IA5TaHBsoO@Nn2&.o2^
%A:fnSH4!NdU1tqk'F=Ln,SrY%Q&<0W:aN_A'-Rm<Thmn0$pkr>53B)T&\:@LZj!d=ftrg832I37,rM3E$R6LX.RI6<NK"hr0!TEu
%"X4$AJ8l)`5RtWA&QL^Z&dj;R="p4%3T9lDF?6Ee'-Y]\RLKJG%[d_hMc>JNaTgu".*r[Ok%'B6Wo90hS<V6JZ[dK*6W6Ol%;<c:
%3N$9"^jTZ-L^:%JUl'sX&=%'bLKr&>:(E(Ac#>nG_oc$%0%!N&Oq-][1/!fsT>oD=MNs1J-/,"DR*EbhIT4APN$qHD?oT%:Kg8fO
%p-XQ[0V"*Y**;P[&.t"_-]!_$/;7J51#%lo@ZTN-#>J7GlYqU`<MG>7$o&Gr'kfAlF?F8$2Cf`?9=-uh0Un=Zr2>WS)KA['_T<?p
%M<JtkL`&Ue1BRp#..;\VK[Yc;bfVoEO1iP!+RV$T"rkD`M;s-2#67S^o/Xcm#VcJ-,:Y6=`o3p7:N<Z?V_eXa7'cX@@ZP4^V>2I7
%.@c(U!7hZ[PfO[tj.%BF]>953JVX:^PZ>`9<H9=IC(@?UW.]F.dPcstA8O:5:aMP9Gu2B57\IjK9Pm1dQ&X-:;P5J+c,pfN<6$GI
%3%6ZB,b/\fM$)NN@4lP@,#1%Q]E9@pa=LAq#a#6c!tmKqU(E;5V!0jtA6_OAVJDN2+sfS^Le_'@N4!E<@RVMBJIZ9ajY3tC+4G.#
%"&@!03)KYVEQH0P*hncI,KQ%=?5CV=n:Brk!]a?t&lBI>#fajh$3UUT5[mBk_O5DbI]3rSKKKMU+Ig^t1AF+XW]@.sKJ&Ag9u1XH
%[d^%Q:2.X<)$u'KO[`E&_%$-VUCdYU/1DEp=<Jfhd2Vj7UIpC_Oj+?q'F9,U'oWAl<mV0VC_oj'-:2O"X3hmj+sQSi,oNd(KIW)g
%%Da#b[d^%Q:2.Y'fnf\1Om!."Z-4&q0nLr,.h9YZ_C#YoA6]Cn'\%gbjru,Uif4T6_\=V+\V'$3Q"VB&6*M%V8i.Df;_ji'ai[*:
%&h20Ab[tDo5H<b.7\#jBn2OM^+3%b`6>X_1!j?VSL&`G:2MEQ5UAtck#/dE;(^(U<M@5KM#<l^cAKiEf!7aL@K<@HZR)Og^SAK*h
%(<PWIM*.NaP]iO`R,CRM:L#Wo&S>"ej,"YDK!mp4CcPYR2rd4=hMcFpOMf":nPQB\LN1DW0$jU>@sCrWcZ.T*\B73%J^)5)ki+#;
%Pfi-!90TB6PSTdVQZ1;XAB$<h?s/SDCksAlL^E(',"4EO:l27`!\p(=Oon$$+dtKo38@o#&)&=u8BDDFdMIH]K;Kl]NltsE,BSc#
%BFAFYZ@sCNEB5<O'CuiA?Sf>1'Hi=2&K*C*[6R-=`#!b&K>!.3,Y9_-@=qgPk@DP%Z/T_(LlX%4!6AZ?RFKqYS=0+4Hu+HgNWMqS
%CehG"UC'b1_21_iMu0nb_I&$0Nu/GkbRN08Jp;B.&ol/.7"o/GF<`8Rjp;M'UC!SWMA72j^c<(?5SG9d6+#sPJTbQ!"-\e*d)AkT
%.@&#rQ?u$3.BPN`-Xk+O9[f3`jt/D3ULI%I3ZoUTR?*QRoVFr#*%m!cAoL#l=F-]Dn]$/B<?c?7_'>lcJj>O)(t=BV.gMb?F?iJQ
%LQs1`R#Y)`EFM\[#[s-;[(s7a/0dJ<6+2>H+J(+sa]9!qmNd:&&.HH-,>t1.Z8%-"JGi^G;'hY:Gu2F>4HUs(c'(L).gg8gZp@nM
%S!>T'W/adpEDg,[WbRnGe!9-M=C[1*@X&/A"U@DFiQTZ-`tXCt"Pa#J4IQYBE1tD4,iT:nI*O@j6qW1F$9=)RJK.f9O;p_H?kqj4
%[SSk(>OYM_VR56VP_@!j"tSkfiCl)pa5]`>eH&gCLpsZL&N:+r#d-!&9u7&`fRYJP\B4oUM^m+BaFcgHa#.1\9Yg7+.a<i;S.]\c
%(<gB%$U:ZOPX_1-P-BfV`oV(PN#0_sLm,W+l<jn%A5b?8UgS=,LkNBqNAg!N1@?5B*],jukfiQWX#Lb@)'Z"i>I[%siXlTbAn3-.
%GrB>oA[A[2+45"!qb>4&=IeBY-9Y=LRMA-PMh2&:$B(+8`h\KBZ^DL/\Ze*YklPFd)l6Y&Ef0Id</Dqg*lQMX,T=,5"=qI"=]'uR
%U(,h.frT#K7s1?MLm(^M(?aItCU-hp[W\uZR*5pJLkrjIL6=7)M/J!*JL0>B"2kLE"unTD^qM?Qj+CBh(.''qpfPLp#7_WCXqCo,
%Q%c_?Ud.j4Mj5ObW/adpEDgtsi_[WsoB!tK+cA(,Z0l"OL`!$7E<1[Mh1-smX-"*P95<Ae.8CHEOe--NB*.-ST'Y+*LgXmDCR,GT
%)kkHM5XR#ZOY-<`G10TTT9PZ"0d_qI?O+srf'LG?"Ec%h+<iAi:9J!KK&+C3"FG'u$\\G0o22SW@iII/U1eI=7o0qG(E#72Vp_Xp
%`$s(<D8C$h[d^%Q:2.X<R0fHciY5'?6$e)>Am/=Dng@qddKC.jm$1>.&SXYMo+=HqE^5^*pW6:6n;nOn,GnD6M3JE'<,;$Q,i^%]
%2OCL><]3:2BS3a$2Ci#,;&uPkihQ\\%lckl/s<&J#e.lK.k=6%j$[oQ6s('Y"!Z]i8IA<L[kaZk)MBZcGgKip64?B\Q<g5=PRK9G
%&eI-8$LW#$BN>i,P\>]X?kt7_pe`'01ub;6KcFh?"_4_=A55Te`:Hm,8:cTd&k3GB/V(eIG7`Q"BsnBfKUb^);64_$)M\jW-(5*b
%&C7*B/5=-Z+6@3;']P?jK=5/G.pMdG*N(aR_urMZmNY78O^;UYr?)A4==60Q*eKPClk(^"d'3q;i9!6[:8U<[;Xm&B's=S,MN977
%7*(#-TGUP#am^D\fmdS>U(F4j)mfdT=kUZQl8YUP-Y=fPA4[t&$/4BD)_iOlHc6-n,c@9UnPMOsM3hlY6<MNL:c,-1niOetU1*7f
%5,q!a.2cTn*(G&\R=H74"e$0[3$m:O/XXf*(4K6'.?-;A9B#D/S1#:;)b&/A2+3Zd\,2UBSk>0i9u2)*7TDr$fj%(B;2d&:I+D_]
%?Ct5GFL`_dT#JC5jN*o[Lh@%9aV0H#"4?5YW%"CWc;nFKh^L-<0lQ"okMube(GKWBZGH-*MBqa,M@eGH6m)e[Zd=ftFAj!U8t>FQ
%`D/26QdFi_&:%<p>tV2V&@sd1I#;B'6Vb0%C('70ZdfoAG=mcg9OdLQ#O*YH2-c8;MrL]_L(u-O+]acNNU+67!`K[*/CDtkKutrZ
%4DV7?3Bi!2atD:tLfIQihaDDqZI"iWW<o&b$aRsP:eO'/SZToA^/J3W@Re8oKF0a3`NmJa-XorODd5>D:kTqk(6+LgR-qQu<AJqE
%"l^`?W;:1>A/-2\A?&TB,1"EAm9"B@iiZ_M=H^qSJZ*$ld#cO]AudV_lZC_=->#4WLQ5^qNn,Vk)&%"7L0P??'HuuF]Q#]^QSJ9.
%+;EX67s:X=+ppN&*SpjKYoZoJ$'AljO;g2<i=J?"@iUPOf[5dZY(PF03p^Z?`q5hMU(burOBaM9l7ofPL27AfPSInoW5Dd$dNgrf
%84/JR)s:,STZVib%PJZ!n@U#PV?rA4<D6Y&KNL9.gp+iBKihnaTIlYNbgp/qdj],o1$aBO1=%Rl&9%neS:mqA&jrFiq\c:Y!)dg1
%NJ;D1[b8MG']VXkE%#lB1^P.9WH(_3A4WK<$L8n#XQ)b[3sVM'F\l:-LRkQeR(cL&FCGR[:5MtBc%;j*XdI3r@42`77?I[_U/Bf-
%I>V;BI#ps<.BjAX(lK1N\]>o`@#P;*1UA7*<:VGs._&-li<DXWO3s(gW.g<\D;cHq=tu5oR''@kF(-a))DHmZLId$`8oK]`:m97+
%?m$0nhp1i5eoYr0bjb!8KUMqa)+0HPL`s3LgtZF16e3#u)ASt=E/K]gLTM!jI&^Eb,0r:O>(i+Y(;"R7VmP[+`!Bg3`AmZ>i-oK`
%apm>p(bBA8Q":Z(XFLNt7$WMrQ30mjN+.@:382;_L)1lg2@-<^$S!%"E4dI-#R-.qGab+S:kdVr,Fm$&;.3/M.BPTb6Xk#SQ/#r&
%qm+IO*KS^t(eVsZJdF`U-b(9]`ad;-;^f28'tg*^N&T?%SK`>l4cpoBGhdBl/g%#E?4K@>lCbS-%QdmM;,*rFji#XS;_G@1LW)u?
%k2gq<*7QH.Td6fdHY!at8CcH#hB^"+Yp4t^@5O;C;;;<@\"pLe`EEg8$e`,6.KTbT_CG[X0r#;X:^8ggF#Z2NO"!,d.4=4FGg_U'
%d"+j0N.\K0'tY+_Tqn\3.E(DZK8`,>CL`@/OTI8<KV6Y'"GnK2i>kpeM;Vl!?3ruOJ1upKo<A=r1`Nc3EqiaWO"!#aod8cbWaq]c
%A+@E-`E3lXco=a4K;raZ\3kqi2&Z_9h;.5,CG(^bj"Clm;1W$XIEF"d6L[:g4>H&]$0J3RLD>g$-/,"DR*EbhIS@fHN6"adHW85?
%aQ5(b-6npJ"N`Wh#$"nL`l<\dq)LfA'>Qc7VEttd%SK`JE7_.!)QPh2_<:TtBNt[Q;/t_^>)*cNf]>,d-'c`sP']m9.IB&Ca\adb
%0^b9<U%XIK%2JUTPP\<2:rR;7S9Y41MA`&piQR9?%Oe<$6b;?"=96:u2B/P^$c*'N4<1NPA=18*1<ms2kRqUV&Bn`t$U:NKPX_1-
%h5GS^_6=*R'8qN).bP&#K-1D0&$1?O32&S\,4<H*>D7^'PG/m[.Y1M'<-]fg,!p7gFeU4;a",E86OcL;^atJ^/=C<<QIo^$9kh=5
%W=6ij)>0bDO>RX1JOa,`#JqbuULE*s$J?!>6,6m.B`e`R0MhC&HuM6@1TY%$Ag)mD(phIhADdiTG%G]g!2hpq8AoO.)1mq72PoXb
%jXmtHBADg(CSBmeNjr8*h#Cf6J1)DJliiHhiiS%OK',QkX"d^!U^hW%T4.u<?0"Bq<MG?.K/,JFJL8:pI0)pFEY,6=#IFVT=BWM%
%kr>LO-`&<.<gLfAeTfEP&J&?qE[3<G5dL-?_uhK,GZ3FK23CF\XKd,/il$p=6`2o`RR>#a<=DSg/fRf(/e12_7Y=)SRu\lfW+o8"
%DGjem"WAO2Xtm7oqid$83![B-=u'eo\FbI;J1(QpW10o?"rYOeQ,O)PL%rq`Q"VA=+cP@2-GrkS)OAX*7dLa.ck=Q2AI1Suj-3$'
%P`[A=_@DLB4fKXG>=K;tWA]QJl/_U>DQ$PM<H]TLcWEZD5hsW0)ElDW`>KVeW"M+;J!>Q*qG`S(_luPiBiY^1Pt6O^?k+\[pb<ee
%1ub<9`,I3e%3c4P!96cuo([MH#;fZkO]B@f?n@:&opYbp>Tee`g)X3&hOhlN/npVb+]a5YGaaS97$_FR,BenRBF/:WZ@sCLECqHN
%8kB^j)+[K-\8Yp$GbaDY@71bs+)Ot(\][KDBS:2F<W7LAhQ9A=j#@R^GD-"6>Z0D^=Qb;NHU3(kYTbF$?HSSU96c8X&;q\H&4hTU
%rRURNAl\MN@"/WG86Q30"D47iY#AD5jZ2^/:_9U\3a]7k:no:WVc]";aA-iRm,2!(ENK,qe3^Sb(MEnT:"eInk'1_Th3gg^@.4.2
%7]_L!>XJmPqL&Y0=:6H:Amq2N13]H#F[oso,2@7Ja'e=cQdfbb,1`Nj`<'hWgp#KH/3Cp&[!FPs5+<$u5.8d.R_#!K`C2nQ91B.d
%^*Igh:$`#gclmbl5R'7;;SssJ!RG`jA.<,(p.Rc6F5Pa*&U('FY98944*``;rsG*fSLG]Rf7mg3X^PEqGI+okHtO'`K8g*`07&:"
%<b2XR6Tm3N$`2=%#)Gp;[rQ0[XG5qfTG5$[K-lo=Ai@%.m8.+o@-a@:>#P^NOA!iE<(*-&*LK!ubstsKS`%Hj4Hi@p'c5LdaG#Mj
%)s3f<#J]&)S/E5T%Vr.;h[l2NY'pUq8&s?WVKRV5l;aup7;b?(BMF&fb0!hIMC9^Q"&j/u?!Fn0i5Gj^P>"$c;8AkBEQhAr^E5]O
%I9V;BlWEod#fBI#^^O$g'cQh'X]\jq)\T$Zq>_#Q286/XU*um?GB%At[mA\GqeXp3rVS9#i0dPrn.a:dj:kB6Pq9!Bhhn?J)W$"#
%et`VoP2Bh+*[R-7,7Zc'\i6pV3qJMN+@7VGGhF!M_Nf&Q[:t6ML1H@i;-Q]&;nKP]B2V;s2YJ,&kg0?h-j9\6)A6HhA4Z/g=%6Gn
%4!G>QaEYH_L*UHf7C/s6Ys=liN/5nV03_@H!en'(dgR8N#%ipu_-9i^F1f#=B2T$^.0NY(gh'iZ%BNH'V'ESd1qZ(URfmJ*k#%V(
%9W9^YdX!I<m"jPg>"G-J=UniKR;5`,b0+Tap0!,^)jidscUaM9S)_IV4LL8MA.QYG/7BmrKOWg"\q'r$Zm6$r/=@FiB/\!D9TjO>
%CFVnjcE5,D;g:'D0]r>=EKT<cpSJ_3osd7+fP8P5IlGE+Mg/tbko(<K$KMH^FFYoKAEF5Bjq,jjF?a;h%Df_,1;X7TFr8isf$q2M
%E4p-P.e4p@6O=3h.%o^<h&>%Ae`i+Zi:c;L#'U`o[$%\d3f,TU-n6VJ`Z2&.LdSJ'\>.80l:@6G1rjB.4A<uGA1OmQ9=@Trhm=s`
%WZJASi-GrK+*aW`jqb>u]?iRRe_H\7h0^lYkc'a_*!E4H6:S:8Uj6*?*%G;R'E]C(.1+Kjap/424YbX6$q8&)+@^`o%LLGnEk:qE
%O?,Fud.?3^\C\$.j(`HtHbTrZ"'j*qC#$u-iej>=MS]+BG.8Y4jI/)hFN3`BPeP'Eh?ck><t@hi`/8H=*UQ2oHeDVUs1:>OBWm#T
%%hI[c\&T$eaND8uXW:T90%:*7)OiOmS*Iu34SKI-!dd>.,18N4%i;-N;[kf\[ilNj$DQe-2pg1qC&/Vp$H7CK07.a\`<,YShQK9.
%@YRjHqh+NIN/-O2[.Sc2AUn!+2N@V0?<km!:U(0-"[4L.]+4YSr9f<4Z(l8TX%7e-W9"d*&A2([0HW8AiT<`Sc.*dX`&Y0SY<m0m
%5q*_BocWjA[mP3EgA>1>*8kRL:?-6+(K^7Y;p6Id.gZaGI:<qH*#'$APTpS?'HCB4Qn,Y_q<.hOBWJGcqIO:&pspG&UXRECY<m0e
%hs8'$m12*#8T'=G(:<hJUH63@gmlC?HnVYdWOGu[4$TkZjF_Wa7t^[oAiS.3'Y_ABLFP%jKj.qNL_?l>"*pS^qq.BJN`0pL[sf'<
%PL5>i-lj?s))mlmc0`mEG=-4t>B;]^qtXQ'd8QsJ0WmPSUIWII+/<AA#Y;1#FqgP5)$Wo("_,L^Ab[ZJ&,Cp&7[7o:_$\`YbMKEh
%D\D;r5QUTaOn&XqFDGcL<kf$5"'j*qC#$u-iej>IdtBXC'jTg]:#Eu6V`s%Ke/`+J7>QP[;UUSup3bFs[XhCnCi,/9JO[>T;hNpP
%&1?%VI'A7*4Z9c:X4r?RiQ^N9*:>/#EB-gIBd2UoR@-S-!Y+okqPq-%n?X_U1`b0n;@W:$'Ogg,@6t@(o`!^99/-D=Qb?a[hBZ2S
%Q0]"l7`aW[d+f,5IMY$M\=/o9\=;rp'lBkS'%.#jncpXFA=Q;qk[5`?r*uI?Wc$@.-pp6inU_ubWug")Xcf#aDf5&*'hmT;Y<m._
%)O@,S+%/T7RL[RoB^^.8Fb$O'3K:ZH?<klV=XbN'Q$bB@UFBiJ-lVP&T[768FZ9Ej#ZAMcA[2h[GAsKfXW^QrTL1A:[g'N;W9s@&
%rp\k(e-gKWC2Sf-^D!0uS#reags,QPHCd`$.;Rj)lMF!!Ed8I#K't&o0C7irBa<-;"/?YHOZIVS!um,.[(&Q5k"s0cdFbL,L%m8%
%^j.T:#:hR`Q:#^$gA>1>*8kRL:?-6+(K^5kYCM6T&fmWcFV\ZtKg^2$)G!A7PijAMLfHW((qAER)d6*50YM;)<Fis6kl:!K&\ONo
%5S$KXm5]DL2SV2Z6!LN3C;\epZUrrsp#9GP8kMWalpu:$i_5W@7m5oYqajXM_99!6@b.FZe.FhgQgI+:?k??(\)nlLiF&.VILY;K
%oE7^?#E]sY]5BJbTgQR&SHGD,X_HS8pYq(%8kO'0%ZhZ,QHjh]d6=K@7%9#7nkj!WDK.!Og)q4aCh>c_6.>Pii/S4`E9gT!2]5=[
%Ef^/b5PV/)p>uk3lutg6J6R(QNViNX>gZJAWPEU`1FlU".(&%em3j*L.>UBXl7P"l91m>b'PY<Jo=!cg/73XGorAY]/]_(CHk7V3
%=fC$/K(aY;<!Tq%S("m:n&6#)Q'@Y<QLY4=cVbQK'H2$rUaHKtA5^:cMBi'"Yq1a94pSG<n'^&4!kJr4Zh:@1hF3/mPe,]n*#gMm
%-I:fad-PsDD1Gi32N@V0?<knLoP+-E'$5!L3Oi6MpD9Q"?.r,$IOB.U&\32(!C7&7jj"BML\phs)G8RIMHRVB_Db>e#\?`]@gJ_:
%l-RukX\K[IK:@k&);IsZiaSM%8IaPC6L[%[4qcA)![G\Q-p5=]W4F/j@95PO)7[q:m3$db[`/MQ(c-7)c!CjrWt"aYTO-LsK_I^W
%kA5!*XO@Wc_6(`>'^k.1D)LXYN7<_>i$a@s*%2goduFK=2AAp:PJK=GbrENKN<i%s07.aHnORnKorHH/N.rKdgN1ninC?6Ep25(R
%a#@4lPIR+L`Uu?YOPj+_QUbLG><2!<$Lb9o'Es^hUe>Y4#R?%9Eb2!ccjn+<]sY\\5hWF8.L=p"15hau`raD[e3dG%ZoVKk%;n$]
%B5ff[Mi2j1*[+aMO?#_&_Hi:^$!LZqL3g?:AD9h<M%)CW>e==/A:^u'#J@WOK.3CKGuqH^]uaZNbPpuRDPS<abq3VpG(F^ZX0jsE
%]@gLqch"6baRQ2J+spI<J=tas2@rE:]J^Gq*@N8@6/YX#XW<)e(LOVZTUfJ.in:.PDj!mW1s.T>3<V!6igFX8AF"8eF(hVZ3J#q1
%?<kS#MD^DHU.IS^(X3R4`j5s)L&uB>N`-j.#4)LnYn=[k]*n#&ah-+DZD+%-^t,\UD_db.K(aL%_72*>RbOOdmm?1;=*&F$GOrMX
%U8R*gTMf=>*0-eNR1lNSEdXRsUSpf9Bae-"ha"=/<nU:p4@I<2XZ9@`B+"C`Y<m/jFFTCej+Dtn<nZiG\HVC!m\gV72)hFQ2rBND
%H<SM3;oc"qd07qJ_$@Z<ZD2r_n9#%oOQljT.9<FME'PAc;f&QZZ5q$O<KK-W8oHO^fOKJIqRX.YJ7b\uC4f`Mbo,;2p#9GPf!G`d
%P-t^CC0dk4KgEsfhGHNm;a['S6+]Ji;$pLc@\I:i+\fc/>XrYZpp0Xpd$p7V).`42+KV=q+.?E\hX<eo!*=5_)L(ed\>&0:D?fj^
%o$-Sj(:.u4S8kbth+eWus+Y@ejFB-=Mkc9rVH[?/XVn*nm/'`.?cj*>>M>e$j[*ftX0F\agM'u!a4$J9Ohi*]XGg"5X1./AEA^/C
%-D#P5i?G)rLt$5kZI"=@BeOgK%AoS\]iRMVV!\jgcY\_O"a`A=[@k4^*L4IC`o[]tVL!)6bA$>_k/fHWYoAJ:%%_0'!P'C@:-fI0
%It5P$dECGJefe>6m&_Fh-^^O.>D:pE0Kk*,F%DKu_P+@XR_:=mNc$a5Vf4THMlV,,#7'E^Co0`>e+J[+Zs8S08h]aC6U<'@*J);/
%-glLWiRY+g#_7M/YCaDYFZchEHApD9N-CVs%aaQa6Z$eCYrRHKWEriRe$:qNM'u%YE)@Ju30T7`f2+`hRk-Dk\9rhtQU1R\NbE2O
%^$O";e.qbMX^?e=A2M!Pl-or85gn4TS(jXemm?1;=*&F$GOrMXU8QF97ZpKL)M=KCM9e$O`=7N:GugU@Z3GR7"4X)$di1>[L+KWW
%EuF>.'EY[k'mc&FSqGborP:f>B&&m1TWR)R.KeIpS("m:n&6#)'oU3OGnMEk8']1fojh"m3sl5cSkS7cU0JW=(F)(i)]Fi?\\IL5
%TqZUXfm=Ip9nlQXkpti"K#D*jd+3gB:)@Yt>E-lFgeIJ$@\-1[:eR.T9%\e0,O\O+\@InaP`G&eWLh]bG5_a^k_e6X>snQu5#J8#
%2$[tE9H79O#/*Tj@in<(4G^Ra[KP%6#&X;[:`82+DGK5@^)'lC<$Hp3=u[H8Ot=1-O]s-/*JNZ;=1CPu[JsF:mLb(48t*2T]b-JL
%kq@BrK(-/L/b/fS,"t^nY>$T^mr1d.<3r\em(<(!>es>nW&[h)<)ZA/ard>"F\Q^?l+AXh"#^nh<UA)jhBY-n#D]Ml6"XnKn2Lkn
%cdo-`GSRX-HROXS"$$:g\$hCKkm#l"[`3+jpN+$XR\q>@ncSZgk#^`2FW]h/ATnj&lSXL[Kg(7s";Z,+H3^f#1Y(>#I0<pN?3T;W
%9LP'<a,l-GXCAN<*Eo!de-<B#RkqRDlG^_)Q%P_DGJ)`S$DQ[u]:af8NZ/>God[Zj&.ju"r!4$#3'3"dP=)k8RgW'Rp6WI"L%$_#
%^+b]:p>FSG4iKd0$ekG?TJF<b3Le%eI'9Yc4r&h1gJ#Y#GcMrMik'`$Y0R<,5"HhqKtqCH+L'c0[B9aX6i33(#B,SF0YNMRDOh]a
%=0:uWp)pm=>kcebZM1r*3kX/"SAX_n0<XE)-j6a9K]I(2>(u#[>YNqe+`/X#:hW`9=mG/kTq8Z2qhCCiMbioH2$[&HM_BFl$GBk)
%\:%XF4:#Fl8m??u[/)q[*8o\D:?00<0<XN,49U^Yf4`6\41WZ_T($kt%,.+_KZSaA47G6L?i:6=m\e7@((+F!+X6?6Ts>kS\iLSe
%9h%HeH@)_!(V[AdTY8epjk*U<F8U4q]ss;>Je5SgF/PKPge=9A,U7+a0XB7plN3csl&ME]G19)X'WFN+kV&tkj=lW0)oVS0"E1"I
%!]36uEsN"cg$anPB^^(2F`a[l220eQ?<kW/#mbFq/>Z"Kkuok@]7@2QmR#kMc0Dk3eK$"rh*=-h=kumobW=&7em(YDh=S#IWt=/_
%;X/IU0M=Re]t"=6rU-ToE&BSPEAud5.s`NH7:t1B/1TGnh4S\lU35s@WGa3IdgOKba#Q`U!!RUClHFFY_j,^i%L9H#h:8\qD_ddD
%6T[E_OZW6_g4l\8-TFW*g7!)mS*\,U4Hk=]B*&_`6oS6/-l3ID9,:#H6NK2ePX6EB"GQ:U;W?qpYb?K(3Q\nagu.Wam[(%_L#->s
%NQDjB#Ec58[R5*DgA>1>*8kRL:?-6+(K^6&-Gk0k%LOFJOAK-_Mo6pNm3lk-/i'.gRdF8h&CPBQ8nLSUApa#*HZO/n+5HYJY<m._
%RbEW`4BUQ:&.d#;B^^/=F+C=%3K:ZH?<kl6\HiULbD`1aY[rM@/)&s4?8iQ<?(hK[TT$6Y$N^\KU/#M0)\2^Z%G]-?beL5s-\Q]+
%+N_YE-!QsUgRC8if'NUln7HIj,jo8kEBVW9,D]SR16($r_(3CLZ(;OnX*mJ=KuD2MK-:^qRX0WJd_`Z=]7peu%l*6oF0OSQkLo]3
%M!l\g*"NRWESJZ\SBWX!mrq9EJ?-4@NP#!m>L@O>)F9e<6K2=)X'e].U<)hoG8/JI@BDs`e047A7q11'1Ku7i""PEtc(W,]B=@Y:
%M!nA(\!Fpa9r.-h\HVC!/p%SB2)hFQ2rBNDH7C%'1RK"4%;3LTFH=j3AOeI_.:<996U4]5,;_$'C,7ZQM@[P[*.rRXf%^%$kY4NF
%*V9$,#EbmBM'utW)mo9b5\5IMF#K$Tq-I=R;ZV_YDOpoSOeQXo<g8JZ-A4'P'Y6ENU'3V$iCg9]Ifu8,G]P_XV&[J2X$U_[Q>rP8
%_h/9cebRSI%aAl-BVSdkbphGmp#9_Xb"-!j@NL[6oo-,K@b071N41WmfE%6;Q=baR%g$B2S_-7j*<5`pOOh=GQb?a[pb%H*qg*L+
%&CW,n<+^25[/+(l*8kRL:?-6+(K^6.<2(<HLB4SlgR`P0bCgF]dT]FdPeiB1=sH*3[qfpR1,-RS/$E,l/@pdAB<R3^<A4OBn6!0t
%NiTDgD4N:u%W40_B5fr]MbA=F,NZ2p.uu%C>)TBj-nEOqPf%>X0$@OuEe'5]7bG6rg2e,"DTuV9JV\1A.YN#P8(6Gd+AuP;I'2UT
%B_K'32ScFTS&YDS0<XN<Qiu/gA_o`*<f=8V.-U!qNad+Do):0_:\B6gMTn"]@.RbD\&LZH_,tTg.eG&tBqZUj9ZYk/BPg+KV\?D1
%Xd8,Emj<@#.8T%M(2,u=W58TPTQ_8W%Qp/6@O/YWr8r!;6EP<^]$niJ6Xf-Jm:C2GehQN[frG*k16P,l3Zg\2_@R2//SOTn7s/XS
%YrRBiM-aH/;n3/YlF[ID(<+/,Tgbh+;%VcdSS&5kA;DfB#dl's@kADmI.K"<CB5+l^?iN_`-87Cs)/FV00OsK[cS@4pUed4^t"t"
%ic_UD=7]B@K!PYshZgUWGidm]$Jgsf"f*4^0)Z)-ncjZc;dT<N[Sl3QCMn+A%]oKWY<mWGO/nmPDETsmE9?=dc0`mCGG0).X1:6M
%]D5c;d<I,UAQ5n.,`DM79bN%s.%+P'TbpB2r3iQGk"E::C6d36-t3W`I+ar]#W??O=maf`]N\2p/+.(%%/t$hEuVLZHU).mX1:*I
%]D5c<d8R#XN5K5P+!I=Qgl=+RfY`_Y-r%,M7-#'B!QpS5<VOX&4/2NDk2?*(AQ>g=Klg<E;u(5?ihZ/oYNC"Ap:I"V^o]Vd`r19<
%Y3;ia<*7"t.DX]lUB:t=m3l#3((M1],23/,>'jhT0Z;\BdcR9.>>P,R86;Y_;@a;4HCe^;f&e<$k]]O>J?udDNP#!m>gY@LkeDOh
%>JZj7/\%.PQnRkRN;rq;?hsTB07NR9s$M)-a^;^YikGTj^W4)#Gn)c%/<C+MgO:!F%C45&W7$_9q;@$8I.\T]_rtWePqS0tTI1$+
%Sc4A"_hp1K8uJ[m#17<0AihEP]G03jJi`\]cot'oqJiX2)Js`p,V%^qLG_F(Qhi3*e!=.8)aYG%]kIZ]I%@6ABmW8O'<BJF;(u*_
%[KtB0X]"ECOP!mYk"2m?P3c/8\s`)f82Xe.Wd-<%CYe/-(/'Q%69d@2*-?fGi>p4G6_LMdlCea1Ve(1r"fAUok.jm50oN2[JYbHA
%XrQ*<Q<9'aZX=T_&7)Q8g``(qZPOM;$VsP(7VkA(P5:ck0ec!q/GP;gS%bp)Q\YP?^3`n:?=LZ:A1^%pZ[Iod#-:.t%@C]BTrhq;
%l%I8A8<u#7W%Y6>)kaW.c,N_Yr9-+UBsdF;=[3mW0VbA@$i)::0cFLljh"NG8YY9Uj+PJ)*Gh]#!0_q]CkIU=pR``$=<s^VFNirK
%P,1b<)hcE>Ln1X+%3H-JNN%Dhat9ns@&$Yak,UmBOVX`lOKV3^jre+menfmAS-^>ZD'l1iiN%dLXEr_9.7o5N].q3/UW4S\(i%Vi
%An/i6:u6OMQHiu6\f3]En>iWlEP`$U!X5;;1D:QRHX'A["A`UN^tu:k\h,f6L1'&%H'QT1\Or=8,)O[.E5m1NqkB13Q[C4/:NJdf
%@U83-WGN0VA<E,Y!dlS7"RXPmnVD?C$9C#An]2I#ITBrX7fn6r=<e_M&YB<OXH3Y_PJMW26P]Kb_RcCP6:F][p3iK.$f]LuWjJ(3
%NMm(3]_a"a'D$64HI$^`]jQjPD,:V=@Qf]egPA.%Uhhp%(Le'0K,FE@T_Lrr1_>h?\n7nC<L05TVPke2s!e_W'M35'<3gW>i"[Mo
%qo9KcMboWn&J5h@(\1'XOb)Od]S_Op+g25MC:EH/P@U]t.<#bI$'V6-pN<Un$#O0de5?H\_s=&U)Oh6JNn&$GD"3%9?bGmR'N`$i
%qr6^Ms"'2T'bUFPN;]""Z1Yh`aNfEt_CYXc]Gb2Ic%rN+^V!-;X+OttJis#pbgsp'XKsjB[20Cg<Ns3@VKf*Q&C94qDkt-+T_6MK
%ok`i0EYk)4eA$9P^ourIPP'[IjGA8Vg\NqMIl(FrqsCnFL9@qP/T$SlH!&!e]$Q/53I!LR['<:$mBDK6R5Ocmdet^MY2cL]$Mj@!
%;_;p%NU+*J/:KZ?^^,^(X$tH&DP8s[NWduW2=;cV5$eaTX"<R;c.3Y@h5\MPU7HE?`Mb30dE;TZVcUVH_Rh_?p"Z"SD!c\[(YA78
%r=,QgRd+lU2q1k.G@W=G?dQX1jW=8<4_mGdj:)4Gi4\$:>0&V$"kr%>V7Ajt^O7-S\0eeHhV*90c&2sTWihe_$G#h3L?butR=5pS
%`q.*3?O;/<+;6ePbk9oLDl^8L=gs0G$!o2[1g8/?+e4MhlIV\WA$5"G,\CidZb<l?k6XKBMs]i@Tsb#<"3bnV)eEAPgJ/EO4)Qsa
%ODRl'[)pX[Ck5W:gH'6413=JK[Imprf+p-3l)CgVXJ[dKh'CHBXe(ggZ;q4:nXk7<Ynmh(J,(%>_MIR4-!.=YOUQ+2MjC5qgc3eO
%+km\<(eeJ^E!qJI\@j)M5So-985<&qdT`SL.2_\Kgq3h)a6*dh<FP&Qb$elG]$o4>H%eh6OH@W$Pli>q!r^nN&H^?$g0Sls?*LQL
%Ykr0Q;b8$Q3J^$u@l5Gq0nS^19OV[q:PBsFWq0nWnJ'-,=D>m5F:8_)c]X!AB!S7,QX4?t$Dk?_WBW,%&l;=m=Ok@^C7#s)dnM.t
%]qIjF,&Lc5N@7D>8N'H,L@!(K+upMKr6PpVZ8V"[0<+K+d2llT&.NgL.(Q3"nD^@+6q=gTLka,NP:eTU!TR):T_X:P28\a>'K)_$
%$sQ,=bU67H\R_C/KDChY$faL9TX!OkB-$WCYrYGT$RC(J0!$l$nXoI(ehjJ'6^dZuh2JPSB9>^*M].Hp%*B5##,!fR'Xp>]i@F[p
%bit.61N\OnBbLu>(9:iP<AF5<Ib:SjEb0rnNjsd*7>@6g)dfX"4(<nQkq^qNn5for9,@#N$s]FS`@!SR>)Vl$IT71+q,$+8GpJf'
%<JS8Ubeo.alu7''j+(,C4+V'q1*[1\:cjTuE\)-:!('-QK.P>pk^0hCWfulT^X,S-3\l?uML?19E!CI?j;>Y0qP;:X8bQk[*]qQ5
%)^N2hA`rH*0a.LW4o'2Z!'aJ!s(#p^KNZ=0GkpU]J,e=`^])9?TD\@hs6T.?\*lQ]c1bS=h-5<chh_/9W`;j'K?4!DBW%#O]+nk1
%!D"C[A#JKba/(3+J]811&aE0O7[@2A3#9FjH#[24XGRX!Zjop#"e&GER@c+s8.FFMJ1\Wt2_`iL(9$D\?QKXNiX.kL@p`P.m'eV;
%FI7fd`LJ@^mt24hi[9't1(c$N)r1+-2i4(/?ZBV'V?:M>N7Xmtc=B6M4;mb`=c#M=s&osj\0N]2V(e\PCP@;N#NNG+<_jI[Qe1Le
%?+RpL%?.5C8)7o!LUTZ[J)M\FeK#>bLh#Si&([XmnbR59^h%$r?>9]qJt'!R&Nkb?'M.hi&4V8F0"'po1a]"E84HLgemEX*;<.Mp
%/grIj*D$nW[B0e//_';!IUQms1bSOi7>.dp-o0U"aB3Ts1"]\t+\WO>_'';;\B8;%e/d+FmPcDp.ps-,K5Xa^T3$.@cRA1GX-Pgh
%HOGm7hSMMrr0EH6QHjRng?U(lGGl'CXY=P6%B]fA3E2II!]f.7>\\*4e@>&Xp@>$M")O^M#)HIcQ9VAA%W1MK<PeV_(4_!iQFoe_
%mr_OY*&6!/8#<HH<>@3]/ocG+\f67<=$V?G[):'BCMT%@(VoAe2/f]/co;6OV9!)Ha9W!5KZ_=Fg?$J0VhLWKN4OX'lV`cTd2Yt0
%N?5*dFOR<NS8i>;24+M[laPRj32\>9:ls]Uj=;$"8:VKQ'A(r"lJ#00-&Ti(ZNQbth#b#/&-hlSL>\'A_Mb@B9VfJUj:blO;3r*!
%6T>=,kg7/s$imiGW)?-N5a5ZopT=e\dgod>(b2NuAm/C]M1MEjcKF>$k9Se0UWk(8S:WR?=Yim%!PNA>TtCdt2b-/9TFlgPnYbV]
%Y/k+s$\!>?,&R6k0+*LB4_$9eXcU];pH,TX,s/rZ+/CNXbQ.Vtlj+;)=Us0fMtg;bEh7moeSjO?Qk,2mGY$LuI8K6d+C?1JoZH>n
%&?HAI_LOmO*2`WB[+BM@p&]\EUh:VQ1KVXhe,b4"/5W8<H2r'kOP-MR/9I/=/VE?KM4c_.T$,Ba+$^&iEZ&g)Y1]*PHUEHd+R02@
%WLBal@>H$X&^9)'Lo0kf<Zj0%b&^u!A.X6amPP>+"Kaq!`a&[dibo+23%6TgQq`/BGMHXn3&i8VO1Jc;TM*Mr8[AqB;F>\$=Y%5e
%M+MAS1qjQ9Ant5o+-n];2o.ii50X0Y@baBFXI&fWm,IF1<.;Q/40'c'+kXL'9`e(g'-gLB&V\f4l?u!&ZUQ/E@d%bR;h42$:fWR'
%[13Is0WNgA8#)@hQ6)tXfha=\.uJ7)(,#9]3)OQi'^j)V:R!S16p\6eaao"aXV2t9?Tk&1%[?!*=AS`8XI\AR-I:/Zf"b.ClOQg4
%8iTK1ZL:r@U*uIl$5-2.fo@"n@"=\Ce.s=+&&B$]TQG;W1aok?NtH*:NmKb`o3F^$mOMSiSd$IXl:*0iKnB0;!\H,WR3(F_o"i-p
%.cK]G]Y%WDMNE1rSBl>8:2XtU=:UMu^X8:'p;!L,5EqCCeE"#A=A+Pjp'\S8+BO.9koB?m<7\,.Ytt(AQpOU+9lR$62!BUUObBo3
%aA9m2q6!6\BqbW/g2RB0Ec.ZU=!"#rBZ1"O)D&5-S)NJ31E#'crBeUmKdH9jZr.4\3$A_7*LET<<!+$]C*m%T0E=E\EJb'_"">Xf
%eq1'T5c(Ul;/?YR/so%gTne_n/MNj&U@N&P)ip!r7c1H^0F4.<"h'X_,lo*s[H!aLZd+kcLi7Yp15qS3apJc=;3rPBrC*@hM>$%(
%U'=#+&Fth+f73taS:nVu-.-j6Z2U->4(kc7d.WJOg@Q"mLjJG"!h4)?K'O&D+fisj1Va6o3<iH';gu/_AH=OA\"!L9kIW1a&u/35
%OU&p>Znhk@]gHbt'1:7Y$@d7d9PR8h(BQ*1>lZXuIJ#+,)]2t]e1j4uacKg3##l%F9NOeV`e!n1ml"`eTS:Ma?nq6$EF*ge9&QB9
%.k'Ua`a+NlmIX+Bq:$&QD-LaI6,s$4Kj1LRCOt9G?ofM?80:YrqYISHG,!Wg74E[T,+-I#*VH:;i$4UR>5jr92/;o)_pUi%L:j=E
%T;`Rp2d+q?3\6>FTXB=U=%$YGXB%]m"oF,&f>rpa4+i$C?jbiU=9<P6U%Rd3.s==e)UuU9MrkRa&W8cG$O?Ek+tW^f7h.K>#FFRA
%4o:W[S'%3'9nNS9"f+J+=mfm$W&EfrU,qf_l,F_VW\QG!9;E@3Y&@W?!U:]:J?oO=fKMlA5RC>o`4Dc&6l/D$,4TiNq\-kbi.;'b
%!GL7b=eM?S/%dS@LES\nD%A%t-`0rR<,5Q^1j+r!,*%oW"ULH\BFpgg#nJbF(D8qm&d&qTAJbeh#:2V`lbLn=::pSH+c7LP&m\6H
%+g$BD"-gLC)nE:p;qukXMk&S5+aQrchtKq9/uY]IIXWb_qCFKrm=PI4JS&3bnt3j$=<0?p[b-^RB);ZedG#.0AqE`Bd7)g]\FX[d
%,r0Qn?nCTd%L%N54fgJmEp<91U4*V,gl^SheaE^sr[4C$c-<Fp<V+r_bao=!JWJZI)AEMoQ5c(Fn7C@9MUlUAK0)$?`J(J,[_Eo3
%Ko="JbWrm@?rCa>@r\[gQR=8sM*QEmB:EY$!*5,K?k]]9K*,9'57%"VV<WUuCBRrhV5A?[*#(&R9^;KM3_GP**eu#0p%\0N_(6]0
%&<B"7.JS)hb*i59J:(8oJSsYi:bZTSMVbX)JP6VC[1+7J"]>sDO"oNZ;`]g<$OP[P]U_'<,ec,BWAHq=1m)4$/rN6NK*1_^.sbA0
%\0<>?pIQ4>81BP1<QWQ6X@+I7<.ohORV79sZLT;-O\DDAcpkc<XS4ZH!tXed1Fl>7h\*-E2VjcW_9O<,li7Xf*-c:06(E`m8@U4.
%^B/'=E8]a7&7M1<FU#FcQs172+?+5-/Yk%q5TqljFBu3+36;"oM"T([HK`Sc"C4RA'S*JmeV5K)W2mF1GZ$B=XD3..;4%@3@AG10
%]Y<*`jK.9WE$dcgie5kVZnMfAKI[*CJ>^bf]NNLf[8`S`[9;!?iZ=$[FJotZDH4X*.LJ/kc:tsliTpho7dTspj!mIS@NL1j,%coX
%,*uFXGs-rt`NjNCTmjf_$nS9"ka&1uG`"1;?[:ua,mIun]dFMXo/BU%(rG[^(#c3t>WQF@,Ke,+.a\98$d<W,=VY,RPI)Hl(!-PA
%Fb1/8WBp3nR"O%7GUtg<U2ZJfF*#62BE]IDiJXN-biF9bh6Q9(W,mA'1rtD?65g\UnG-?(joQ;)(^VNL;a<Q803kIK(u7dfTt[-c
%A+.Q9GM$IkWR0:o#7p.0OIq4fAtP-9An5l@1:*X(Cm>R$H?KL3]DFKb8@N8loJ<$Kd]64f<:,B]\eYL1mQTo-^0@aUABUUURU!-H
%SYqoBK"%E$F;U67B].fcU8^Q>Ttt$h]P.@V)`(M,^K7PZ"gGJ1:Y!95aHe+g7Onq\^&`qb;LQs.;N]4f5*nnW+he(8n7:V)">n3&
%6:j>a./u5gc/H+TMj,R(TSa"#Np!)f8_"QOR%NGYMm,Q%CtKj18]j[S4)+F5#m`u%@]d7#Po*sqA#6+T6mYAl!6eZT$[Y0p=:+E"
%4m$E(d#a=8Ge2l56$4Xs?T8EiD;#p5PbY7f5b!on8Ga-GG&g`6UZ`O);An_'6cUSdq+j=B"6BdO@XFroU;:j]'nUqZ%HMjoik*PA
%^5SU:=J7J;8m4l^MJ<!7euKJMNe5C\eC+0pW?mAW_@d2"@Mcu0NU0A40IV?HeK(gV=481WL8L:c>*eB1lFaDn"h4C-)SPcUnTCXG
%,_M\OI2Ckl_=0k[$,7`MD(8C)CR+c[bLJ7M+tF1Z4Wo&C7V3@f;6=I?f'#OoB[qnMj=F,VK\6RK:&sme??*f\jhN$;K![H-Sf(?p
%!66JO[PkI$PpX)U+XHBS3>d1r&M%BN4S'\t#=7WJ?Zq2QS7nq&!HdU96<(IunR05<!0'1T9O]"57OT%WSRFl)0-g:FGXUL[!Qar8
%LG9tgL`E\TQ`Z'a;jeL0)rqpXcK?Gp57eA")d[eV's`X6HkXU*81@c[/9"T3l&GLhp6=[-l"\U8Sqkg+M7XA+#)=L>4?H[$-r>XO
%)kbREh<^)kl0p:(LBis8<';B<XLj]W;GnDe`kN!nCGn:I8do?H8l-Y`hf%M4a5edbP2D!H=Bse8Pc]HO5:B\TD%]G8)PO*;'=g\$
%<-O!8(Gf:gYn$L@.^F\C3a+b"ElMQ_CVk-B#OQq@j&qU!1<bPdMhQK]($K,pK";n)<gAlSO*^PR6>_!+;i$W`,N.\.0`eG'24<;b
%Bik\k3`3j'DqA`Y`L/'+i:WV)agkJHU_oQn_246ep0=h0:lb6a$?jnL6;pFOj.]fHNopPJ'P:9_eTsY4R[Fm'P-)X+''5d:l9`GA
%NAB.C.@V3s:aP5,#LmEN=&eR>E\ZK?0eN3MV[Ucs]8c/P6$c9Jm%W`5h@2L1F7cU\1_#UI)1ODWL29E!/9RXi6\NuD4(hOYB%pWS
%(`sXmHC=nN3qb`HIf8ZS`P3H'W1M:nFJr``ZRh^0#g<WZ=p86(SonD2#.&R(j8]mo;g28Sq>V_DqTtt1*hM6KUt<>R6DuV=N^.%s
%'=;SK+<fT.Y,D.u$U_00&*@QO`UO.ojK(u2+Bq]44OK,:P,WK^4M&&EJH\Dh=6'qa*++`9pgmSbTdXZ5kH';MYa&5Y+*LK!ELFe6
%%PG^$^A>nj!'ZE>o5\=@D+r$h";5)\&Fo).=qJQenT:m@^.'q\7@Q:s#BTgejD+Q"TL8s-A.Ti_rf22T5(sXqB7nU6pfa3Vi$B<I
%QtTnqefBNN1\\NCiitPH43p5h8ZOAHY3*?jFVZ,'eWpa&-WIcGhOlLX,t,@j?2Lf%T[#\],XmD8FU6L[]/=a^)@Af"aBLYu]!+:6
%o/6KX5;T32k6DOp:QWXUqTDHif`9W`YbQhp_KDONcNOIa2@-qPlFef,ZW(jl5t#g]IGX0S'4--EY+Z'Y"sK7K=E(JpFJ`>?P`TL&
%GO.,Bm-UNZgH&K!NTPG?#Nr>M`@emSF)q#UE,chg-R8C*4\g^feJWP],'spD6>-f.>2[F+BH5#;:kPA@O"kd>'@K6K6>AFi7QksO
%b@kqaaSW8q,YT4lb2=&A%L-@l+G>k+Ds7nd1Wbae8Pa\g&k-.:;7_;4A6'nCQ&m."k=u-^3<*qj)B14L&ur[>&5IQ4l]*;/5XPN@
%(UV0R%Jh>9j,Ib8-i0hdnVu^J^5dm3;OVrUZ9^MiD:-THhHesINbF0<B'TT=\<E7SF>O2AeoTo,lE#,coC_K7Ytbc?7rqqU"Q_r?
%ematAH9bo/m=%EJ([3LWk./[S1Sd>H)ehnA!BggJ(HYT8.si#<A?XTkmC9V*eRIVISa9d^?^2!_FhLYfnQLp[&=M\]B$d]G)FH)F
%Dj1@"mn2rmrg_<fTIb;LlW2ChW)80`O'@Qndgs5.SoI+(M$NhWdL*cO=$iCj(4ciAHQX-,/]!OHAULX9I6EM"Kt.CBb#VtX#T7fJ
%#a#N=)Bkf2=VZf6TFeK]4/,Q_TLGmJnj\rB#e,*>NI4600%.'^p#.3.jCsLam5fhP1;=Lc)<<\bb[fU-*_8qg1/U;>_CQ8dKEMrY
%LkbLsnue[J&B3Q!LpinO`BHqg"sc@b8#+EY\]fGe*N&&$goc:1ZXS1kV[Y4UrsHJCJbMqH<l^;I3EYTG6AClK;kb>l67KM[JQ$(]
%^!nR\*g40>CKDor8YP),T,I7f!9\YM_:/uO"OsgFQ7^>^iYm9/G7De&`j,dXh!*6RQVYL2Q#F0la1h3%5.S`WS_4;1^(,sU0S+la
%YBNFA1&VT@"sG(RP'HFG+cg*Y$[S"\IIuL\6"U5Hk.j^n.TYf'jlP@[(t:)?(#`ol"8?9);A'Zrqan5/n?tiMnHjc\f"/\blCO++
%F6E$Z/".tU2P&>hPSUTj*DB&]N=-*';?/STcfhDTLB:YHG?X]LLjW#Sp9:QFi?<oEJ*T!KEDZiWUE,48EQc5;A-;1;,CAp>/s<fp
%=D<"Yb`]*gg(T;Y4DhEIcHrU'R^M-2*"N<$/(mJW:#;.?ZA/Zh0F7*85e+-(6$0$=>-cW-F"f-Hb"hAq,ge#j@L7A=P1E__)PhI7
%S3E*!W!l&/"p'm_C()44j`oI60ZXRbM3+\@,GBEa*^hV#%^,(f6>Q2Kk(:<O&@<V(U4%,;$!cOT2lOp2ICeWM"biQN+)Jn%9]KsX
%50u0%i6G#7T^GiY(huq27>TaH^ar<4>b/5<lP/0A>/FR-2gMfaeo%)&fuh%SeeZ2Aor?,ZenM74*H!8GC<OfW$+/T`mt4J*#@iDC
%T!PD5XVmqjIX8LZf?BiS9U,b^d+,)n-CEc&p@.49$uhm_NT?d)GD:nI"/(g)1h(.i74>67YO$M+"K\1\M:)qt-gghCX_CJ9L49#-
%p.F?^$VDgnUN&T$UeF:E\rgS;@:gqZ`TT'G/j,DaMF9%Zb8+=6UBTZYB+\ud$EU[Bl6b`j[\M#.5bb\Zi$;iXh)0W2[k,5dAm[J"
%:&i&;GBTW8VZng@8OP<ojL['eN<HjLUOd&?^,&rK6dImqYK!7$8ZE&p<*R#$q.X8lSQDsT8J=fF&bs-F9gX(-MGucu=VoO:'%1tk
%0YPMSd&ZqoCR*mEP06`VnQtQf>)NOV'`.%6@$_dprUSdmC_kceZX&#i<12'(&>.gU7&kHPa3OcFOlArL["f^c<KHE1jJc&%`e8Nk
%n@7EDHm>FQ5)/H-hbk(X[<Soe[eXZ[Fm`dtojBYI6)"Vh&)?a#LrnNmQ-[VD"Y!=VW+pX>Rr*.bj..X\08V]ekq+hKLB\U<B;k;2
%kC"P/<hSKs<[6t&Y&f[,,8-74So%/2JBSU][+ulNJ"(h?JON<rm`OOYl?F5Cd![STWMhPMGrn,*T\N(bEuVKth*;o#'Psll-@q%4
%]l0,5oPe4k?70C^?t\etkUXuI,Y97V[#1H6k&n3>;\:TC;KVH-3sP'YJg_3OG=pPSVId<N;f^h4P2ma=ess_>;Yjd]-0RQ]qh8G@
%EDud1'rI.s"/r0E)%Ec:DQV$m4uK_j[%+"@lKG]G'Z>]%%/O@#%XdW':4jZ4"Ia`O0!%^7&VRt9Gto#Vj<>0WKU`K(CK4E]]E_3p
%Q;WfgX"t,Rbf]jK@a0TX$lmZ.T>Mo$YjC5Jlf'ZgYHGUVe5.K'98HK'A8_&aS`F,DKRfJUVkQL(W9&f*"9F^1g8tYT)3cjKCZ7>S
%aBWnF(9u=RM5JL2MnE.J>]@AugNBJ.4D:M'gEgV<1.QW22Y]W2TjmkH'ZMFE)^C499Gof[k?af&rlNq!/nf%7kf3;PCMQ,a3#*7G
%l!a6YLIk$Y9ZSA=2T@D0%QWjn7GVZTT4?h*;1htG)t,,7kf&cU0[&=:;?=*3H)bfCR'0O09'lE>C(8!f^U"0)k4k6a^=eg?f*00`
%oU2@\A]NIn"MMrd#n!LAoi'qS.duBVjI?JPW"0ZDr:nOB6JVHk9Nt7"L4/K-?aAEEl]U-9&B\+rV?jcFXb\(HS.lF#dQFfa#\hCI
%A-`ouW+bTLC!c2nLlp]\k#&*PWLh?8g6b;po&67`^5I;TSQCrmduf1mK!t&&MQ$hN).'!5QUUh/;6I(bIGE*=o)u7-A_]WCF[@i]
%QDctN`)IR!4tb@\C/\T-@r+b=X4!SEP_)AC*Fsh@(ekK3+"Tt88;JQG#US;aEK]$1R:tErC9(5EV+/O<<i[Fd]=u\Q2nMPj;VJ#6
%\_gA=)#Ws`rH7Y!4>d[V@XQJn]9aEt;a(-eI2e9H.57iiT;O%e/1)7g%:j<0`koo#b^qP50G1Kk`b<$V!bS57MTj'k9blkfJFod'
%-?/CF1mo.T2GE7>o7eP*EeTm9[*].a+bJ:=T'`TmL*YQ9e!Qb=V6qMH9?:17'=2&*.h#4iRY4?r.*]^^.B*WQpnYI@(`J@Q;R@ud
%"n?23:j%[1=\)$rW;l/r?GIOG:"$\6%Q-so!"12q$lBDT/LqGFEh7H?g\&E._"=I3Z3]`(\1.q>$.ZL&XZF`B`+0"NYi[#@.$::3
%AECndJAitaAQ4mnYKClcjI8Va><)'pN;e`iP_A&mMhG,jNr=s+m*:_OB)-=IVu_g]d_K\?S*'"q,0n5:DP/!"0PREg-aRnccepb,
%UkHGO7FUV:O^8`(e!_S4#g92%91*.Q)G.5Y"+&-N7hl?8Wo_o!k6R:Y1e#@<8<CR_a@4kN4XN5k_YPfKpalj!K7"en9gQkc7(U#I
%*-W]Z-q!LCYP4EZ!+93C4gZJ13>c$*!,DldCJi,_)=\(i``,OXf#S!pM=r-!>mf)c>!3WD;bR:H3!r'2:]g0mb10[qFff\<T)uj-
%"n*oYdXja0-q3Y5Zd&P"R\:K>IA70ZUh,/22ebHG71q.97+CZ:H0$5G<.T?X8Ld"Cj9pVRJD_`03.@J/nW78]\>8A7@0^uP*^%pu
%D&me@@@9&C;TO`;Dkh8(eceOsT"DFa:!*#Zc:4Jk:Z3Y9JoLcV2PN0K'h):N;L-]Aj=jrBM9CVNLe0X<+ql.OV?"B$,a1eplqmms
%2Mkl2OmuQU+;Y([L--0'i$@V>e'A^F"3R%i:D]DdRB15HHs&]kMB,eOZ7<iM9<>E!UrfVj!?co]o.8O^K')*29S,`d+:O$j)$hNC
%H=9RN$H%MIhj\_o0ulgrRHanj'1bCF)._jP-oUTa`=WgP':IGSSSK`T31uEkrEq[+$kO(?/-nb7&U,ZT("0[Wgk(>Pes#RPU*WjQ
%0.`@ER"#Ob!$;%`R`LX\V'uR#.KAag,=7\GWBffP9*Uk,%WGYh#isWs\B5p>YT,0VN-kX@(c2e$N.[ObTkY2/'N5DcjAsWDV9%i?
%Cd/"q?jhP(XD\kB>O](aX09DHWImG>"L+@5XKBZlWI]2'2(>`ZBc3:#OE$YGSWQMT@9hsJc]d'j#326bY:u&ZB#*03LEi"&;5n[V
%>j^HP$jf&FZX7accKI9!D1^VBWX.P@,M,t+p4)F-Yjn-LT-_lL4C5hh'S`PV.jIrZ'TT^a$`f(/QJ+S]NR.icbYj9!2at+>X;)0V
%q$Z7gKJDG9G\AH881<KQ^4GK.Bd-73jXL0H#g9c<(L[BTA8f9MGR#DW(:bq,*K4AG+Au8KO_;@"CVGUU#*m.0drM,,;c`l+d:e?J
%_:gW)!6[VMf+*lbl\cj(:6=oq.>%i.A]ETD0b\R<OBRoB,]CKBS&fXS,^<Tgj;"DS%727`81+81aT1o#r[VIqm3T`'aEC5`aoF$'
%EFK[1IrVpsZWN&=p6PBuAQB(Y\8[u]Pe42(biU[C2q`FTc`a7RH3IO4\R_g^d%0Mkp&$.`/F\,1Qom@5YmCUlll<Y#h6i=MInt!0
%76tJJ[_atFDp$DALqTAI5l,WG$p\ln;A)::09BAMDJh/@4?[#VfrZ8!"I'&t"C6ucr[.N^e+IoKdkF&ON@pCL>,X^m,h-S42.$$F
%Bo&O3%X86ZTpsqo.!a>Z-WjN?(ssUno!)uG;BaDXG%BemMIp;53'2"YEQAQ/=t!Q>F?p>o4lNqBfhT5D9Yh2SgqhZb*rYg8aF$7l
%Z<30OQC`Wr$\[sFFas?5B\W8]mQ21%3eC\.L%2ac^^u,Gpp"mD>f&:9Ve*?D]Vl#//2%j9]D"uJC%Hf2`rfmL9uet0(?kJZMdnkj
%ca]dMGb,=fVRT&1!#A3nplX#6[kQNiZ9V.nj;;bD8;J]0DBe]2J;`-dgD2Fo5j7A7jII!"r1[)-/4EG#2I0l-jf72>@'6d=]=4TK
%X@HHcJ4R*Xf(;s'C@k-T_*GL*ebSO+&RCptR8:Vp:O]2+qCI'CQ7_U`,\VqXSE(oV?SmULp];JMS+n."2Y1ki_XW/X$<"TbZ0/%E
%7*[DBRC8\2"n&KlQ[K(9ZQ]QD&`Z8i>/NtE\[pqmp-i##eQiaqqV>:tPs.A'fr[i`9Rnf4]-<bJZH'+>)>JLX&QU?+N')])aF?AV
%On;e>3c43T#fEf_q<$do+B%b*S$sJJj+=?2p>q(&Ia$D6?hiWK329_7_LQWg=L/&lr4@K1WG`nc_H.68`XUJYnC\tdHc\of#l#\(
%ed&Fu0V,']H.6ILec4oYSlcT.#4[VHIl]u0)k7&`J/,,9j.Hl%&i.CtWp.TTkkJ</;kaBX[dlk@aZLpY'Iu#f<%.4e+=^Y=.P"A<
%3k@7<7?C"9-t-5"EBo;i#7IVhFKhrTIHhrSH:8_b?SK>G<uEHRi_:35Om<2Wb6=6;7(F]Q4Xe6+504AA<[38*\56'Vk>MFLfKR_6
%e:'e8=E&\.JokC/qp["O5WBd:6qp"KLD]DS1<7BS7aT,2HNo*K6n-[='\8>Z4Tf,Gm[GbBU^=M0GV)OP6I/Bu3_UaBYbi\,\2$G:
%"s4\-Wf!1:iQp3<m.o$"Nb$8EAR!#:#Lt#fP5>R":JJ8c%>mj2<JI\BG"5_cXsl9*B_@Gs[E*QW]fV;eb7#4a&?2Um!mL9*(t@.P
%XPL64E+#J#5BDqEp^c('DYp/T6WUG>/`<e>.^SVu73l"[<#EABBCQ+!18W>K^7BRN/+c4rLsh10BM+h_=a]VL66`P*7SI[DpA<X'
%irDZK\S?L7F&<AhFY4q5h9b1$U8K>8o<LRr(fc>%j\oB]%HS5.I:.;=_J4l;S;IFjdDj8$,@(8!E(p+Z'h#;8YD8N8hEp+55r.J:
%$>a;9MheCp5nnn,`mn45SbgJ]M^=BY;":Y)Ph\ZTf-$$9Pd3hhJY'5@/4X>^30Z6JG"=o8R[g.s=<B#C("#C+oGXSG:KgU*hd7E,
%[:+"ZocAhM4[=lK_F'4/*p,cmOMUm\-#OVCF&_Pe6H*I/f>T%e/G'JGT/o^%jWUP!/r$<VEa/"L&1(Mo%=C<h?$oj`&$J2#fBZM(
%i%tFVFoXZ/^AMEd"s*sX3SnPQeU%0;\6cp*kVJfTlQAcMeb9._77F/-cH^MW)lPQ<#\oh5MNVr]ms;`.^!D`u6Ge(>l[P1!Y8V??
%W6-klj8[,Q',Kf"K/1V[XYYt\BJhU$R]S!9*2)Ug<-8HBb6F,O;2<cKa8qf):iF@jW=M<\')>!J8Z77Xf/XrW\kjLpQX>jPRs,-1
%<oL1d#k&HLPkQ=&q:%3g.B`ZG^>F/IR7A:J(,01%3\]Ch44W^51%M9T(7F"p-3160ShN2>0:MOS>&:;;"0._kbA!&VYKR`h5t.=Q
%TsmG,*lsq,TceRlH0r_t+<;c"#q]41*ia*/I'G-<8`+/!*h5bV_H]?#l;`ujA]CHB`S-":9ht.KBXjFu%BYmV60C4j!:SSq"fSW7
%0CTgKZ)IGMmX>-SR#LrAb\#[_`94lB=I?.l)(3YK^gAec$JbY%PO0Z"K0tlbDlg]`>S6OO<0=Zk#20fZ`WJ.>P.WSu%-b&@_Xg]8
%LDdlblf)-X4f-+DJ0ap]@:(tu%jNB^di_KJ"(c%K,hFG:XH7=b!bTpMj!=_ATV]47L']%'-90HY6]UT?T^30(5]:ofUoKKd7(9(M
%fZ$1G(%''<,-<IK1L-c%O2PKmL7f\A3S(jGo\o+ZNlX0\F@#"US3a$V6LhY(i'B&>m'B8m*O_TY,9UY4'up1"ra2^r3.qR[,jV+V
%9nKjad7qF<C[`stZ5;V9"kXYlbbcJ(W4FT4=-ohPh*`qdJ115.I#K2L&m_KUkFK9!C';W8,ZXLOn98Ej#JW]V'BO&1(D$0SWKBT1
%]PcZKj>:_)Y</.7J/GiS?AFL*kT\*(EqgVLW>@HHYIkG&[P61SR'FHI&lYXSdhD_($d"Pn5]m;5-5D>CG>M1MN!7&"OZ,UT8)um?
%]2$Z$c5J5>rB(i*gE-L<]50:nq`tOI-tV/oE#(HE!=l]:&P35\(pDnX#3da/-=^&A0G,Hf6KhoWeM\T/3SAOH'=>(;AsRN"6*OZ;
%%J/T8HHN&"_'b]=:GXpckc\qeZ@#s<Z)Knn;OIH;Q1)!qp3O"8(,Z5084`tB!JiG/$OSL0;XK#0gt%Af]%V$CF3JMe_UB3M\&@VF
%<$$cT8r,a2lU#/2<8[e?H52u"L9+@[B/T0=K^)r3M4Q<?6,;7a!D].b9WG(lpMOC"NuTD0't?(`D?jrt,l:/EPj$@X76Fpoq$mhm
%UB2UA8Y@+2/WI2)_^LRQm@klq3Dl$+V@L-5KB%2XOK#K@F#8_X2'a7FoJ$L^PuFjB:Zklk:bsSSG&]am@TRcp%4(AF=cClb=)'Qb
%;"Y&FM6O5T0jaI.##'H-;:_s9iqBc$)6NrT-O8n@F>[!C$"Ls4@B-*Ua$S$fquB"`8^g=up4M-(E8D&X[\YO*"1R!Gi+PQ0+V`"g
%'@_)iFgPh;XijEt,W3jomt*aS'p4;0"qkH4i3dD#]u#\Y>HGH/3`[,apA9nqNKUaA5YEeL:.1b,X>h-a8&on,$oha5MHErb!0!4V
%_(LiGTEX^c\=eX,S#&Y%bW^h62(ikT6=I)Y!8j9Z(Mac'EXP=)cXqYZcp[k2*m7j&.B-?Ug^>-ai0OaegHWc<k&(NhbSlis`j>MJ
%HR[Y_`5l8uh!0HI<Y%Pj;O;rB$$*)%*lY.K6t6ItML@I\WpqMh7br/lWHu0^l/,eDPc&MjiijNU"PsZ^?L+d"Yc'<q8.@:BnTbDi
%^+Km`&`ZmTZtJ<t9U0q#4-47t*@-=2U&:+\3"JVHS/3t%j3_u%7$L#g6V=Z@Efi(d=-J_5&Njqp'XM)&6VqY=9%_'h<_+"]Lj0#r
%KOVEH!r)tM5UE`8ZJ!?R_QT:\!K?X[k,";T&5a(T=#^p2Gt^C^Kei,I9AZXN3k+?o*k]oc="Jeke1&NeJh)T`*N:,aSH1X>3@m-@
%NQnH-abr"n"fC;[PFqJZ01Mk7VecG\L^Puf?:cOj<N5W@8n#HtR'7C&Ru/m^QIL=L<,WoJ/:i>pU:"g540rT=4=DK-^8mor=kY`K
%"Hnt$jh$8e!)0DQM>!NXl+kM85T""8IsfO'l^;R4V'P`I-qWlbN'(P@`dm6KG*mY/lD!6K-"9i2eW_E0-'Z/[CbY3loJd"F6AKN.
%#(m#/PV,'`Po#A43!Q6=$BbW1i=!<$9?EXN^p?urOJr!B!4q+=\&=-":BEh8rlU/%kVI4-H_bY"\ph=`rW,O_N[sDf`N8JZ4GPsq
%Qdio"0G]e,Y&U+p_cRiBaXh!-%T1gg/I>^_ShDGL1PA3?61388NM)?TLVtGe5),FO/4X\j!5L?YGnD+Eb*,gn.FHg2b!Uk_c#Kem
%-M]ii.s.N4ec*WiOC!Sinfdt,\_VTK(<m#2`kfFfP;:]d:.gkT<fdGcQ(/PkO>hjZ?_Y+\fmAE-R\1I_r'PWQ&FVL"#>/*^&^m,.
%bQbpX[60qI$tOB.N6jo>S/c)G0c>=sjJZ(G*8Y*h`XWT(8Mt7=osGV!Tn)MsM*XBldAqeh0c/our6,H-BEcFc;"]mi(e-b[7hb_%
%3kQ]`;RM<FoG]VT5gD7Z>tr%M&ZuRC0YR<tq5jHkbuRG-A?k6;K8r?.h*j8DTFaPn#<Z$U;nbYGJ*.r*>hiYZM7/ZQl#_F>]`h,q
%X85pUUu/mgqg)*tCD:=aOegi`bepj'Q_s2Kl=\:;M#"+>nt]'Ej..;/#ULq#bc-Ia&=a,u,#1#:A?BtBO#7IX15f0EiLL4LkhaY8
%9CX3LfuB>H.[5>inlV\(1Q\US@ffYW][gl'(R;I%;Mn;kcOpe60IOt7PD,_VjrNKd;O'`hcDGHDX@(?U>8SYO,T1'DMLHUkWC>#;
%"W=:q"djCt0<6oXb&(N3PiacH1aY(=P1Z31^=S3!"_11tUjJ<O_4<!-h"HC*$FAT6dAO!Bect%)ffUo23CNa>_(!r$3"8H<ZH8ji
%[>EBnVE3TJ"pE+:lTRDsiW(!/Z<T@/l,N\\/$e$ecKHiOGmCZ\B8`;hC/kDr,s3$91L47!HT(VcA2edB/KCejI*n'n^MZZDM<T;8
%h69ksphL';?55O]=lG.of&RQHrA;1lO(Hf+4%U#2g$RXcA>(JGVF@BSTm<i;$H[k/eVtuomuo\,'k/XD/Fumg&U1*,!2!$T@4H7g
%KVp5fRTp_q[K%'Rn+2-=Ws#aFZJWSsdO!AQ+>)5%F^@X=:@duJ)iY*Lq7V\@2GP)(])o$J(;/LSM2>L\Lc\>TV:$)&2>^(C<HU>K
%lJ96*$bVEbf48:+%sd]KdZ*Zt>m&\W:_Fj=QRe?d8A(`E8A_J\qP[3?P.c;tD+Vq]5tp%mPAJiZeS:l?R_!Mo`X+^/9I/L[HtcHo
%;!bH]>bKq.`E:D&9iVEgiNAoXO;oB;ja#J3bP`3iW-LA/<,X-;#b1@eB9YF/%6PWm8(a]+hCuNq;'/=2$%59Bjf.Wg-RIeBKTft6
%aX[1N![!V$[S7d@^o(I,YF+$@7?"Ykf-HIc*?0,k3:]k+f&@mi3O=QLEXOkQcK._jJk`+W$=d^(,X@6FL`f^8%@s%l_ufYeWdMr:
%;6FPm%Ec`,VE0ntC/qDL5p'()<<Sek_uO.n0b14,+3<*5@Sl@2CJKP:$#2sA?aCO^K?^EEDE,pOHdG+!S0"b]<Q2>2S&u-f_SS&g
%NIJEhO5Y8!W7?f9jQND=JCEpgHm1!Fosk<MNFIuB9I,Vu&&uQ*N7QOR">D_OHtIs6cf,"c#cY<V71e>Sp*+'`(tP&Ucs,?,/1ISC
%gjd1VlK<?Qcu<^:S_]Xq*lF>U4!RIJo0`NE^SNlp9dcSB%6&Ms8X33<NkE`d)q$F'D;J,C7c#;(6>f2b$(+&Pc6!)pCbM`cOHF0X
%1rgPm..f-^c%aY2!l<Q/.;%BX\:Pok@";HnA+:IiE-bZ[K9\;&"W9`,&?,\J.-`i=H<!NYD+>-amkiYQ6=nq=m1G6#lW5D=bm@ja
%=`dZ1+WV\20=3]9eC4n09nMlPAX7D1d&%tfg9V,1QkDqD^+_n2CXLuiiJAW4C7U&,W>pXJ)%T1::%GZIK@q@U+b:;.%lefpOj\s-
%Pl;LS,)TJ_Zf!/7dDSu-2]6#[0'`C@/6cULoa^Ii^*!KAeb;nB#<*$E"><"iRNVpa6"'r?L/Gem%BKrO:11=FH7;0i@eDkY?;u'#
%Rmf:KUmGaQL@0hNh8i`B0fW5]J.(jm/pa?03b)PP=W%J1$U+A<ed9WWOHtcBP3V+l]]ojib8C)%6lG;8?P2gWc733d6;^H.b,0jM
%;66;^,BR]%+]T#8e2)1c)7#Vd.D($s[ItXE@pEfjlBS13EL$H#=AC<K'B$o6bqGJ2.^9XCmftg!a"NkT-brhdq"p/fPC,$0d\m7W
%U\KmEigCH">ce^8Ac6Ze0Gs)rDpqk#9f=@X%h"Ek-j;.&'kTu_jJ-Orc9/WNil@)ES\-!XcVM7_\cEt\_"WP:K,Zp<<-VUqX-ko8
%a"]>@`Vfos.f&q&G$\^N5-L1Nr(-%F$ZbLjL]XFYB2m/&Jn)VU=1YM&q0GSj%T4No1R[GoD.Suu2(q@MA]I=MW"0#>@:=@FWUW%p
%8S-;6L@BqlC_`<bMhE?iYVcn1o2b:$%p@%41!i7reH4.?FBq&(5s,.WT-E*Z.hj_D`?<MmNk\qgMlajPVER3R`]gsX8mOQ\?EtCj
%kVQEZWj:E\SU<)5o`3F3^r0cb:K1Jkf[KW*;!`P2o+"_lLckrF$;AP]$L612*8MOKQ-n;KR&K'gMJWM"4KT_SCB]Oc'e!jtlu?WY
%?u881P="5!?:JqK$[WpQ?`+R#Pi37_/6@OiZ$#^OWD&_Z`T/KXlBQhZ74O(XTNVU\eO1i4Kn>Xs:-t%oXGEd)NfJmI&V5J<C8q;4
%^&uG%#.eXl;d^!54:,I_(a=jlR;pH<SWdg+AR,&4B`e&+>eR?QX=M2R@I@#^4cU&&T][&=EpsbE)5MmHOeD-'"c53A=0ZG-P#jqB
%A;)gGMeEV>EIMAAL^7(5WbSdEj>HEJW2/k^8nA#BClB)-!h5WY9/,8KlnBLFL`1*u4J/_;L'4s8:&ZP,`UJS+^1Z7l9U,aBk(c]p
%::3,5]J(-G(baGcbTL>o4$e#jZCMQ`MVZ<1P"A&04n<`7m'6_]lk7dl>luS'>V)=F&2B]6cN)kaK:O"uX3#rK&7;:&`oP[_IN\(Z
%@KL@k*AR;[H?JX7`Z;Eqd_)b7?jUbehTZGSa/B[rdR=`f:si46iGA:>N*OksHsURcb2PQ06%S=dGGWYdb"gqPWHTq=3%_EA7[ujb
%m%kC#Ku"1t`(Fr\/S*P@-6PcKQEtcsSZF>II_)%[LK$7)&Q?uJU,>hfQSX#AUPWMZ=ZoEY-[HO:.7HCsYTI*#W/JO*]=+rb(P)gF
%:F//sYm91:PI!W0Q>SYrk[PFER$\fL]'tXYMJS5cF6k?Z[kRCUOTN>SZQtY8HBWObaD4cEYk/_rn>WH(#R7?enXB[/V]_^(b$\[$
%oS#QK&8U;M_LuI)d,(W1`MRr^4=:@D)h]q>+D75[$?9FjZe7-tbKG+N60!;!*Tj`WCd9F</7%YKGF7`kEfma*+"C-$TIE'"FBZqu
%;!hMTUf$kX64ujr8&ZsS3flgBq@uGt9M"b1l^^*Je1?gO7L<fW7#uute[rhNe.8V_4`7I0eh/h'lLP+[_FZ$G9$Z$lK&ss+Dq;Ft
%Qp1f']48^Pn`_#Vjq=9U81ofb%6et)'9>JYOTS70!AA9h]*MBs6Oa-Z<O2+U/0^d\,)BGI#bCKR<cKUi+G`f>R]$i.UA.^[ELZ.o
%p4RI#'*3s/hS@Ltp7i$"G$JQp`\OQu"hPC(r.@X;@Kf/[N=+8Le.iMi!;VY>i,W6[0jC'ul].[Q]'n^oPcfu=d1`Gl3(tZ%$B3M6
%Nske-:pd+O!(:U-]cr!eDPR8mK]O\^]-XE)Z^7`R<1p,i6DXT);EmBuBEu].%R<deRljL[KrQGfYi;ZrJ/2!=&nu&*,j%%C9Id'#
%6<1245kH"g\uH&+9+b(aR`D-0'BVcd,3Pn""kNl'aNtI?Qc?tU+eT;Sa:gBjoYqCIc2jD.hU@+G9Lp$A6aK=#YC\Nl&&:M3'n_FT
%%iK)3gB1YSjY40c@5'l&Q-N?:@p)kd;cBsH1PPF&!k4#9;<)0hSJdWI<_Z"SC8&=7/Q-)3XC2l^K^5:eiWn(DOc(A@.MC=;]/uS8
%DQWbT3?\SM4&`]H&ZuWg=X\G46o0_-e3Ua?%A]^LCKr'9Q:*KWKMpT'*UJM9[g`2JRb'+FZ`!]707JI.[J1<\OS5GcK6uM'I3J\`
%.!g+>c4L[?\e-=$F_()ld.bN4SSe`ZItLB1]XBTI)!Z5cO\ZgV#Xb'G1^jMs)Bc#$a#B.,*al[?gN;=sPkEb'ErPc_,,Cd0C",uk
%?$A4*2/E2E%=5oi6%V3]poU^!.*o4KcV[J02!iaLlk=soY_tqoTnc?e5FZF<Y56X3pldAHjJ#br?bH=/n%\njRpZ3Ub>8-6YCH9>
%p=o>6s5s3^d',_1e%:'HJY2krDn^SulJ&G;YJ0hU^\moZDr6';l[Sj+lbEA@:VZ_nf3a%%?iTeka3WU3n@-13h,iK_o;g2abLp)a
%q]Gk/Rr<fRrR]A&qtY/Zqs.UK5KJaK?Z[qcrV>&PIJ]h(T7?O7DgqR:X..F^3rYeObdXaV>54f_s8:tB^1X55ij.(*/BE>@k#^I?
%P<PFHLO[Ulfr._7AR)F"?hkT=UC[&HDJ"s%r6J`"o8iqD]fm?AIepOgrr2>R^]!gahgb7J\,Xcm^\ZK)?iA\"p+JZ/lehX&_/R0f
%c.i9m5JR#\YCGL$\U@2pB<@#=ikLZ>?GH<lf73fr?_Ob)o$qqk^&O"MjNtumGd`t<o2i^+e[Jn8pNKuXJ,Q2%qjSH&GlDc&WuPq5
%S=c#7a1[A4EhP<M[)#UfHU-O09,F*.q1/2bS^[nPm2b(@/-LX1J3g1S#f6ol[eB+E^mN?Y[D*7l#?t,'L--<1D\!u=MfuJIp4HIa
%Qk2U(;)SOsfGsEL3E_j)7/+)UZ4`Q$n!EL;\GF_Grb"L>YIsK4PB(?rl8+%aR%E?'c_F/uLcYQm8G^jQD4&[1_isndUgI6hb9Xd:
%Vl)bSNIM(oIWbJAogSZidrbW\Z[W0Hm6"lWQp_^12nbH%J7f<jV[^2BR)(1_r"2[V6Oph3rBNZ46q>[`fOs)1S*JOi>Gfqo6fGUa
%<nl0A@ruMF$?:H.rVHm's2P(&Ji6rpoDV!EpEINFB?]OFH7Sp/q>\9Y/eSH*U[FX#IbpgpPG`V&k`IF?rNF8tIbm]pM2C.;>Jm0i
%54[200IC;(Y6Qo4W2,GoZ\?H`f"r/rp!a$%8##Z$dJ=iW7B+r:57,Sl"dXmU9]V6klOT^m[+u&Wp4mD"@7G5fVoAj'\Dl?KbrM+"
%I6F=/a5i(\$]i]c_A2Wck5Pu0^`0Xf(/&lg["tUddX4^e*kJr1A4@9WY+gmZ!SN"ho@]UF0+Rp(Y#"pl::cB),lfoD`3=tK@k:Is
%;$4^:l&(Q?")"9>I4tHi^^0u:Yh<do05!1XfKoZrC/XFXmPGe@;nlo^@Y[>#X.VV!SIXZq(!Y`n`i9L6fpd.<Nr7*L"g_UYoP-Wj
%Cm79$nF?3(W%!J87B_:iVEq!3?;WB)J9YH?G2YOtea*4Kh2<LB2<K.L>4jWhk;<GdY`N:Ze!3k_eV,H7MD1P\QY#7!/k8Dag8jNB
%Djn@!n2!.#nAo@K/747:8a+dVW_QopX22n60p@,o=X>o?>RbeZf'M9)>.lo`Z^@]L;$W907.=WOjJKa<-9GE/J]@Cm0Wmlf=/.;.
%X$#\b5V,+WK&&>2ER\W@2=-u.Vl4oCKG]$$%ap'U)F4Qa#9h>G42kYr/;YucR2J3>^lRkh*;Q#_/R/9:r<$ZH(cd14MHi$n)!T3"
%qosNHjl&ipNq#EI(Irr:J;bOi-t.R<Nn\:'g0mVshku,@m+[;\mH@Q]2T8ss(C,A7CGPeOIam3XAG(MkTgZUn"r6Ss/MKMsqO:u?
%fBU=`TAGu,CbBUD7bTh>(;%+'K1J8+1hP,nT[hk]_>@iJ%6U9>R5#p$FP?/BG<ro<rT9,+%5jH-45<=.m6Y@7(%\*OMZZ2W16IqR
%M]]-/i9u9k/;.uSlm$nK@Q@cQ5TOo]*\R?eFt\mRoZE,k;\9hhoIcNBj6k]&"G\?dA[+pV2Tj%sfW3b-095o$^5S$(9H0&h/ne<I
%\FHoQ_\p!*GuQn145Fh!IeLM3M^(I"0p0D!*\F;?0#/CAj'Q'%9dp]3X,?\",7bSf`mO$_jurP:Yh=p:5J8n!Lo(D<7`-MW,CV^n
%Q8S1)3#J:h#pkW7^Mii*^eaFC-&BB91?dCr,+"un6*)<JY(mrnmKpI.\2*X<3iaoq`-5J*nPj3[^WtWq*Jn>*INTJELV;dG[`OH%
%8;MFO&87aUHIqT(8NsgtJ&il_"mS))3SdN40qFd3%0c%<<T`9MZ0JF`E(eibfo'p!H6N<M3R6Af%*!'@amCE@>Z",&\&1HeWbNMl
%'"$$6c)"pp?CPGNH?]CN3SGe83<='-]\_g786Lo'_qgBp7;i<@?Kdq+_^9\Gp>QdYhXWmAMNb//ctKECL'9q*o@S9$at"X7I55D$
%d.(u?>.n_EiY8#j"$^1NMrj>4]UKGeEJInnZ'32tG,BE,2p="om(t>!D67-7i`"^mLJ2[p*M#c$9kmQ$"KAW#$EZseBhX?8D?LZ$
%E)SOI21'>#^W.)Z#>J&$-2\sVE`,PRD"+523h%R2%Q&Ao,r:f,7gf?cU0f"NHZ>4`a%,=h,U3G5L=I!#'fa<o<-'$'U)E<]A`QA/
%R'*\*qT/q=AJQu,i3eU'K6AnCo!tn$#>>cp@2YMicul./i?Yh@XpeR#\Hs/AWQT(MRB>,cSTpU2,\>>0+#\IcNZZC*TRo'X-2<3c
%d42e6JfKd>BahXg=ot?o+P-&/)7E)LjESA&3743b0@'&3GoYmAA);C]:RR59B.,Jb(h2!(c\Qpe4mR1od7j7R1Q,M3Kc!`EoVUH&
%PPdru#IuT,p#.F]*L3j\S5LTdi*PGd3lnTo.B"tl=gjAq*VK0Jlk:.\e*aV8`fK2$n9*rXM2Y(R=.<].6!_eT*lY!9Y(J'/d]/FS
%?W2;N"GirJbn$p_SDcsn3QMOZ*t7ZL.M3lh*/eem<][4K!%:VkSj`ErSP*MmBBF`C3DK.mlGXWi.$'!a68B=RDl>S5&:&7<*8g'F
%#ZSZ3&[F+*<mHT5U)'a*7PE'V6Wop>6AD/?3PhF4bP&RiB8omaCR<ac!_UA.RsAeM(MEN:*7!8L#^PrKDUYI[d(+lpGH("9X?aJT
%O5nWTj6b^R<\I5<6i!3C.LI[h9R<^L"j*"7Z"oO)+`^d[FYC%P/4nOf)[^-#?C^&2Z8\!,,Cm$lfsC'h5h+m@Vg=E.Nb8h\G69<>
%G5I5BX^7OWLN5?Fk%4n0b5U^m7u3nG>CLSqOt%^3h"&O+iUUORDVDc`aU_s%-4bhLU0/,<)REJ!ggPbVMlT4JPpq>ZArS[)NM4%$
%o\p9DPe3?22"S_cH#`B09X`O7#?1=98O#Nn2`s#s,"9*\n(PH5amc"ZbnPsfn><)V,s3@.8kmtCY(@FP?U_R2VsmZI@4TR$hm@`M
%Orqg(G^/.&07jXqL>n!r*r0D/LedKSge<.'ON!O!:$4gS(FT$@4O+dg/ZiiYNKXcS..+5n)3`rq2mGk6Qr8q`o0Ku)-i&m@c5:g#
%ALAFejHp)AT,pN3EY`=(U5^.<.$mjrP*cLA?C^(HE]WtV-2W\uF-=Uq>&Q##jA50>hHVNORb)Y&;*8OciZ(1GeaZ3+9,>dTEQlfZ
%Ir`3mO\SuZH&F[jaj$97(]K%f02D$^3?<*JNuKmp.Df@8h"#;I"!(6^*m\&!SXjbId-ekEIO),WiE-u?``;=MF-aa6MZII:@i''.
%FYocNnRB9U1ja5&+3EdjA[&!BU1g?$N&e6a0oC7=)*krp>\F*@)@gf;IBs`fplW572F<[JhiG*HZLBdB9kn!u=gIOL<j,6FIjCqu
%D)Bd@]H9)oVU=&in#$$82W`G%4D=HJ*']\8R0:EL:%&>HZKn>&+kfmtMmdGJW<^[SSE#Cq3Ks$'b4,@K8*oN[FeA$#aE:-llGX"q
%?C^']o/V,LS+?=PE80i=ilN&(3otM;DgLCJc!Hq##I?G5M4#.ZrP5i.)ZRe8mA>HR[;?i^#OPifjG3:dPG^<Kbkltkh@2E%=5RgV
%MuDN!2@l7i36)P@FJa"f7^_uC+LN0HQI*#Yl]r[$);lRCHZ>2jb32N#@5EtEZa%(Vn#"UrK"RRYQWrul8q#(S`CYM,V_d/=c-FR*
%:7(G*-GJ9QGPh2VqHc)M#L-SFj+jp$oXi]edYhQ0keA,9*L>aak/=KOoQPe?qc9mpnTgsn+#$-?M(kheGbQ2<-[)[.#"9g1+u<Sj
%'gJsKXk^C3EJbj[l)`5GEui]e((Fd,h2GCUbO1P#_H8]\UBg0mSE*2G3\-fC*5dfA8%TGfMC7+?_m\3mc&(f$fo'qL85<e$H^TZH
%0edEf#$fP^Rtol:)7FkohR@iOOrqg2XB7T+eXU&p`DCXA>d8OCX6(2,\%?e>[sN+X+3Ee!GN"SQI6J`9MfD%/p!6q#_RL_:;>7B\
%=klla>'2n#c!Hq##<V)_Qh1b@fr52h97R9+dAlfe4Y/G_fQ!`^]m(*N\=j+HS^'5Sc!Hq##<V*n-LQQ6PX/6tI+<:>J\jpR3iqHp
%8Zf6%e%cQ$W[<Y'TR>Y``ArCOHVP?c2C.fGb?dBH;qo[N>;RZ'OF%@r;/>.5,X9q3V;D<";i:ucT<.)gJMk1p;Lp!Hs7)9fn?20P
%o3/Jek3/H#L&Q]7,h!e"'tI'W''O+BJ9;tBd^ZdNi2C9)<=)K,p[qt$([(Re>+H#NIbY/,0%*V@.GW.pUF&F/a+8jnmkM;@8`$q'
%EKVD[^.MjGd]KBMSK\0kG3&^&9_#WD+`4ZVO.5^Sd>J\9BU)?S?+lGl"$4P[X2p6D93_tj,Z"1%?C^)3l?)0$0[fuMpgVu00u*+)
%T?IhSh%:/9]f<n?<TqZ%A9\"LiRhu`pi]("bC1JDSM@WmpYmG_P0K[7<(qiDrp13P[^1!)@VoW$[ck/jQ+Lu.iZ(1Ec+0"Dqm6dq
%Z^fi94Dcn*26`r8LiZ%^(faM=J,mC99autbqblba7Hr<*_=GFk'K*kJWX7ik\0S&55IBsC]\2V6V15uo_SsjoS7=ohg+nuQF2+%@
%W73J?Ce(JD1oP!Ml3ahj71<1PR$0R0W"[n*k<YbKkf%JeRk/VF5)'tXZ0uOHOEUJt@^r-ReU$bY2?n4U-F<AZ&DipeS'PpbYdWt4
%H7?Jkf_).RM]7n+_2`uLU1%ce(5uGjBES36E,`Mj(nD+@(j:8O?2g3Xm)KfLT92HVm(-;j-"6a2c?b9Z6I-8srg5t;&'Om.i[e7l
%[7GGgGH$hX[?>7WC6gJ/*ic2C$]i]c_A.t$>ZUcb@f8j&4st^M\6]'*L12=Ae3-I6p`mcSR$<@WE*^+;%Jmmu8s8Em\A,-,hAkg`
%!pW\)/k[A"hoXV5H'>7DApGjZjmu;tZjbXH?a[%GBClIe,n:-M\blgb6jYp,:?WdqQ<hsaW!8-Wh6\#2J5%[JAu3-[]JNKknm<Ka
%k1aYSoCqI>&<`So8CmtPf&\GSAQr2sI6XC'nlN,&%9_uM4p:9Of8$J7]G^]>`G0k7)ZJQ!%08t=0JX_u2gfdCK8RNsiPR;SpYuGI
%)$Oa^]rtGQAe"/%"1f-rjEP_<)//KR5&Bm9=o0GoD>B<qrVImV?Oj@*j#PuBYLG=&JGYJ/r>STkZ=LKVcI?R*:g]Eq;U@FdUJ)Cr
%VUVqii_0`d0C*<%Lg5H`/1AS#mT/.LCVC%Qq>P-J`+b]mmG=PZG8WV58Q:P8fqG_&Z7BMt%c0&nI![ZfMhLTofPI]GZ@@\8iMN(6
%`jQY^9Drbp]i2:/p%$rjCJN'e8B#O"Un5%^lHo5d1Mp:6Fg#r@ZdiW"rF<R2Uk$(C--ob6*$op2e>Y!<Q0l_]94`.&7d?>HP'P37
%5-dB&[R0.JAJm(I$C-`"k-&N@&[k6Q<i'KnQ'Kd0-<jPn2"Yhmk9"25mh!!jr_b3_=35#TK+okde[iaH)<sP#-0>o:6IDLR1S?40
%L+pX!UpPKg9cMSt,Pn9`Fm.)V\nu]%E?YkS+CSN1KJ3X^@V?MeL_@I=0mm,Hd\s,1VtPO$U"O#%':U$I8[a,7?,-T\;HOr"EFBgg
%PVl)k.f=^X9bTkCC8nplXb2;JbGq]Q8ST58\?Ti3@UGtEH1@3DG\l5>*BdLuV[MLdb&C@+)(>Ccn3^W-D3T0<W3gD-TOK37$3Asi
%Z,sF?#Q_CDU4KXs]`e,]Zb1;"lLL*1:kF;J'SE*^)F933BI\W#-^DeNUD5l6eW8PGA'ea@W+TBJ7ig+,^L1e[*Ehqk2Pa!cn-0M(
%d<&GA'gS]`i3h?&,$4-lLmoe03ohZ#gh1#\"]Ufq4>n;kaYJMmnF0-X>8U9P2">tPj2Rf:$T3,Wk^>fGY$%.G;fh@I0/p?#fNVit
%H@Pn.s8:42(IfpqJTeG\c/kt/4h'7IpmjV@7DpQm2=)pmd^o>/GMdg[_q]^LlhLL-oF#R0K<FL<ZCV#"K=Q@#Bp6k)^0-8IF$"*q
%FGN0OB+OpV/c=/t_B6e]5BjBQf5AhB.M#0fpG^q'B58DLF0Pt49Bit;+:l;bVe^]#+^B%QNsGJ#a/?q+^Q`Tjf8u,W']O)jca=g)
%U%gJ4g)d$$SKh;T1>:CYFi\(CV:u5=BW^era6f-q9AQH2DnCkPQ8F$P>!ir`$cC\-%urcjp6gh%87_<TNHH.@j^@a&XQ?qn`_'ft
%l7B'UqZk,`"J82Na)ZnUmN:Z7NH]^k[mM&c?!Q_,U*BEdRQg\fc!ho)M2uk=N=t(Iq[ntJhbAC)Ueh#0ZdsaDM;a1uK8Thun9GuM
%O0I7H$(0^3(T@o<E_t4Lc,Qp4f(A2KDALt;Y-Hc"Ca?1Rc`,"cE]a/N(:u_6e#.]*>O7<iRTh8i@>ju%Z&d`5B5@A9%sMPp>Y;L"
%,G`?Qj3GC+`]rR^TE""j\H`?OmZuW%nF(&$5Nn!s:DrQ_J%8eOjGUcWmJph9T?VBeJ_,5RB"e\)gW)MjpZJ0+0@0Z=ZeUA$]]K/1
%1#i3R0n:@RgeUA.kC:#Ug-,"IhCa"losl4@^[6&+'c<SCj\ED/g!uSRL*eGM\@_3qql.[3r%E9;?&.?W6bAINiSP:fpeb,S;lT<_
%?ga67,8\XF\M:eIs*Wm!s()Tb_E\goUt5N5nt^ab2a78bh/Xm1"n.bhQ9QV>jNhC]5F!4\s5d#;)V^fV)98%]c\]c95[2ZEL3>"2
%SQOUJVX]_TgeVM%kC7c]h!rd4fDOg<],ci<4a-"9/%p\<I.mjtGBbT!56&fYjf\?YNC6lu7[r.4=)nX2ePK3C2khV2Z!smh7i.i*
%]3XgeesjuEhpgq0lo3ICR?$tss*V4_FKH"[!qY&ejcT)0]5bC3530R(;"Y'Ol!s"]eMNTA='tD<-uI>>e6<5.eT,FKqBK:1iMe6s
%r%E7\:)UA-c"d,/4&VXJfoVBC]I<gFjX5!(/U+%@q"jCThgG1mDr6!75JI,d:Q#23s,n8T3alo,g1?_$2eJd#pj2u_RjPlQAoE2U
%"JAd,c&$klD"<+NM]V9jGT5KPn9tA^a:]LHQ8A%?!F0[507Y#m7KTU2?8>5=e'@P30;gIE5ZTSSW?H<3$l7#YnOn.,FmD\orb?\<
%=eA3)#p9PW-U_5$Lf@Hg'Z<$[<GO3mk3Kr9C'.?A'H2bgZ]$^`I)3Qk-/I"nbsn[,=t6=LRk3)29@kogK"Q9F@6T&>e<&";:dX$X
%.E*sfrKDY/MOR8YHo50W!!:K[=+5f<q.0f\l<'c04Y;e1[RrH-nb0<>JG;OKOZs1LoEa_/P[>c`\ersVgHZXQY)1cSO57PZY#ec+
%Jk5j^Jh=_&dt(S&%)V=ZWNDY+_MJTMJ4F-6$tG$gbIGP!"tV5D:a3Y1I)<m(=Ij^aNWS'@XPD<^n`UPp08$@=9U`9nc.phiP[E<k
%Ko\:U$'uS2?gkf[jkH,rNR)?3%l3[)i861Pq3t00pZ]F48B:0D'8&7m9c2d0P>!s#Sea)4oPOMJ522$XiU4sV/j"E,#[d.9@?CaZ
%hC0("[h3WfUqX9.@="S;=3Em1^7AIUo8(1ZWY_@60$;I.4mnQq'-T0;d%)#;[6!MKlUgT#YDbIO>,Aj1g$/9o7/]ZNrjX4'.3.l7
%6&nj.U";T27K\3ZDX8Fbl2P\jh0LnLP3]o-!V7DI(BU^A<71.N$MuNY(*O#6C3D#LC*3e?;KhH3[@,j'RdMB^hliY^Ae?*AV'7-7
%PIDu)E3`:8kM]K`F*"ZtH.aX.>e]NqC<5T?-l:Q^*n0N`H)B<t1q)d`T9WrM.qEN=hm1?_mZE!Bn[?Jc15iWVq=X?mQbSb<Aa@5"
%:B,V;otLb*O!jBks5il;rhhi+pP\R&^QG60ZBbSl0^UbEPkLnWXZsQ+?V/&%^kQIhB]K(q;38%kg<&AIdDN%Qpd]AY#*sjGnk't_
%i>2iq+aRDd#*tAo!r,K?/Aa.e,E)^@aT@TL"Os.WmqY5M6Dds=WZ,U%(4s2X<IVQQ8KI?K-')X5#63>cf.[$um[-f7:!T.S`_>@'
%W?RRjU*p;b@t`;jc5#t,J8QAIQ4ZeNDn&FRe=27j=icegTlhaAH&2\MoGnrja:a/d,>8o*',c*:iq$1X*n"G.EA;(&F-:43+<ASo
%&TOcsBcfOZXPgd*;Zaf\FL"5tNdqMF$RZ@cX3qG4^Ku*Xi-9a+YRlt9aQD*IA88U<Y-.+Y@h8D;3[W5%-Vb3C-9+X";TB]+P.I<1
%>BHeg:%Mmk2-`Z')@h^UrCV;*23dN3^K]r?(d7Q<5oqak4`nQEj:SR,70c/qPbE>>,aJs3nD_b>eqD>SBs$>TqE0W-Q1!e8`;3r"
%eSbWKI[+%8C*cm\X^So)=EWCFWO$Ifer!5.Br^,QqE0UWRr@Gi`;1sgSgq!_nHsZ/=T<[n<dEHrq5"WRa$$%&X9kFddo+"^n9O$Y
%2J`+iEV3=:I9!NNCrKDm6V9C@Y[GNt8`*!D:$<jkVAcV4c]_J?H1&C=XKN9&X2Ok@PuoKK:#pZS8?CnA;UNf9eq?f(Br^,QqE0UW
%S&4To`;1sg^0V-GHmKQl_DVVl8'.0"PIloY.ltkN[>+#2o-Dn(Y.:_Kl`7sMWl2J;p&7s#rMu2cE$O/*X#(Q'cgBMo@6u?hZrV,\
%I%IjZSa,OA\G@\X^+*67Y2\`&PLs`Hn\lAblS[t!mhgA?bP0d8m80oD`S_Ii[j>C;HIHJ5;M@>LMEVKS4T45R:=[f$eK_iajWEu<
%j+#@gOkILOoT66cDOTRD3^<pGItG@*:-sI;@0?R?%<h(*%U"P4^fE]G42;\C0oKM(EX>LC$9;JTgI7\&=0RpuA]aP5h?Nbd(QW[%
%knI$DRiHP5N.d],L.VX1Z:"4YUj2QSQimFHr*]W#R04FWQb[2Q]-&C-dX7p=r<A5"1'eg9a2dL+<o=eK[pU?;mYM7r'?Pk=U/;lY
%!k'S8iWZk/59*1kr2#d])#q+sZiKg5GN,0l+<%,:&27p(]3qCfLeD!g$I76XVCpIQ+%[=;KQQpD+BXb\"Hqb*]RXruX^gd]!4FXS
%1Zf"Nlc>FXd7hbr%%.gH.l]1#a*cEM=F`Vb\H'Z:4YI-9oN9^VHj?NS/.r(r<"S#?M7J0bQq=Qr-M@MMF%<.^N8=l04EL+?s#)TL
%^q%j&Aq+r*LmT:qDJ&e\c,(C4QR2o.`\[UOhQpHRo=U-?m)qd`l#HR`]=Gt';qA([7H(IFVWfndHZF?aT,Kp)oW2/`K2<:Vj0mW$
%NZOCfgU`0u'2J'Y"p9b!e['EDd]8QfHYuJN@gh<T4=6^[f1q[lk-rBQa?<mLQ'k!e"U(4'\&"-]#Pj1/DP?!!)!_TJ^i14["hrIR
%D2B9q;jUntn=rX^JAYL;AT>6oE:h=@:u9<8E%;Kg/WG8Q.eW'DE#!BKhI-i!.dsNgkFck/QeKmu'6nK.`a]&6[p>]f4=FuDk)dqg
%=ooH0OMo68>Hk5f*">:'jGM#X"!R%5j+)/=#2jacTcg'Hrot\`j/AC97U]7'H&[\B6ES8;%;Be@k7U6LJU:*4NN$(g\bn?3n:J\8
%Bh559,*_ua-bj$pamfD:'VhC]-8!KVkhRtjl`q<rF$qCcm6GqI)tBWUD`TuIj>qIuq*tD[Tg?30S`BR6Hu>\,$N;%>_[nX'&\<g_
%9n[<D\BdGE.+m^OP8=U[d&I-uqkHC[O:u=ZN=o[n+(/la![&,N^o`&Voc+Mb'bTIm=ji'Rog.`)K%uH7nLGR5,>Z:u@UQ.bW6$j:
%cQeu5ZiV@FFb"UuQg(#+=QU@Fal0"c]p%4c<=YX9LCZ3r3IK7sp`MF_S'a;`WuO=E[,,RZnN>gie!ZA-!97GYluCM-K7n2ap,ED+
%PcIYmpc&ftOfW1k>%K[V))RK7Bf]$0NkmRN*/;XAGoZ&r:oNZ)1,T6PT'(s=Qj8Qi-e9e57?<Y3.0]a!d?Fun)]gBWNg''GG3h1;
%Hi*6oQO<S@T&=s$f8[e=OLsDS#E9d5ZrBPsXsE@<jk0i#YO^XShtNq`+VD&1/c-.][W`=qW814\s8!q'2qE>oW,F#$S7nWhcEfG^
%0-8NbRu'b!9)]5\YO^W4mDUUt)W%@pfKF`Tp,%sPPNV+Un&nGa,#B?D/[Q*G(VB)&as>hLXn8"/<c0t?4C].NA_@mEii]YuU-hWG
%2m0PP:dl4bK/jiBZYNk]M4o7Y9t26"O[d)6Tg<-lENb5aO.#Z3-\rEU#Y`[H./F<odU1HN]r@(c6D:K\:tf4,^k3OO6($9e;SJgk
%7%@pBdR>:P9:4p3^CMs!4b7uoo(U`"@^:%8#,%tUL+IGWGR^4FWQs^hGm:PHfZ0@oR<+j40/eqNDIuVOkh'$8Ca'4,.`<Zs&bbQ=
%AE\h'FhH00,<"s4)9`8.B:u.4l&bZi^d*PU7^*+X9JHK.-)'Q(<1,NS?jPj>0-F,M+\`FYOus-u,(u:4,^LpeWTr"Dk/f@9"Ukhj
%Bgu!ZJj_89)CFTDI2!!b@"N)-f.7GI$5=Cf#jN9"=u%*8U;drb_4P*X)j,.*,Z[s]@"?>hdDmFH*X=4B1*)*'!dRIBiV6M0">:Rj
%Bde=Z(V?'o=Y$/nKDoB0MMO<d=tVso0Gq)kf#_p+k/;.56NJm-0TF]hiMZfdoX,,lm<X44&?n1I/DUUlDAMhS%]#>ZV?p%+Y,HKT
%0!Jqs#h.e,jYK]uCBD!QhjJaH0<=b`JsI]G`lj4Xd$FXLmPoGuh:&'Hrk]VHF9.]S,aQQm)8pbQG16[8qL%QF,n?^n)6>dGGf,am
%(HInK-s-]$eiIjSJU!b53(Q`V/JhOs=VfKBAdr=ui1.5@%:NRi83>GaC9fJ>MB$6e1bE58_$KsM[4@tU5kftaHE3=e1G6(;<mq8R
%TFmP=h@L`=h*dD@>IQHWa5Cs!SU]2tOV)lnMFE\1#8UHPI9\)H1_d"KZ4Yh6(t:tUlH$"c<Df`:Uul$LW&BpAe@"O!dC_)g<IEQ<
%=[ftTXqf>A\2bUH[;M"[OMoke*^8-@p<,(iX5/6\XB'.?i`=OImPr5.;"bri@$huOFM8%2KGPde+h/;e,WBJTTX)rIfW>A(MnSiZ
%Fg$5LCYQP"qM087^TeE5H5!qIUWuKMM9>3IX>0;'g`"8a8@:dA@/d,'/sVs1^4RBb#nI)EIXO?=P6o=,8?+.(oTgaa-8Z+)#K^&1
%iJ=n(-"b@T6kKV/fk_IX2ZtE!U`k+7k22n-;b\=Z%.!Z_1T#B]PUK'M-_*ClJr-tQ1jt>_ae+OBMTkHk+?IWR3Rr**Z%G*WB:38$
%ki-ZIe41Q^YYrKN$t3<j1liW&UZl:K$M+jq+SI]Odho[YOQ:F<G2mKd3QGo'D'4_RYA0?MoG+/a+V#5^%L=:267Lg*]OGtR%fWV4
%WS[BHZ`n0*Ym$\:ZbIJ$_]sB<gY_rBB8=-4P^$N:HcCm)eTulRm$G(UIJ]a&)><203uI?uSd3(O?J?NP#2t_VVW&MI?4^ec\M&f"
%a3^>c*s)tpIl2.b3(9Wj%9\4==4a](A'JLldu'b_e(L]&$//E:$]<P_IO0t[JO5MJ*cl<Fp^#E%R=HO7%SK5f&$*IXGt-pqB)Z[a
%a<[saE?'8F-\/K30BQS;1kB4$s1OpHrBH`7M^LH416-Q@#%W:ZRTk<n)Y@#m+M2OP+ih$P@s_H1a*8kA)3"]oWWV7sYfh.*oOA0T
%)P$J>ARK;B';!0&c8!tYcl_$gK;)aiK7='O$G&fXSb.o:Nm[AOEbJr31)>.?9e-bL3:=RLYsC1$i98-;)^-W*(uX7f/B=u=H6G[_
%=QS9TCgqrD*,!3(-c1TQ4EI2,+ch.'U15W,Y/Vi.1R;Y5m]3.?G*j$CIW8U<R?+r5!XMlJSB[^V*CiUf(?mAQQglCdV?:XqL$qbO
%baD<TW+=tfAs-\LmYp+4(3"R?+>`R*P6#+KSc3_EYYc/e;M=Y<XC=3Rb,e]IX:Hjs6QZBJd)C!t$X#HNd[=PcD?m=jX3Z(b\<<1W
%(H$I'q""\I!I\`S&^&_(k-<[pJ3[>\<RF&bk4iI(qbV$@Qc,dBH?Uak3P(kX*9YB;Go&58G1hLCn&h4dG])l;J%q9)l"JbcHu_n'
%>!OuL\K^"g;(r0p[%=e:5ls#`qu[jQWUiii<9t,:D(LKQ:6K,)70Hkr4C*M+OPU%q5&.NC>Y8NY5U#/djeu_VOteXudgf'/%Q<&O
%jJ'Tu#A3G/!%hlNG?"KoAiqQ3/aI`%\c]lFK/ZGZ41$ohLh(*"QW8S(PMsj*&M0s#(i-Rr?m\7&Ru1E01NcD:?=G!,!T^pOBFaTn
%]@<)]*ZTgGU[=D'%a)K.kg(pVE4Y_^M(f;Q^,*ZZWHC3=a+04X@!FF4=afC`/"'K0Z"dJ[pT..==N:?([0e_K;#DAFVY.23ce&e<
%33L975Dt%3a,U#po'=>&mIKFlU-YkdrMul?c[:<@jj,U<#m*[YcF>@H8&>T,.-nUT*`Uq*WY3ABS>K+&iZE9]>tts?SfjE\8>Tbm
%!]_i3(SE/23(:mKLjB&t(=:^A9eMa!_'D&UhXfYjWlNd(mnnP*5oL_7R7sO^(jEtC!iBFl@<g65%TEeS;H,%gSb@ng.j?A".gOJT
%nBf6&#5>8Kp>[YjF6o#:IkG:)fQt+a168.B2"59YPkh,T#0LP8Z?[.fO6os>80:&4jE@VcLP/q/*(/6AmFAQkWP@X32sich?'>CE
%q@J^g#aj#MV.o=A'V3F2NuK!8b!BnM6[oLf-+S+oYLXA.-k7XEq*Z^r7C<A%g#lh.??*Ca418s4eO,%Q'B49cN,e](IVV+Hj3jS8
%O`&*96QPoe$qb0gr'bO:A\+EYfF5CISb.(@0_su=TslhRF5XK^%=PdX_9*D?mqge)MHn-mFr'ao#3KU4S]0i:#0g+bB6CeVi<CR:
%ZTR'hi#FDZ1I'^@T[CmKbhMLnb>rLn_/<m,"4d&SB=G4@&EG7K/,1LUWl(Au1u7B3`ZIU"jZ=rbEN\7O!O3[6/YRge^IsP_-?p+0
%\6%s<*dM3-D^t8O:IEq@']`.HDNG0a\2%Crot`#f;*Xs55?HVoPG5tdDYY\!E=c%NgnnIoGS%6<W<%3ZbuTBgiY\C<[q"XY%s$d.
%c&YqIRMm7.b3QGXYKRMt_E5FdHatm^g@WOXjN@BC$U!a?3QRJR-li3Iapb,]8@-URF\j0mD(g<;WH2/`4ApO]1F0^6):S+0`OdsC
%@[$b,8<#5OVd?qthN"&)S@k7KgqMhVTB$>T9l6tT&R5TU_KDJ@dFajr(VjCb$c%<qX9T#QU@eMp1V""4*W\'L=l7^S;8a`Rei,6@
%)-BBW%4dB<EjUt%?`Y-F.$'B4o,4$"0MHf3p39d"\VSTJSsE2Pd;YHXUUR;O&7:.Oi'g4iJIn]tG?9RifV+`t7qDUFb<$bg<BF1W
%PHDcYC43CCeY-1@SA<E%g7hl/?2K<X%[W@Zd4l\<XEaPV?/D&`F=^39#&T1I69_$_n>o$Q>EFpY,ZO7jgF^R%aF[O?C;t%6oL;r0
%7%bXg.L7eg4ppA5Xb)j*W'i0.:+hpo_NuYB:@,;M8fA*7H%K2=l'FQmAcOh52<R=FG94;<id&90h6.rO;6NhV?^]q_r5p8O&e)k;
%PG/M`EHiN*C@]5qa(Eq7D^(F?=%sRKX0HD!-2Sf5mCn)`T<&;uaH&lUBbb=ZQX!#=`.0"B1(U#-er2#J7X>%;ojF0[4#tdE;@^lB
%V9Mk>^mSh?b!!L<;q4PX'e(m*jgS`)]Zbk\"!lF)/2*Y-aKPbuWt%^?,b;qO"5$)='(Ng/NT`5Ci+=GUn#A*QBFn$1]0YM3ba:%$
%_r;\D!V+(S8s40bQjJ.J/3Y^`AM8cV0uToKl-RMi(6-AJeoV>6.m!ZkCE/\b-X9f3HrWU/+*1[uI67hWXWfr9=Qr267tV^cob_3E
%$NCtnDq4WnJe@u8;4e1B'X;d_46%9f0R8q=d"ePi_\#m1+P<*?/G[]_&GS$I@HDIV6p-mch?>dK'WCkJ9Q#Eq4er'/Sq0hZj(=#%
%M/G4Hjuf?;0Lsjnf:Q\RUP9528=+L+,<b.04f]0M+X^atq)F>&A1UrRh2o"$O6+qWPoN-rCsuK_EfB6rbRLuhg*3*=Tq*<sK6J7h
%VUK[3%Q6j(6;I-^1p?Qq"!!GCWs_RC<idG*j0gR6m2!fD*h9E)fn3r3e".5W9/7=RfVTr@]f;$f%dj,fGbbq$m-Ba5\d+\tnD7$R
%5QN7T4#+]4fg,0SlEUm3%HP3r]O0Y^:m7Ie=e7!%KNU.JP%:<tKdL?`^(K?oCLdjA8s4`&KosACZ8!XRCdm28]MgiMEL"mp\h7-6
%dX4)4`*u/$S`AP3b'fR_7Ui2EUNOeqijMSH3>SdmZqK>AD!-M3q)F.S7-!gU93N[)7*J.)Z'\Oq"rp"i:H*0+8Kub0N2f[bcDjf'
%GZ!kEQ2`kIje3=u%Ic6^f'o2Fdn<u6keJSo24rrm9Z>WhHDGmLd^/=:fR2c<7rGW0MjbQ9*`5ASMPVMp-DqGi[>L])]J9pt&h"pm
%),S]/3m26^)D=q<3&\19oh!L++o.:=3`?9Hf54'TiLMNjUABQWrIRZIY=;(ec(^"n;-0E[RC[Ds>48VSiPB[2\]:CF>^*At>7*lK
%C+aEI?i'E56P)l^En+:>VH44fPaSPllW(hG3aFBHlW"%bQeVViHIW!%J6Xt+>rBX\+6C:qG1E6Ai!ejY;Y@%%2hst\Q8)1=)Xud[
%:EUY,jJn@4VQSO8jf/od43:JIX]Gu(<3I4nXr:#5bqe7N>W!G5L]ptc)K5qDKjAZJ.*GYR>8N)s157LnFc&(TB\CpGn%f4N+A&NR
%3CoT9W23W3@Q,aSi"6NSfUG3d`esI/W?0;T>4l;+UJ&tQWX0WZBZ[7bO04:&m$d1VTL>J;m/!^m#IZOH%_1`?0]*YLqP*8m6b?6E
%31)m'(6(:>HE$P:%u3^u`e>PCq<+F+kba4j.WSO;GcJ$c)D(aS<$Ua%WXmk18[ZtDh!D:VU[#a7dYI)<e#'CCqWd%E;s$AM[a7(B
%';T^=DR7r:]'dj0eV=7Td<:5V<`lpWX$Sq8;iQ%)9f1iI=Z,1H@;o%,mtWl$,DL80;,qhjLrX(&1ue%FC;`pnW=`WUMFQrdP=H$&
%Magt41/<J=WY&`nM(PL&7U0>g9IeUm,DJht2.E._V@b%mY\:t(dYMmiG'Zgd3(YeSZtdP$1h(JL#dS3`0J&#L9Q:flo;nr]*).Z4
%r$_DQd>0GFl_$_[pOIEX,7](.*NEp7AE/P6pWF@Pl<k.]+Td-i6l=RGSgQa>#H(BhG)di!A=@L[6nT'RaFiROk/0_]MN3CS=O;1?
%FRVXdp3/WUjN+jc!MqEZQ1=E(DG=,-XE#GG,V_Q1n!Qsi3V*6%2dE[Z6h'_%4";67@-S@\)7/(@fM8H:?(EXa$`(e>RX<[$7-8:\
%mTA[)8($k.'4&^1W7M6OB]b-Z5C*+a"*-"`$N$4OZf#n&(R8tQQ;Y>RI1FaO&ba&JYAN'')pYaF=%J?CUQ^@i'HX1ir=Kt7FHP\)
%O[oTX@6&.sE=13q.d2aN(b;(YE>0Ek+)U*e!_!8t+D[/JX$foSG=gUp5J3p(G_LZD0tTn62NU"[;^HJn6K0=5ckmiF"'g/O?dsl?
%hLX]gkRe.KO)\oV%Xi4o3<k]Z?Z[qN7j;dh:l!9e1cYaYglOJL-[@'le]eYTgMnG7\_pRU%)Y>Ae12AW6FDa."Su,'b.SN@\V[A)
%'XN`XC.@_Nne>OJX>/uE"SR,'kBPNnam1:JIT@$tSn+l*1$E"-bmfj+3jc0OJLL+%)DoknLBYmKgMX0A*EU>jJe^M$G64)S<=4La
%mVmhs;0di&X=BHdFKFJU8B)/%)J?+D_EWtISmq[%D%DT8*)8uF_'4Y/Xh/\2U*a13Gg?F*1Y'.,`R.7NhG"6J5Ubl]Q!+nsnC7RS
%6s]kF6O2EKS<">*0:K#U_+b*"9g>;UBTeaql-7AJ$t[qS=cYkrcCpuG]1_$JUpZ`D+<>u1c&.M8Sua^$Ul4#fA'HpS&82V+NhVfb
%L05fq<q[PM86<c`RU&acH^./0@4s]b/Y,_opNKi++iV$r.QcG8Fe=X"WJFr%5'h!<Wta.pnRkE=Um'TmGWdT`Y.TV65sq;Ic8Gl,
%El8BK#)sG:lm.T/&I6:sAE6]).Q.@tSo6(eLBpYFh+ZW<:rb#82)$XhEIr;;N.U;q?n7ad5XX5`6LupHFc<u_72gO'K$?/UObFio
%J1?AB\A%'m@;9h7"+F0f.$[N87eZ]-+Yl3S:kLYd\`B)oeV!jEaS%%ZYNIAHV'gJ$ZP12C4jkp".'f'6B(rjq;nS)6ln0i,r?=8)
%Ju0M-</1.3Rq$crSjNS/,.n8AF%hp3CIMLKi/&t!YG$/\gPQD9#i\pX9I5t5r=')qA'hPiBYXsU8A]V+(1eUPWrSK_eBcO#jrPN%
%4nG`kLONKeH*b:YaLTKmJ6"7g$"]=i[tlflVH[:lF1*qGD!:<R*E`c!f>dcq?*u.=c)-pBIBjp?d;ck=D0J6?ed,T<iV>4$'PZ'1
%LmBKqae>]\f)fW+26gNp9\n=irWJd'5STh1Yh&FH*:'DDhCfi)+/*FMob*URD,)4YLGW*\\d6`XW!r3m;LL)MP_2I1[F>D52m-X*
%2ZTG?NP6QV&:lXWb;)F!-U_-8-IpI.X+5p=*g-lLXI<&7i+5N8?LV)WbH'hK9!?PB`Cq;VH#WFE$fbr1(2YbVi%>7IkN;HUC'=qd
%*2SR`)fX^fEfWIJ75TE,@6Qr^kRL;m6RRQ4F4#H8@$)[r<QTrZ?8SYH2liqb;.rVT2YqocOqao<HQ`#m3r2*M)-os.1oITf1qFdH
%1_d\Skg3WC0@i!-<Feb<))R(--eV]XK=,<t',fS!h%M_Q9Ol/6Ma]iNItYl^cE,)fMd)YX7[uG4X2ETrW0aH_o%:u<`1ot*6kYf^
%a/XZ9<($m.[?N568PUUa$Um:<G^@ck5ZOHe7kSpaDL8.4PE.8l:k9@C^E*3U,h6GG+Xt60c'qau7LM+NK/#chYp.ugdY-Io;0["k
%fmZ9hcl+\K'\pr%Fg7s(+nfq2`O18`8bR2Sk.t>b><,Y72"l4#O`-1-UL&`q2P==:g63*ndKp']9o1L7mcA?H1@?rTZ^\S_"!X[F
%Vql2$J'-u=D*a7:3n&?lL/<0_f2B/Z)MauZ?lph>*@SF1H<#TQI[&rN<:Z,[l<C:^gMrY4I2*dpR"A^6MRZ8oO\$9<eSpK:[g\,@
%q&,'*A&0;moTVo^o<X":du40X2FMCM.G1ZW>nYXF2?h;bKIWdb[CIRu+td8ndCCm]d%O>pKo3tC!R[lFJ(mn"["8mSS$L1J'hlRZ
%PrP(M;UGY=B6T;-'f<HRRl<4I&XZ@B&ZB?i[%U)MNORHZ%uO%fob:kG)51:`*eoW;)\U,,QR3rc1!-*nk%6`G<<c]SQ/3J]9OEt?
%@RJe*KO78M>CkfB)t&)17e:_QSfG:&"]BqbgX%P;28V(ALGMIEfl0FiAHPrf!puli_B,\-R:WXS5YHkH8YT!h<I=V:K4C>5VQ`io
%-Ac1>T1!#/Y^ki$94Lr"2GR5i`V;8:P69OW</LZjcohIL#Il7"Y52N-6f/tnB*.H+@h&@eI"ZGbht(PtBAu+WBeG5/[htoMoWeo5
%.;\fc\8CR-;W[P+Brj`01_^FI5Z*P>"?COWG*n93EXXbPLt3r00-Kn(("8Au6aAP\JYh5j/.G&9AV^Z=ipPaC0T<%T_k8=^SG"7r
%:IWe!S"b+2'['/DIH4(r_Pg?XWNliF[GFRiLsJ$,U;uM[fikO['je'49Z*,E>7;re17V[fEmTpj-_ao2K#gXK\mERq[@qXW>I<^-
%iHdoQ4MTS^>sW.pDhV.#0`#uC#MW/0eeYL$le,>A2I)Ug8)A2:Q9gPJ@ju]*N"/e0!c9su*hiHnjCGH%Ql%W7ZVXDK7]O>e1fPkI
%Uh82@)$O;@=4HJE[eO.Kmpl*BQfQ0YY=_UV?R8L(5E[DT[CgVo(t#'[g(P=&kt4/m<H#j*N7[.AGi9Z@8)Ba2\eFSS!&Ec.ogu/.
%O[OtE3V3UqCCKbgE"O%F/O]DN2)PS.a6ALL%ZPi0\-/V,D5.tr/#?ot&hQ:t<9/Th5UlCSgrq8jJRPMle[7BaL\UN+`jS#FEr%Y=
%,&Q@.4[GM_Ess<L)W=9@f>E8N0Htf9j+N#cTa<N7IK9Ic`Q?<gg(I0d=`!]+_192412*ko9[(+Y]Cfmff<5k.NRTT&3hD64BOo2&
%"Ssbo>TE"&&=ooi;fT\"_d5jg!lg&T!3;"g:lsTV7XK6*?nLCkEp?IVaf&q[dTha)bL8-5Aa\nN9L&(J1hn#MdMS-fORlpq1#fI,
%X9O=FYBBSASBu.A_\'H=%Qg+"Wr4UZnI*@*c_KC%lY$m!7UO!:5nVX!]A(+E'r"<N.f30BB`UWg:24$Q7Ne2M=9KgAZ?#u!?<#iJ
%W>2[k]=59l%&LO*F,r8Bal"-G__,DYYH8uTM[E-+rZX&>.PO.c;C;lU>_:%'X(kmahe&"uEKQVj`*T9p[Z/.]jMkcrK;[I.RlcMb
%G*Q+oG^)=_MH&&%6ekr[d:YgnAR5iRX$&Bsg-XDrJu9\CO(7n*[)+o>JK9as<VCe]RpUc_pbO1m&087,B7Z6PLRQH_6<5>YE-m:1
%2kLF)N8ocLp)(]PYkU5;>D])b'uZDMNeeKioq>G7)P8/4a'=S`AmM6j]\>&P758.g@uB=o1DDR>-2BBG!qQtdr,uoad)K)![$VGj
%U^^YAL$DS-9D?D0%EhL!K/QQ$1#jYA$6,l$`-L\74Q%%IEcCaH<5CqZV0beQd_2YikmiK(+0,9"%Ou(<(Kl1&d0Iq#ql2!OcpRq^
%W&M$FQu]$[G\Yn\<:N!R"gXu%(;SpTE<2H%=bI^Mh#M``e07:Z+J>AL^p?\\ha1FXI72A/CgoZ+aDV0^D++T(4R*VE^5A_>N%8?T
%FJ@CX,E]HP)J%M8BGjiVo3sFd:+^bfJ^(*X.[iimC63;:GnB7H+.`gG*r0#B1V>Okq&m!!<ON%E@!J&,TqN"&a^DY2?%.[d2!ciO
%Q"i@>/Pa=?2^'t@+VX*&-o*99a%_.c6&..;,!=C2p4$giM!n;l#O'+5#uqFP+W\-2V^mBNBjAlE[O+g9O@Y6imLU:&4?'4c%3;]0
%*M8Z>7@8[]i!t;qd8V9D0M$9TUOr\<EjKb2aNSKj"D8N%0Vgf7_KStiA&u:*W4p-pN9;9eJ064]0Ha@<>E23aEO(6,V:-fq_!4$o
%$YG;`M_(fo?u'LN/gm]oiHYDQ.Eo'RS5A-,$(HXM1>;DtVGb[Q?^t65BL(Ug;aH?r`X#VR:i&R.RGcUeb\27Ql/E*!i,',!r?:5"
%V\Me'-jEm,H70q:Su?%J'XKS\nf7]U^DcCHVk"+FO9*j5Zq+0m1q[kJZ4os55-'+K_or*'Ks';H?]PD;c)?[kN;da*Ar?CJ\:X1e
%PtV@6Yi!;Yg<B+"nQJ[$Kbt-4YWR(T/S0==kaB))pUgVCa49&*M(s/^Ck-p(!._B^?g"Kmki2/l[39E,ST/mPH/]*OK_Jki_)e'm
%!C__Up<'8`_OSNB*OGoXn/He--u-tDWQoZNM%q%S3OJj59Pq`Z8RBX`H9?r?H_DpPSN&uY^&i$I=U$%&VPOpNHm5HX7BcS!9@-rC
%4>b@/oR:O5jD+bn"3o*-/,fMC[jkF&g6RIU"6,eRK0-_o&7-tE#7D)XV>d\h[4Upf"U7V$e7MBlUeV`5.S+Y*&%`W16ijPu3$@Li
%,"cp\VZ>3Uf+@2?7#\t\A`u$',Y$,\-UQtP_K3E^$?e$GP"N#[GV^D[5#LMt!>[BWe'@\/Fe6`uXR+hAqeQn(KJ,_h9uma;@tQ#F
%-7VqI.X="-ID8-#aqG+Mrn%iNA3)^2lUusDTE+WXiXqko!c_Kf4<g[F,"W\"Y'qR1R<XB,FDu^p.A-7g\&.AGM"p8oC"Ym$.[(U/
%Yi7(d]rV"\bf$0qS6;/5"IR?nHBNCr#)MnVS^q$rL'QJjZ2VTkZ$]]pf'O`se>6*UP6%FsND2&o2\%kr]9lA*@V6=[!7kC/e\RYL
%*`lgi)+Hq/H'0"#K=[Ni_7S?,3g[Ihn5O+&'n<>\4#4F=WjnkaJ?V[LXA5B>.eXKk2<#(!m>OP]N'm8Q?Z,(c*25`+"Z10(/['.K
%9nUo_8%s85`Zi\ols]8GOipB=o<4RSXTr-7LPJmVV[8-25rr04rsu>pfpWTWfTQk4K#['X#2^K62-*'#+W@2'afl.\N'%?Q(U#T[
%RZ$HN@iG#u'k\bu_AjA!A5Abp/8f71<3&dDUar`5a#Z`$jFTE.`%a6L/"5Y;>K0<Jb]0gXYqh?=B-q`m6^`nWnsM9\PW8eQ&D3dc
%MNS&UM>TCYkFgHd`7\!)N,>'RPk2Bc],41T#DNRQl#d*Y$LY(IHHc%1^7`CCfWq\g`ZOd3=M!sf,aLWhX[i.T+Wig5a+nnbPe:U^
%iaG.A$l,Xapr%F<BZX(lMEjOq%qguo2A;B"86o\JQW=rQPi;#Sdul6o6-;JdXN8YGpK=BQ64D@/IZ&4Lq[21o`ZD_2OIs$AAg(XW
%XuGA&.`i]!jZl@VK-BcUOR3EU.!ZiK]S\8!SIU/XoEbg`6!hdV/49A4B,r(\QPu"$'7+Ji`CI[:l5j\AeiL#Caan#oJFFnQ%>,gY
%#c+(Z6(r%iMS,8_.rt2=Gdq-^k1-T'5mA35@$'5#)&"9:p1[ILVH+h<NQVAG'KJps;U>gJT@"iDXWPliMCT?4>%i3j!NP0f4aFW'
%A1c?<37<q@Lu&ei#59f#OiO!kCZK46M2OVmDpDI`R[2i/-,L%,K>Pk;Aodk!V&SYpnTp[tK10i2ih1VQNgMN6l$)+%7qFL)J(l?=
%&D7qdeCj.m$H`TiiDQ:Fh#<24"KIQ:)@RQ1Z_k)/!hi).!g7J<5uAkE<-0csJ)9CG*p8SXOLBm$Xsd!/Os1o*#^Wd"bR^U0F2N%S
%K3&;lGgcjO#TI&OfDAeaf#gZrYZ0bQ;5-qSlUN7@eqC3D25Ak=CuS!nIHbZ888/Cbd3<K;;t%u+"kaJugF^/eo/YFqnr3rZ7r(G.
%T'o'^1"'W9%qLrEX\PpOZ#LA%s1GumI01RtC`S]4Vt.gM<\'gS\W*Lu9pFDgQG5*X\M.k5;@A1"\%=([5.!Fh40dY>3,QsaUZ%m6
%Zu8S7<`1-&02Y1b8Yc23B^uk1R1ZPg0YgrF\3WCt"(O7%mL!#7&G9&QEbSbG8nDXB4m:Me,Y)[s^fq!JB5He/SV,C1dhW-;pR(r_
%4n5bJ!D0pZ'2f@3o5aCp+'Vu"bGQjt4kR;.7?sZkY%m!%P9>1EX`d&F`#(,a0I"B-]YeFB)-Xrn#mfBklk^&L9gR>GkLqQ&HE:IL
%T[W[:g6*?jIYMWfnC"kPon)n5nP'B1R>t<uC?5bYpj$"CTHTGR\Z5n;eTUZ:K:UbDACVEOE:';M/9$Sr'XUCR3`BtWoru;WW+Zi#
%LjFa$O>8B--&V;g?ohRmf1oD]Ha%jDME"ce0p6>n/ut%b(0U_aUnP%0SU:l7^c^W@Le`/UN&YI`@9tB2[FK,2B4!gSYC1<ODag@q
%:F$l=#*OCMYQuLk2OOHqP?tjZON^g#:D'.XJ8>"W+9gMsi77,$T0:i;]k92u(K[Lb`J#N7o!$0?`J>(#A%s-[8[oQ:L!U)O3M/Pe
%"tLhn`I`).OO^b8\p1gam(n/<R0@-)0cu3pUBPphp,$W!74\9a4WSU=(T>-P"_bt9/QG-b8\80qU:TsB*ph\=r>B@KF&=<[3!h5>
%)N0T&`g[tk0f(R/$V#%_X55K@lo+V/gP^Zb/t>pcp>(?agXA\an(R-PC!i.W4;h-^Y8`c8p%.VD+KgurW$J&P!Y%"_KEqo_\!M]@
%g\Y%3=`nB74kR)HFTa>X4mEhU/^8TBM`%?HmfZH_9m`1!(]DH'YPM2kETu.F_5l+WIJ7-qG'+D00KH%H8+O"eCJM@S\:S@"Is_O5
%G/fIT67FJtmZ$s],P$DoO0p*F1BF6#SUL-4Vu3,1!p0k4CtV3=n3%-$l\VXM8/+(W<0A]9&Dq$C#e"!eBY!@)B*D'iC-2=Z_2^[8
%+cp5:.:l^[C$AoaVX\7d.KfsEkIN4C6msljSkHJL'FU4$5uq'QlD/c>h`]W*>pVnMkEW#sHTnuPfi)s1eKf^4KZ9j,":Ife(4"<%
%4HO<oZ4rNkX1>^P<$rQ`cb=b1H[E=0m:W8l7=(.2%_$AK8meC'>fa6$_N<Wu#sOC.>14\/-0sR`JeusCI.q$pp2aJd.u?h<.J3;_
%PpDq5;'U8LJ=?WH,C&S%Kk56P81p;g&s?ir^J]#T><?-dlG:b/8K0r';\^`&,am/WTTp%IU+\s2e&?I19^37P.!?u<9B%(gjhdnQ
%Q.diSHa%_kr_D?C@nP%IQCF^pj,A#h/6]3PVY>A`E?g#_jB,B%<EriG]2I1u2\1(K:EKo(MQlt6Bs&N]mD[-1@R?)9KJD`1A6b8u
%V.>p]A..t0>WHM8lS[jIjf8X`od&Q'P;JVploLPW6'edA>$nFrBFg7`faW\F;rPF\bAB",kH:&];VT0'&,'m:,=+C..`3phT^j1m
%7Y4p'.gU=VF7+tB\/LT?14StkV&JF4^#Zi?.!VT"Msh_Qfb;$6^Qlg'Zs%E*eT%AuY7>>\f%\iNYNpI%?E$3dNhD0#'>GqI\(H["
%8a6q)[H5l&cQ;H/So0.'#R(jCCI?L7Nkm$m9SFPC5(IATAmiMr,lDZ8CjNL2lWHrU0*Ur=X".i5SUL6?c^q#"KFWF>9`"1PTX?=!
%oNgU0Y'F'?`TEcOXRAcd17+08nm'f.7h><1=!n#OCm%FG]UU:7*"lO=#4F<'WjE98Sg)`JS]Ck7igghD1W-p(FHh])3EESflf+ZE
%]="Pu+D!BDa7t>sM^c8lYc+X?b8#=U1(jcX'n,u+3,sp#Pf*WBXk]2a0"uY9?V_k6eCPr5(-8ipkLMR<6gl9Tr>=HJTu"Pmb1Y)s
%/j177(YPVj#SCts/K!Z&f;cGrc*<Uq?'fB7Y4cb8X*Pt7O%n%3`F8,ln(+TiLqjIKll.]]&HW:!^&7Su+KMQ4l7TetE&r2#'G$d!
%3HO/_,8RrM7H4pjEo5nGN%C\g+S:`s/BKW*pj!HtkN.F84g3&$Y'fhKYP.UPi5^T(IGs,5odEqNc/RZLM:YL(MJa1?ecJ+)bZTT1
%0<WWqUL;gj6uAW9W]U+A_+sBt,p"^i3oK%_l-cViXOerV&@OXRd?%F6AQs[$-D9M'V^*9j[odTJm]<j=]):ieDXDa-ajK88/uO=<
%5_JYVB[tiR>a3XO!)((dEo_jg!(0,\;F>:8ButsP/h#8H\[ouQ*p_Y2bU$\V>Yj(>KY,p4T^,]-O@TB:bFt76'*j(0Zcub?o%\Dr
%+KJ.JeX_-_=RUF`&pj<+-7IO.O5bWH95MdC<DT3Xbe6[t'd2JFd?@1M4euII.sOqI`HRAclq*=P*Y.)$qdo!Qd0@=MlbM]2R'`7>
%3:MJqBmgkCZ+!?95"uUSEkO-6Q.)"Z*p_OD$mcs4SMd3WcTDOa[.q4Fd(."qb[o+B67'.Klku?R(2R"_o>]KBQ!Je1=Pn;h,eX[J
%h'XZG.%isC/7QnKL02AcBEIJYHSNW&/JpAL=^BZZGQ-9*h:d:\JK(fh5BqJ>HPEj_^,_FJ_aptDS3TgH6De6a$g+F]<];+T=2'$_
%A%Tm=_p32,%e1r\<t.rJ%2Xs<h=Qh\1jtZl<<t2.Q?#e<=]q=H]D1Tp?9QOmiaBSNVR]%ZA(Qfi-CaQuXcJTZ_'!K@%]QCjBoK(b
%Bu,dT.+RERFVipuf"53>`/uOm'NZ^JlrX9uj$odc>.Jcae^EQU?(lVU1Mf]iWT`?"LUu!,ju%aHY@a4l91#cJ3ugP%\%<n**(d<d
%kM%9-UR:t*S!6_Q.9JJ3=^>78VH5s.XE2!C&S=qA<e&Y8..^+]$7A&klW=B_Es3sn1Cl0OT8LZl_0W\olhlCU3jbf,TF%EpPD0ft
%H\+Jc4fj!`[/_YPWcd&@;EHRXCf0N,Dects?8+iqJ(3c/^Nut_]2k"-(-e$WDlH51]D;If"BdNL:G1oolrk03a.eS.i/&r[??fMT
%T<u1M<o*JUa1AZo"\E$6i8=%_X%R2HVZ1F<d>f"V5eb>8bG5d![Lg^37Y.K9P#tF1.)0oLVbM:Mh`]Pq-T['6>rXJ1VlGak,lcBs
%VLrj=PKbB&A_T%.d@$JZm4U'D2?d5hgf/Lfh.+.QpCO<B>>NFO=3h[:1WF+?!psC8c?8Fu50C@ccM!V@N15F#/So4WIe6a?p74R4
%HV@V$[4Whn-^"A5:I(UF-s1_G@g!Q\]#:WiHd"">$k)p<EcLXCGP"nMr9U\;mHGSToZ5VgHZqsKO*7\:e88i3F)!DldZ1gf\?De6
%WP)KmC@HXUXuS:Z09r)VoiU*XP%D/knlJIFLSA2t6+/:RA!nEtWTR[e@<=&E*8Z0,_H9?kc6X'jDMRZ@P4^")8-QX^hl6mJ"?rf.
%6p:*<-]jNWSE4aK+AJ`o8fRMJYX"3&&K1n@H]LO,Jcb-r70644dQg.b6ZnF/X[#A`0AgV'J.N(AjFN3J+-8\fmu4d&aTF1I.<Hg!
%%/^neiNf4C/OGC!'S[<1Q>'MV6>l;qneM9Tc(FZS6+),Tq5oC4.[h'2E3^%r.g3/)JZ:V^7/lllM0^B2oXCV4";GhKgIJPFL>l)R
%2&\5RrEC_;V(]nMMMi4B^hA(j?0YNYN1"4n#!gJub7W`lR=>@`@(!<ci6Lmc(?Q4/b4t.-adEFn[nIb+[KYXg,A]/:*P?YJn)<k^
%iMS1Bp8*=r@?>/oV&P\o[OhA'd?pTPcf7>enWM3&&8:Af-)9r"e%![oiW'=SQ`7#d0[(2(..h4"BOd>]E5<)6AQi75#n-Cb&hHqb
%ffD[FF2=(hb[2SF\h*gI`BF>5.f$3A2nnX>,g@"IKH"W>SKi3RJ-BG?TQF>`fTpd4T:fou:+/'4I)D'_6W5AtL^Lm.jb?1gP!gVc
%N;s"a,R9,*f5,#[6L^?GgM7>Tqik-LZ0'7T;5d\qX?e(!_?md0;"d3;J4s2fY#Rs^ViZ!_ej(`SOTS*ZlGJRB)Zl$#nMt9m?8"XR
%EK3Y?B2[b^L]^JT&ONc>OK0R=f90rL5T5iG^#7rq$s.u%nS9$jXGK8d-7(L()=TJG&a(r'bfgj?A]53CZnF.@aS72DeB'bfHrj#t
%@g(/a14'!7>_.0b]H\'N`F'a'R"B/%9hT'!D[\sP65cQm5#:;id#YR!c28Ac`<@LQA2T"W&_L)p8]"f-Te7JTY3O3VNL<SZS1X\Q
%@$ffOQZ+>5Y:V?[&lQ(Z<tZa'AV3NikQYQ?_jd@JN:&!KkX#hbWV%57InA.o5G'3Z@M!0G$UR6tr$:hAqLjIAc*o,+!o$bRqB1$U
%pss]hD-.^qZXAFF&<kbb[7^K;8q.kgEOq>Yg<85T!j?c"EZSj$!l^=0!Nkd\SBmb-0Um!2f93W(Jfqj`1C'TY5t>D>2tI?O?Hd"W
%6kefE3)"W=M+H?E#?O%Ud:-hU!JuTfg(H)rAT=DK>;Cbdd=1$ga[S\Y/c7[qPB3]Q*I:Vc]<ngY&WNp?Q:D:KjK8M?1T;!"d<WjJ
%!PTe,^gV,)/<d^p4paa@fUdVXjXqc;?35,&/p8sFbm[E$C4-Ei'+@Ek*jF.=;:[MKntP$\WtJWh#\a2WMZL$RL.[u[5SHn(5fEsC
%#n1mm_1c)hQ:W3Ae=C!M77/;)'p2t3;`j$#a4)fi]%JqcO_m1c@#4LkjuFP0:UJ4!))\GB;OA$^P%@)r>RMtR+2i3Cq1DEY0>=P[
%K"P"E>O";`iKJWs6^EmG*b9N*9hT5(il\=^j$LU`^r`%d]p]\Qm6M[>BjNcqdA"N%"o4S9KmP["cY?])=J/6E(:XMs5o]n.2))&s
%"dllp-EjX3(B;F4N"24<kO"GqiK,E)/m/H-\JS&VTG<tu1aC9bOCT+1Jf$]pX`oIc;s.fSMsjEETFi6\>h<b=,>oChot+li<?>\[
%pTc/OMA@na;i-SrRlPfb&1ZuCkc0`j!"C7JAIP=#ZCqY/r!=pYMN[)iNVF2[ek`MbR59%TOLCB*T_YtHL"mt9;'6Ti\$m&2odLfM
%4^4(t8AE`E]il[_K;#j0lo:dEdi)Jt=!d!J;7-+9.'-`g<`i\6_(0Inp)K9::OE)[D:tD</OEW,_I_G[QXH2PD#s@qbtfj1'i>QC
%1NJ\Ui9bP.:PiQNbC&_`"q;(6R1/Z[.L.IOTkrlFLsX+bo%WHR4!K9*$Gn2+qaf"-p-L;rNM+"d+#/36].GYrH,ht,^8kN^-!2V$
%)0.U[#GheS)PZUOE9m\$\k=IHUlbGLAM=-CgMsKV,qrgC&dt^^H6@1o]e]B'VKg]4NP-nXd#dkq3!V8d$^^3VSH4FZ;9Y!a,r8ma
%o1?)r*>>'iKbR-HO9c+t'i9/6%3*Me7GVT"Z52>WLmnt%PA6.E=DaF=U[gZ:T;!MBMui(_1iCm9^Fd_Fb_Ud+MSa91>m3\OD/Sh)
%,OaQbG,N6P\h/.YS.%Xj7>6GJ>NM-d4(LRUHY2q<p7kn_AnK'tT`PU!:_t+MiX;AE`!Ii+1lF(TJ3o1i"&k'jUj!^8'j_7lhG\=]
%i32Edj.=&C$N[f2I#b[5W5D?JA4=X'*Zl>CHpYQs5Sh5<QD1U9N"8C6/"Jj^8%W[Bi2.]Hi6jA<bL)QhD=<-Q4_>2WdVkm9OE^7M
%otjf8*;oKL*^SkNkj*Abq9X.UCZsr,"r)[HNXa>ZdVg!k?;[Zi/OOs>m:2=D"f\Wh/l.ep&2;t7CG`>(bXZeND%u*>QWGN301QC.
%1aHWV_LkZ`blf:Ppaorq,#+FlEElh9K2AB]oNMdKc?sCd'V%.&+T]ps5sgd#F[nYY6.3L)DMhHBTB3UE`)=HcoV]rX.pVA[Km7@*
%6,27JA1>%^GcGa%)Z00G#laPE!o*C*7F7X4GR\$Ql3:%1j`/Gcirh:giGi=36`4/!;gVrBLn'(XrYfH)+t!jmStJmM`7BY$`_Ze9
%7sTur)Lj-q#$HeQo[Dau.E^_9Q-%,mBhY#mnP1<Hojp=CEJ20S]nad2Pp]+pa[=6_/r4`_QdSjhQ16p_!M71$]VTZ*2E)>DI"T=^
%&\ZId`_U`\QfAK;JJ7?D7tf%mV@510M&KuXdp'n`mO%@?;)9GY"\:amR0d)Rd-9<;W0(RM5WbBG>EDY?8)_CXU*(]ARD4!G:?Pdr
%]6tGnW7Pa#)^iCfo>]-gRS5SPNFQ0R)rr_/R'_qu\K&4k#N>)<hA7R#i(@#o.qX.[-dDlAPGSppX_9R9.m,M44h-`t$9@[1aJr!'
%<k*\fO]@s.X<Ng0V>9;!b"/C*.$<$eQ&3Rs6((:uCE'O>KU\r3>WnYuIH3ST<-e"UV:Wc]dEPb6Dr-!`'`[pr:Oi375CNJ/LYn`<
%q<Pfpec#HmO2(M\Vt[.aMG.!,WHAClFIIauXi=T,+KsKUK\1HR@N_Nc^lF;r2E9"_I9BMa[@[\+^P.3]4u,Fi$r#kA"!Rt`IC:"Y
%K-HL:0/IRDf8!t2gb]gr'4Lg`4[*ui3+9%:3)C3"rm=pRM(@*a-8p[U>J-*=Af?I,(C'PO$`)jXJ^qTQ<?a8br<q$HLe2-=S%!pQ
%m*uuE8^i=2]H_nFUYGH.gV"NWU-+S#LAPtr_"#RS[/=[%OF##+`n&ZkM^HrL%Beu7N2BS%0OXgT"XNT*7#f-=EDRI"4XAM!9af&4
%XYYfaC"tj-(\W.0_'9\9YLC#1&YXsHYX<U(*kVtE6q*-8:BM-KX'<b.nBfm('s"qT4HLnE;]Bt/+NW-(#+hD"b*/b+&':3,R*Q!9
%8nX1or6;k=2fF^pR?pJJ[4:V&!#E;\/:;Y68t(J&/fW[grXcfUCj^FE#-/jblcOF,>H.,J-0)U1=P^!)/)OW!dc(RY[o%AY]b<9Z
%q+Y"dFd]aM"IBip;:>)J5jA\52%cccK$.s5QcP(#qp],,>*qe!IOcJ9V&R6^_g?#0JZ8j>YZM:L-1WOA@hgs-1LJW#qM1DGG[Qd\
%B<sD"a(5ejU6:t-cX9[*0r[j6WY5n/+[0-pbFrNreiM)fV/g6t\?ZO'/b,=MS`@$;;A26\q&nm_8.;;&'M9VR&S5P'Jkpr]!3t1/
%3D>%gE>i,81a'[.0S/^+mTF!T[5K\nqt"Ihol_S";l7e)FSO$7VZedki%1]6U9"2G/iW?.ndl[P6@^T0a_<=^8h+?-$m6PkhYP]!
%W_+l>]R&Nc\&VB"^<`D#n:o_:\!V\iWnRcN<q&EDG@J$^&;UOfa]FCRYR5sDe3([\HL]q?D@hpA!:-["b%H>N0sP.*4!:NC5)o&s
%"`S:_hR%>%jnWg,G39I0pQrYjnG_D=c2[Zr5Ig`2/)(j5npf*qs/:Y.J8#1d8#H]CB4(Pda,f\kOji4UoTt(+j,X^Kkkm[Ep4o:$
%Da49>kLstHbF;Mgrp\T#>jL*=%D+4i`pXZ;iYqg6jg`(F=Sl;iHLi5eA*l;i)8toEPN;T+=J('ig`"V1s)9mI3(-.1\%SsC;o^r8
%Mmu4=65oU&IeK1SCIn&0(Ar?W6Q9\'AulZ96Z.tXZ.1N8'YJ13:d<l,2I.29&0'5g8q:K_?&l<'6^oS3VQ6]Jo,@UbeoeM\Uc8>4
%#r7/E?1$sh55S$e25L1bl[#(\6O-1aeoc9/\fM[5EA_^q!XG?`H9%31XP./m`sO3g.q:_!h-/d3;ho+4dDrS9S]^aUre(0q2ts2]
%N5'l>iVo_s5Q:W[a7'&[LMu'!rnmb%NCr[E/dG,7Z2dt&_SS)eHoSpL+9b]16Yonr$Z[nY2Ms2[$Bf!G9pM-^?G=RS1*W"k-6M'[
%l-3I#:qH0NO(J@'c,NlD4)&gBf35_8)d^@t>4#n)5G@!9mYJHtgGh[ts1nY!IIlj<^O,_@J%;<af^m(:cQjE`gdti[#7(#tEG!:4
%",@Rb@jVj9BhM$behj<ci')g\4SYt]13bFaTu0ct^?WdDK"24p!iP:1[`k>521@m[5<JbRK,==!i'L2@V:pLMBEd@WN!2NTJ8Gr_
%N-DD,I3Cr/C?r'fl0W:pp^+O]fE_Q#oI-tA^0Cg8LDSp@e*"@Ls5qp?E1-H5M3)&rJ2L\TK/e9Dg,i8*'1tg^,m@@S-hm#bc(^Z?
%Z-mf_MX4e)02/m%(;7IPK[FU/`Mb_:`/P'&F^_M'iHGYcO2<qLL/h=lK#VSWTe$Q21ia*VHQre+U9H<c$(c^CdJCj$<WomD%s,L^
%Z=,I2>"MXu\2=M6bZ[4<[*&'1Xb5.bJ38cS:$_t`IkV'XA&hi<H<JQ,(;s(L8ILud1a-:\>i:$4#.`E*PGB\5foRT$k,14<b=%bk
%G?:^?ma1q4V?=dn%,o9?);#H(-^8#G.Z,!dhi:GpS>..Q>G)PtC3kFM,sq?n4uH(@B,Fr0FC$]oi>3cqM1lG9L&rjAm31B.B2CLT
%U]m!+H`M*SF!Rk&^S*PS;T3E]-KJLC<g#iT)>YJSp<V+QLh1OL?Q$dl#+_7?&)Y##1X-K6ATpHoCd/`O2h1S^a2dob;bc_qs/Wp2
%btsPZs7#o@%tF7Rmsb30_hX<Qm8&3KIsYtIOWQU\dBEQ$++J\5q54b4J+f?RJ,\E=nIP3.TKe)R)=3*#rCanNs5!E6s)IuQJ'sq\
%PPCY34mPVs\HCf_qa5-G(po$2\NV#5p\3SDoFK!_bo29iTZ,K$rf^^JJ$`TKS3a_DO8nI^pV6``TDnfO;LVs7Dh%Q]VsiM-r*M\'
%s6eqE+0;^&3\HlunDjKIpQ+53n\]E<cQ-AB@D-6Fgth^s55b@D]LQPJIfJs:iubBPRnCu[1]?N%^&R''LCYL,meu1$)\nu,ao1K8
%=1rLEJ#QKdhR?`F-E/IjpkGejbMom<.)hi-!0qI/FTXAf3\Ku$2$GDBAW`<0>*t.Tr<U?N,Djgr)M@H:/N<;f:C\aJTo/EH,GYS<
%OY+N&kTQXu[JXHkC)<e/fK`[Za($n'VSgmu,<Z]WIt<_'.EM$cpfo'BP78*k2=_fCLucPUq55.qT4g4XN)SE^+gsQ2@[iD\WJ0rH
%-LX"dKjM%[%%VjS"KHma@`eBmZh\utW,J,[D]1X^lt]F)F+*/TY-ld,L%.BA.!Jb4](^2E$lKXK6f%bY3nEQ"h0=FN&RL:gjKInG
%M0@pK7a>9Oo(#0H:U@-pDT[(N"n9:5T>>WR]I?Zn]\;)0\LK%S[m`)N6qW9f>f@.sY2bTEB@#W8o2`foo23&[cJXZN+!?EaTA!%E
%+SO^eRiQ8-K;!k_MtYnNi2$2eM.s5Gc""l'pM^.GORB6CYgHaG@`\M\Xr$`H;!Hg,o6Iq.'/RM6gg;/>LVkpX(WUOO"SZF7`P7NC
%/`ba($gj.-o&jtc%A:S:j[hDb-P)`Tb!"]=$\,I&lhg^Vn$5_1Ndp3'X9<V#E1:(,_#Es#l[KH3+&CaarlaPUr(hP5mMFn*IriS&
%s78lcl4N]m3T^uHc,ETlE>tIOfL-Uemh'6RaHV\rfh]K1&<(B^(CB1VdF($tOK8:N#p5>^8Cae#F89h,5jT?/2;p-+#0[*mPkcSa
%$0#Pk;@7e!F\Bq:rea@iejWpe%c(c97[1^P$tAh<Dkl+?/eF-!2>Ef^_82k6F0YM-Ppi;c#td\Xi9Gn0B;?#Q5lX9dGDCM@fas-B
%EdnsBm,.g3l2ANoh]4hm%fOO5q,]LMY@@ghYqt]B:S.<]nBCkrIC-2M=n((":HGckSQ:%&gS$1d+'FCSoX>7:rrbjC_-oF6JGtrI
%X$Fq`35*F$U11/=bEB)MQ6<J/JiNYG6de4uVIF?&/@h_ROP%^bj-iAP[Ite*pK+WmDcggu33^&QfSWIM2A310Y@?ftFR0t87B'Ba
%!3g&m'k\u0N=p^MVS]/)Fdkc>NLqKWM.+Of-0_E[8JflBB+/A[8Ja1`."bZ;n<ZZP7S0EbF,9o_`F;F?JViUHeKu?$N-c%M$UGcR
%,9$@4&49$\Cd_$]!7Kh%n93fo:_;37Imh#6dFBa55-W+!E+Yj-P[p3bc]PNFQ&4<KL^+%Z\$EUL0ZkhC+;mEU7]tfi)<>[4aPFZ"
%E+7Vu9(%EJHkq^EjDH+>o#6'JKEIPC?Bh*Jak_ib^n<POmT,Ee=.t?'%33($;7U_F'p'6t$o0CZkgYP?bmAS4B\+#1iD(V4TQ-ll
%\#gTaghB(gVeI'64)HB/b+0<-3t;!f2%k)o:)gYnB*@YFSVAs_b"8_jBh5_c/SX7^SVHoMVdrBASVGs/.>a<O%8;Q%\AoBQ["0RI
%Zf_q&-'4t=;=68+`CRi]m^.n[FDUp5No,LuZ]>k$FEb65J"^\36-"Nj=c\.MV9"N`OZ!.-Q;ps6Z4MrU/Z5[+Ob%.M,Cinkal(LE
%r+&Ruae2(F]C6+k)=E-bW/A"PPE@\`]F_RTK=sl*r1)T-I2>r!0'U#&Yg0b\ki]-_Wa0ntKJ/pUJPF4f@Q0$rU+G\63'dkNS.JX_
%#\rG$c3UF89P26A8l,]kG"W3R"BB1oYWS?/b#lrlBG0N$#2dTQ3V6LGDoY'`>p>&;Y\n)@K[O%d@)kM)_hYt<7q^8pO;&NA=d7IU
%Ghe]`J\hV=1J)kRMc'm47'>3nR(p-[3$q]uO/9_N$"I".,e?FAC^(B$`(Lt;S0R37JPCqB/JH=3B95(:<0_$>Cc5iBNlEh:F>.8D
%:(tfiPT14N74Tq,&3EJ0"(<(eqcTdYA!!gu%$Q[5Je.`n@2VPA]%:es/AhdT-crGeA/WB)dF=PiZ4)B`ZDl]R/AiV,,tAJ*5!.H*
%5uoL!M%e5)Jg0Uq:7,_>3[HT9ajO7/U/ipE0Mi-102`?o@;jKF."--'!NV9'\.3U7B.]S!;4mF<JtG[1E3&Qg?7`WS";glGGj%*5
%"bru@:D`bE9QuRPOGQ=5(1jpf'l&VQ/'M0r,a"'22<E<Wn1K4?3Ud^%GtB-MNgJs+\_(\2=NlGKB\K?=igGHa(V<0d_jbTa@e[C;
%O&0$mPpPEdLR5\3"[Gnah?N71b0@=2=RBDL<-Dh>=AF[LQF>>Q6/o-#*aB,rZ+56J='mRZc/ml:+oZJ6qJI/l1=Fc%JMb7HP)f$*
%,\3ki5ZUS1E9&5iV7U9/_Q\92qcAu?AV-/+Y\+<GV')/iMe"cNl>!S'4oDJNp+0fm"n<.._(%lTDYBfX)7&Z[Q[)`%o7[_tX<0cb
%+,gcG89Q>2(.*E1@ODg+mJtIrd)?Ziq5baHf'XGESj$e4?C$29#Ll-V<ZQotSeh*,9AfjIOD(R<n6"l%>69kDkrkmFI.esP\CA<n
%X-D=lPhM1m`]BsG/k2hbQ"G4GU!uP8PGZLj=D>V$B-3'@NHmms*fj.[kW+Z*H6Loel*L-(=hJUnTi[;&;c!/mjKRZ,cVGPp#^W\U
%l$=O9.]W.+;<ZOrl)=Cb`n;4ADuc>N8KA0ak_]Fo8?cRMC]QsNILepG%O.c6J+`eU>E009mDkk"YK7LDPE2)t-A6*SE$^I=Bk@'-
%?4pfp<V/R8Zndmq,:RXa$!gXk7ad+)K(=jPXIIR:`)_d1"%'n_b@WIm1SJ6rjY3M;\sK:Y/ILku/)t@fHg%(i,rAHo[2ud4]8j&M
%4#!;9T=g0sr8=Xbb*kANIjZ!+=T]fJSMHJa'Qdkll15=*0I6mP2?Q40+Ot(sK?%RA)PL$QD\pj.AHItf=(tg(EmQ9==sm\ZkFl5Z
%G9)+W"Jj?^mgfb4.)U'f6>?*aR=c;t<dQ>0:Fsc!r#-1>f_$4Y(ia+G>-i*sSL5hBP,?]1ea>8*h7sG;MH0#:3n<sddAi^Kh3bq$
%L!o!-g,839R3jScFoUmpTH(82U_b9u_p4QMb3]<`.'AGn]ET1i9"r-/jDG.BKr@%Jls=_\A75h&?m"^RZEG[f)2X9T*ug'_Y^mfr
%8J0EQo@Z[9kWBJK`19eq7fqqdHO9:7F<k@pB*5Dho/L!(qq*m`2OQ[[8+<A!c9okm8J($q,jK]?r[1DO<]-WgP2L#*Y\JHuQ@3Pq
%]c8Um'80N)$BNm\k3>4j,mhHT]D&VqMPQ/N>uFu2)Ip\.!/t/Wll'1SmsJ>\E]$\Ta[LfdJRNGh6(^QOedTPk6)`1fV?EsiG9RmD
%26G2smP"Z?fj#G?3J*%9k]H^qI6@<"`H@qu!+AdnC<T$,1(%)M3@0iGc*pCs2Xb/VqqDCj@Oa1=BsP&T(Xu6\\g5O0eoDM#=,9jT
%V_O]DY2aqbhO2&b7H8.(nSKb%V\:^d?C!W6RC2&PAaFhX);;ZJeFM`OL7"ef=>Z2UDsfCo/'Ias%*mr_IQFi&?LU_iZ_!QD)W`3"
%7cgoZ2L*P23Yjfu@bC+;a9h%F<:)V7[6aOBgfa4*X9G$WHWsdo#+[qndXp8AIYcmAgN?04;C[M!YF>Plk[%HZcH8"TU.Cd-/in>q
%GJ;u]pW?\iPS5-<\1qX9USq*`+RYZ)U<%:s>4=]=V4H\abO@8O)c+,a7dY,<#`T)\ERZ/7b_k5>,gE"<,_5CDSc#i$_6V,Wen*"D
%&K9`:4Y[W,7?\6"W,Cca4[,MD%/=BmFn]@\5?-rTNfWAR\sJ\VDnK+,:3VNa1a]Bgq%%F+<i/A(o3&6p6"Y#ZT3t8WB>V]ork--T
%bVVG44.2-4$^b(5!$Ql.-a#^D$1?4F6h7mp0%XiST<DTX"OWs"\V(iB!I[?r>bS:"$(3t:U"6BS12H_t&!';94gt!TF_Y5T:$]/G
%ZFtMW8\?:c(f:l+]7=:Tk]d^6+b;4i!`E,iBEaN?.ZCW<CVo_&9@dhUTHTg>-7tY5nW=uJh-AV99cop&D;/$Z[K!P%a/3E,A+Sup
%nbbct;^9sY:.6.("5+ZGAJRUFSaHphVD24->]I#-Q<KBb'Q,#Y[g_4Pe=hFYnQ=/3RZ)j(3Ke9?"ds"37BKusD;+]A%N_'l\4<nn
%Q[m9P[9:i\?7sd!'s29;Ebeoc>$%$JQ$'[ISsP.\\NR*5UB>#:l\KZH=P;FM7k37fU,eiC5Hb^i9.q\aHp[G;8*8Uh\t2VN_RNAQ
%<k\nK&QDgS%V/IIF*4eZi.,K[h\f?i8]p&oN\b727s5g!&bq1+;CCr;^u]5,GEfHU=DiB+mXek'iP521k[P0u?8)n_D+(,dT`XBh
%2T^TF.%MhK0-<PZAcbL'+?p7T,:RJg0$;e5AfDHP,t\jJkfjG&;+N%L?8+/[IR[eB.fCBn/tc<T7X-%e$jmPXdO*E$![U'qQTG[h
%Ou'_\Uk9Omrk"\S6V?;(A7eX>a2FhHjCaWCMfql&]Z;(8W:iAcnB5S(;[T^>^&!$"IJ'F@&%;c*CE/*Q!fol7L:[eZ4tu%\BM9hD
%"c9Ii%"qb'!'$e7)2kSY57:R.>>@Ota2lDG2)G-"B@VfZP'a^7fCf8$IGd?l3OtgNNVa!2=HGe<8>tN"!p^EQ-O;bX9f-2T9htmf
%lTiH:d&IGC;5C&0=3]bJ_4RFkOe;S$\FuQ7mF4RR%`1^WbQ]sN6P0mudE'TIWg?TPUN4j?(1\%'Gpcrd/k$`*<2CFkQlP%(#JQ^^
%@pADCNa(A"9BMFFiXW*I^$+i:gD`p[2YI"%GB5"Bp<N96E;4J-*-qV\fXm`$JAB\h*IE;D:6!N/k@(Wia+bU^\0D`Oh<W/f"gPNL
%[n!&$9\!=t_[hQp[!MKJ&YH<'oL"$Af!P,JUCKn_%Qa[<$AQ%9#9Xp8.=7C+&A;h_n#V;;pILu]r:Uis*qrC\VIP^LG"g4Jrg"uA
%k(=4YY-C_L+eY-LT8pe3\N.)?5AU7H]qb(?<hl#61:L3N]L_FFO7=%DO:M8B0qL:9+])ck>>N-[f&&6fhJsM9iQC#ILYa3G\QmAN
%7)Y?91q?$>OZ4tq@m<hGSBaNq\]@;5:^!$Hn[k<KW3.r:pO"LnbtJARS;V%f;Q6b\,*6df5!'V/Oi$I#bL+B3TNA.aNS_K6?deXi
%"<-N2C<%P1p1HN1!VKXMp41(/>ViUi*$eXk\JT\lb3U,&PID"hYB`Uo:=J_WRq@_0j3)1%I(mAfQK2&XAD&O@0pH0<iWW*f2$5oq
%f(1j@LdNNT#oUmPP<@GI8EsX0kfa@7D_lWIfD5_=cUKgFQU=..fsZX2RStrFg@i(S"jl_3&VaH+mUj\3^XTr=nR<c(Xo:J+kKpe"
%X?.H&IF"YX7CD"_OF<8FpQ!<f"3O9miufYIAAM1d\e@ac@#nCNahc^6CG"9*7[T=)"aKk/6XC>_[U0H4n&h[ns4iW9H',Xbk2#s%
%0.?f2G/ekQ1YMZ,i\*!f42E[oe'9p1"ctqK!&JQpl#9mTa#S$o.R<F3A*CRdRnsbL_7R59!2`0o#`)+2eCJmC_!c6Xht)Us8M)&)
%XcW&mSlGbu8HdC.P5olPl\o;*f2@TCeJ\LKX[#MR8506Q'QOi*$Mt\5dD(;)?7lg-5r'.j""^)F-Q%pR%]0B>aCNEA#YTadNDWW?
%8<GVjYu-d:lZ&!d9H41@g'_c9@hcu^WsB9*QW'a68>dq?m/Z:K^FQJXLTtFh@7;ZfbDA>,]l2AqI=q<n3l^ONX=N2N;IG5B%m$rI
%BrD8b[7i]oT/\/,W[Gdm7WK;]c(+b-R&mgbAU:^:LCE::ET01Yh*[f_e[+hTbO/$QIbPt;o+KDPM8+JTWu3+rYgJ@N4%`%q-4lm7
%\25<_;WV*r!`4351cIe+@mSor%lanSn91V7<]'pS5mY.-bk)De4+4(7;9$.@hc#'7S#'6pXt@,?/j"=A:!(/GH?\,Qo0jGFiBqrU
%<b5]F,mo9sCS=)q,KG_TiN=;>dGkF;iRT<TNZVaq:9HXr=Q[:33RaKD*5uDti6d^_"KYQjf'kg0_6pdf,;:jnM%Q)t2dTZC/\k"6
%gb=&BX$Z74BHNHm>so]$=X9bJD&c[a049;MgC>mH$.1BJ%i%LXGqXWP'8US3ZC'];"8EhfKW8tBF9oMAP?[S^P'O.W*=ej07]VX/
%@dUNGpu*'Zei1Pt;MYIVWmMns>l:(>;,T_[K[A/1LPEW3Yg+(hNm-PtU)gn]2VX!^+i!@(_h3"%X/bV]Y*)e0Jg(mUGdl,aeMB0!
%ZNT*7l3u]QX,Tq`O;u&n#fhM+`7KYV`C`4H[YbsR&6Vf.F!4;tkeOd\KLmZTm":*P:N:8RH<[jQT)a%1IO81JgadSQCb2$&>3dMp
%6(1tBhBQYbQZ`iI$JX8J,lHV->WQ\WN0K@G;J[44X(`I1q/a_I=JKu8Q<(3hc(<`ucL7GaPhiKXas"U2B5KY.frI<.m(,g^CU3il
%S"cAfPW0\FO#)MrO$L]HZ/-:>gUN7fInNhLi%ACc,2rUM),%nBa&21@S#`7qFO]H4'1+NaeR5qARr@Ig";4Zi^TpB%TecormutG$
%1mJ?(hJH*Vj27.2+'a;Bdr9"!mJ?StWpEaC$?!HoI+D*TV0(+)`:76Ya;ZLp2$Sg#-59;%1k#P$NX)j$YDCB9Rs*H'>m2cBa92_r
%X,)O@Y,\panN'pc:/Y]o[o$mnlQMeA`g'Z-jGB.$+Lr1<6Rr[b^n?OG#<q8ijGm[:3k8b<Ws'C&*F^;*r]"&q6=VIOUil(D5h/XE
%d5mi[;XE*j54u0=;We$Pc.$6a]QAHtAU(?)8'QnE0d)DbT[8Qrf;a:Cm*;Qp"5j-/oGhuI28"pQ2XGQ(,u"cncUQVPcs*_8Y^MPg
%"-IU"![W,[Nt$B+_D:Q'h$o:]:uEQGW;3GiG*,_NWqdeIIAc>FG8Jdr_3"%GBoB2)&-Z]sN-s(M>%Ln>SsK$51*ZE]LEJ8^$ttFc
%"-gkRMggKS_E`6EQf+>_DbRfc6sWc>@g;#,WA=^Lj8>mcO`/]];\RE8q,?@\6&\/%-J7[BA%W&UM.)u#P$[f-k4\DpMq%b(Q^AST
%IFq0SDAGSNVZi_bp5PeOX'H\I#3:q`6cKQ9!RnnIfgn+-?0/3r95bnRZr5<Uk[t0@^5NuMQ5LLM\4%<B/FWD@'s->"==R4liq,)s
%Zsgqc4J?tV159a6!EHm6(i'aTr<]-aZlh4MkFdb>N3Y$.NFNpH\k!IV>a#,f.ta0,".W211das][U>'1:j>fV$SIG_b=nF#ftgCm
%G>gQ0OC-NX(15T3(1-[ukk5t<;muIZm;E]_H=h:Ig'r-2E\]4S#:WkSX8:0a3g#TT']3;!\`XKUpuh1OX4uN3&EaHIk,Nd)\nJjb
%9p*De%SBD#]$%,BU=Nj:12E3iNF9"lGcAHsWc&:*4NjI)3GFaFpX\r)/dbp96lhYEMd'lB!Qq;<N:XJpILCt_oX!G`k*H9!4Z)Qe
%0@eZ+161'r^[+Xp8dtg]-'c#'c'3U`c82K8?(4@V_,(rnI_L!-+f^]8i59hoo>'QckM_o'c13nDMtT'NTcNm-c\LIZeW''ul:1Om
%FlNX:OnW,t>/c3m;2sflp^&726CkOiU#:&R<\Lockh`GrIP/9r+[!"dgUXQs<.^FY@&qiN4kck3J9CoX_Dt239;Z/&P`+roQeM#b
%Pe*hD9uKS#5CP^[G*OW3*]V2j/Q/SCD?Z/RKM]oC$@@mE=dn_K(Wu=!)O;.kBGF?_:*i_2=k"6pM[c4hFTe)$%;:kinZhbn;*UPA
%@rIfEf3.+[P'p?LiqB//9@U\F`r+"pIoTF+5AlAKdjr_%8;RoNc8jI!2'K5Td7(&9]f!K[B%[!Re8U6`!!2';l8b2W+;e<To1osA
%;"IrjN3F$pRtC.;*h2r`%#`cOC\88t5YjdP@>MuWBs(kT.aQgRE:(/8^Hp5&qeK^8E9n:q4+%MiTN=9(GLMb(=m]S_+Skq;if6tN
%h4h;b2LIUh;rB7<a/H0.ASa2BaMh7^i1?M^2<MP\&&_A1;au6B^L8pOZ0E37"/ICKiC2G3f!U)Th4/4UE84l=ecnS(nnsFen:@6T
%aaUkqg?P:B2WOejL`KaoHRnd9dWsC7b.m4ej^.Vmg=>_c7DH'B`HY.[\\CU<F+4X&MfC=sQ!06q>3u*)GS'8(TeSi]X^+7I3qIfc
%$,,)f6-S:UK4[*QJU0EgH[-e$"`FSD2@:Ku2:P>X>X\`-0;t:XmDX3ilGWcJKU7&PgNsp[4H6DZgDjWpRAV6Z$])_WF!i<aj0VW8
%k7pG<)(^i!j:s$cKV`3i:TZ=DG!L%P_44?r4.8@6$t4^V1)`Qhob7s\fh`V9Dt#0`5l>>H+_b-ljNPnRD(,r#:H0N]B1;h&Qs>O&
%]F6i1??>V7_+qd_@Y1\jn)Us8DFOi-E@?2n:_.``fZqjZA9q6R_Zn.^_LG.?c,NWqks7-eTI':U%I\Q=#nHAn2+e)e6J4)"!A%;&
%`8>2%ns3"dN#ST[J],DFrKuXR29E6C./+S+:dJ?uXrB&+P=g.T0OV*k]t:kk%df$7EHY_Sm)^sL#Aj8G;o*'1OF*EHAtIld?%l)T
%<>/%7\'Q:OCA!b`!q$+MjkD3CYJk!ZY2Ljf3E1Q`Q9!cbf?mT+9g-4N5&8kYOSrYWR,kUXZ9b"O-iq/$FMZ^*gPX:/'9N&5S.F\6
%:4om%m5k*F+nN>:qWVLuVn-ll,+e3i3?'col,"4D)7('KHb@pK*IZKum$]5]*.^mH"-NT">qDRHOT#,_VQ]4=AQT3j'Ek5UdXCIi
%SeNgXTYb;mI2mk$bZ`Cg%:I8Zr[,4EU(3s@H#p=3]d7\@Q>3@AGg_DN%)]>qgQerIk&"0/_RsG"mP59n5:)H)1Q'rgP.i:hd:VAt
%Qs:e6Gr:;;0$:J[ZqdSs>^5bY8*8MSaMZ+S8JO@^3D14HK%p`HI3?l.<"<'U\o*/KU@Qt.bnhI@?1SkDKVQ.3BQd'g"eEeO_4I()
%W_G'?\1clac%n`Qf"eVZBpV(\h7;e^0r/peJUZc!&uX]u5U2[qJMn@0$.[aP`Cd;8'`nDP[*KYHge=DF<m/9P>.7=_S=G3<IOC,-
%K9p*48gP39_J#AH+[T.SZa$C--mO;i-mfSRnUbpaFIJ;GC5)Fe:ia(Q.>W(<<a@&o,4^IW>;/pfT:+"tpI@Ok!r8sV.EE'\]3!fR
%TIB:j:CBc9;9]0RK!bDHKt`G7p$f#!P#r+<K2fRtH3F;N-!!%/S7=i].FgUtGg'W_c;d/h(4r[OJq^g%CJ-FYIJIW^$k(:*U90@O
%@=9(p=$`&gW&uH+_BUj?@P^C1J*o.-.VOcY@Ghr%V0Q?cf?m_`B&oV#k<^tgs*Ypq78jRcauZ?Vj1]A5.nrl>[?])RW\/W;7SgKM
%T\X-Gf&((M;[JWO9/V!KFS[b"A>Xrgou4![5R+Qm,Q[6mUN&+oId>s-@oH<n>@We@\5OLVeH@$j)$qGB>nrdJAGiScG!O'^TZ>/)
%>,lUmErN;T^E11or\jd@s7(m5mb\!._oF]S#4NGDIfK9Us6\kDmiO`@r5HGJr?'pHqJ^c\_[hP`qs]C2:T**"r:%b!If0!"oZ)IV
%nK3>?8';GBi\1;kJ,PjDr4DtNjDNHA~>
%AI9_PrivateDataEnd
